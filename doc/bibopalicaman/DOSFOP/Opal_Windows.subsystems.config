name = {Opal Windows}
directory = /home.kassandra/kd/ocs/src/lib/Tools/OpalWin
SURVEY |
@c ========================================================================

@set OPALWIN OpalWin
@set TCLTK Tcl/Tk
@set TCL Tcl
@set TK Tk
@set VERSION 1.1a
@set OPAL Opal
@set DOSFOP Dosfop


@c ========================================================================

This is the technical documentation for the @value{OPALWIN} library (version @value{VERSION}).

@value{OPALWIN} provides an experimental graphical user interface library 
for @value{OPAL} applications. It is based on @value{TCLTK} (version 8.0), 
has an interface to substantial share of @value{TK}'s facilities, and adds
@value{OPALWIN}-specific functionality. 

@value{OPALWIN} uses a communication approach to deal with the reactive
nature of graphical user interfaces. The communication model is
based on @dfn{agents} which concurrently execute a monadic command,
achieving synchronization via so-called @dfn{service access points} and via
agent termination. 


@c ========================================================================
@section About this Documentation

This document was generated by the literate programming system
@value{DOSFOP} (Documentation System for @value{OPAL}). @value{DOSFOP}
provides a compromise between the convenient automatic generation of
documentation and the necessary manual intervention of the
developer. However, some aspects of this documentation, in particular
the order in which structures of a subsystem are printed out can not
be controlled manually in the current @value{DOSFOP} version. For this
reason the textual order of this documentation should not be taken as
the appropriate reading order. A ``tour'' is provided which suggests
an appropriate reading order. The tour is designed in particular for
use with a hypertext reader such as @code{netscape} or
@code{mosaic}.

@sp 1
@emph{Note:} the technical documentation for the interfaces to 
@value{OPALWIN} is still in a draft stage (though more so than
the implementation). Some remarks on how to use this
documentation:

@itemize @bullet

@item
For a conceptual discussion of @value{OPALWIN}, the communication
facilities of Concurrent Opal and the application to window programming, see
@url{http://uebb.cs.tu-berlin.de/papers/published/TR95-19.html}

@item
The examples in the distribution source tree at @file{examples/Graphics}
might provide some valuable
tips on how to use this software. Start with @file{examples/Graphics/Alert},
then take a look at @file{examples/Graphics/Calculator} and 
@file{examples/Graphics/Queens}. 

@item
Not everything provided by @value{OPALWIN} is (currently) thoroughly
documented. If you are in doubt regarding to the functionality of
a given view type, in particular the configurations understood
by this view, the @value{TK} manual pages may give further hints.

@item
Not everything provided by @value{TK} is (currently) realized in
@value{OPALWIN}. In particular:

@itemize @bullet
@item
    The widget types scale and listbox are not supported.
@item
    Not all configuration options are supported.
@end itemize

If you think a particular important feature is missing, please contact
the author or, even better, try to implement it yourself. Extending
@value{OPALWIN} shouldn't be difficult for experienced @value{OPAL}
and @value{TCLTK} programmers. 

@end itemize


@c ========================================================================
@c @comment  node-name,  next,  previous,  up
@c @section Copyright

@c This software is under copyright of the Technical University of Berlin,
@c c/o the OPAL Group, Berlin. 


@c ========================================================================
@c @node Tour through OpalWin
@comment  node-name,  next,  previous,  up
@section Tour through OpalWin

The basic structures of @value{OPALWIN} are the following:

@itemize @bullet
@item
The structure @code{WinView} provides the sort of views, combinators
on views and some basic view types such as frames and labels
(@pxref{@Sign{WinView}}).

@item
The structure @code{WinConfig} provides the sort of configurations, 
combinators on configurations and a couple of general configurations
related to colour, relief and so on  (@pxref{@Sign{WinConfig}}).

@item
The structure @code{WinFontMetrics} provides operations to query the
metrics (height, depth, lineskip) of a font (@pxref{@Sign{WinFontMetrics}}).

@item
The structure @code{WinWindow} provides the sort of windows, 
configurations on windows and display of windows
(@pxref{@Sign{WinWindow}}).

@item
The structure @code{WinAppl} provides functionality attributed
to the entire application, such as the screens properties,
option defaults and so on
(@pxref{@Sign{WinAppl}}).

@item
The structure @code{WinEvent} provides the binding of events to
views or individual items displayed in views
(@pxref{@Sign{WinEvent}}).

@item
The structure @code{WinTag} provides tags, which allow
individual items of displayed views to be addressed
(@pxref{@Sign{WinTag}}).

@item
The structure @code{WinImage} supports the management of @value{Tk} 
images.
(@pxref{@Sign{WinImage}}).
@end itemize


Basic views are realized by the following structures:

@itemize @bullet
@item
The structure @code{WinButton} provides all kinds of button views
(@pxref{@Sign{WinButton}}).

@item
The structure @code{WinText} provides all kinds of text views
(@pxref{@Sign{WinText}}).

@item
The structure @code{WinCanvas} provides canvas views
(@pxref{@Sign{WinCanvas}}).

@item
The structure @code{WinScrollbar} provides scrollbars
(@pxref{@Sign{WinScrollbar}}).

@item
The structure @code{WinMenu} provides pop-up menus and pop-up menu
selection-button views.
(@pxref{@Sign{WinMenu}}).

@end itemize

Gates are realized by the following structures:

@itemize @bullet
@item
The structure @code{WinEmitter} provides emitters,
which are used to connect buttons to the applications logic
(@pxref{@Sign{WinEmitter}}).
@item
The structure @code{WinRegulator} provides regulators for 
controlling the configuration of a displayed view
(@pxref{@Sign{WinRegulator}}).
@item
The structure @code{WinSelector} provides selectors, which
allow automatic synchronization of the configuration of a view
depending on a value stored in the selector and control over
check and radio buttons
(@pxref{@Sign{WinSelector}}).
@item
The structure @code{WinTextEditor} allows a displayed
text view to be controlled
(@pxref{@Sign{WinTextEditor}}).
@item
The structure @code{WinCanvasEditor} allows a displayed
canvas view to be controlled
(@pxref{@Sign{WinCanvasEditor}}).
@item
The structure @code{WinScroller} allows scrollbars
and scrollable views to be controlled
(@pxref{@Sign{WinScroller}}).
@end itemize

The internal implementation is based on the following structures:
@itemize @bullet
@item
The structure @code{WinInternal} defines underlying data-type 
representations and basic operations
(@pxref{@Sign{WinInternal}}).
@item
The structure @code{WinTclTk} provides the interface to TclTk
(@pxref{@Sign{WinTclTk}}).
@end itemize

@page

@page


|
