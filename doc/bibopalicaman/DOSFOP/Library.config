LIBRARY
  SURVEY
  | With the exception of @t{bool'PREDEF_BOOL} and
    @t{denotation'DENOTATION}, @sc{Opal} has no sorts
    built into the language. Consequently, every data type, 
    that is to be used in a program has first to be 
    defined by means of a suitable structure. It obviously 
    makes no sense, though, to let every programmer 
    start again from scratch. So there are some basic
    structures available in the programming environment 
    of the @sc{Opal} compiler.
  
    It should be noted, however, that these structures 
    are not different from any other structure. In 
    particular, most of them are written in
    @sc{Opal}. There are also some structures, though, 
    that are substituted by hand-written ones, having 
    the same semantics as an @sc{Opal} implementation, 
    but more efficient in terms of storage and/or
    time. (The @sc{Opal} user is not aware of the kind, 
    of structure he uses.) The library distinguishes 
    the following kinds of structures
  
    @itemize @bullet
    @item @i{predefined} structures; @t{PREDEF_BOOL} 
    and @t{DENOTATION}.
    @item @i{arithmetic} structures; @t{Nat}, @t{Int}, @t{Real}, 
    @t{Char}, @t{PrintableChar} and @t{Bitset}.
    @item @i{function manipulation} structures; 
    @t{Compose},
    @t{Control}, @t{Section} and @t{Suspend}.
    @item @i{trivial} structures; @t{Void}, @t{Option}, 
    @t{Pair}, @t{Triple} and @t{Quadruple}.
    @item @i{aggregate} structures; @t{Seq}, @t{Array}, 
    @t{Set},
    @t{Bag}, @t{Map}, @t{Avl} and corresponding 
    structures for homomorphisms
    @item @i{string manipulation} and representation 
    of arithmetic types; @t{String} and @t{Conversion}.
    @item @i{input/output} and @i{environment access}
    structures; @t{Com}, @t{ComCompose}, @t{ComSeqReduce},
    @t{ComCheck}, @t{ComStream}, @t{ComData} and 
    @t{ComEnv}.
    @item @i{debugging} structures supported by the 
    compiler; @t{ABORT} and @t{DEBUG}.
    @end itemize
    The following sections enumerate those 
    library-signatures the project makes use of. |
  OPTIONAL
    new_pages = off
    properties_include = off
SUBSYSTEM
name = {JavaBase}
directory = /home/opaladm/ocs/src/lib/Tools/Java/JavaBase
STRUCTURES
OPTIONAL
STRUCTURE
name = {java_io_FilterOutputStream_SORT}
OPTIONAL
STRUCTURE
name = {java_io_InputStream_SORT}
OPTIONAL
STRUCTURE
name = {java_io_OutputStream_SORT}
OPTIONAL
STRUCTURE
name = {java_io_PrintStream_SORT}
OPTIONAL
STRUCTURE
name = {java_io_PrintWriter_SORT}
OPTIONAL
STRUCTURE
name = {java_io_Serializable_SORT}
OPTIONAL
STRUCTURE
name = {java_io_Writer_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_Class}
OPTIONAL
STRUCTURE
name = {java_lang_ClassLoader_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_Class_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_Object}
OPTIONAL
STRUCTURE
name = {java_lang_Object_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_String_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_Throwable}
OPTIONAL
STRUCTURE
name = {java_lang_Throwable_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_reflect_Constructor_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_reflect_Field_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_reflect_Member_SORT}
OPTIONAL
STRUCTURE
name = {java_lang_reflect_Method_SORT}
OPTIONAL
STRUCTURE
name = {java_net_URL_SORT}
OPTIONAL
END_SUBSYSTEM