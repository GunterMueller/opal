\input texinfo
@c ** start of header
@paragraphindent 0
@setfilename install
@settitle Installation of OCS
@setchapternewpage off
@c footnotestyle separate
@comment %**end of header 
@iftex
@c afourpaper
@end iftex

@c $__Header$

@finalout
@titlepage
@title Installation of OCS
@subtitle for Version 2.3d
  
@author by Wolfgang Grieskamp and Klaus Didrich
@author Copyright @copyright{} 1999 The OPAL Group
@end titlepage
@page

@c =========================================================================

This document describes the configuration and installation of the
OPAL compilation system OCS, version 2.3d or later.

@itemize @bullet
@item
The hotshot is served with @ref{Quick Installation}
@item
For the requirements to install and run OCS, @pxref{Requirements}.
@item
The complete configuration procedure is described in
@ref{Configuration}. For the diverse configuration options,
@pxref{Customizing the Configuration}.
@item 
The building and installation procedure is tackled with in
@ref{Installation}.
@item
Notes on installation problems are found in @ref{Problems}.
@end itemize

@c ========================================================================
@node General Information
@comment  node-name,  next,  previous,  up
@chapter General Information

Starting with release 2.1e OCS is configured on the base of the GNU
@code{autoconf} utility. This shall provide an automatic adaption of OCS
independent of the system type and local file organization.

The automatic configuration is still somewhat experimental, and has been
validated only for the following systems:

@example
    SunOS5.3  Linux
@end example


@c ========================================================================
@node Requirements
@comment  node-name,  next,  previous,  up
@chapter Requirements
 
To install and run OCS you need the GNU @code{make} utility version 3.64
or later and an ANSI-C compiler, preferable @code{gcc}. You definitively
cannot use OCS with on older version of GNU-make than 3.64.  To find out
the version, type:

@example
    gmake --version
@end example
or
@example
    make --version
@end example

whatever is the name of GNU make on your system.

You will need around 80 MB of free disk space during installation (even
more, if you plan to install contributions). Permanently, around 30 MB is
required.

You will need around 20MB of physical memory to install OCS. Less is
possible, but expect extensive swapping (the C compiler will need the
space). For the documentation, memory plus swap space should be about 100MB.

@c ========================================================================
@node Quick Installation
@comment  node-name,  next,  previous,  up
@chapter Quick Installation

To configure and install OCS, run

@example
    ./configure 
    gmake install
@end example

This will install OCS in @file{/usr/local/ocs-VERSION/} path.
It will take around 1 hour on a 300MHz stand-alone computer for the complete 
installation.

Since the installation is somewhat time expensive, and hence
trial-and-error is less appropriate, you should consider to study the
sections below carefully before taking over.


@c ========================================================================
@node Configuration
@comment  node-name,  next,  previous,  up
@chapter Configuration


@node Preparing the Configuration
@comment  node-name,  next,  previous,  up
@section Preparing the Configuration

The automatic configuration procedure will lookup the existence and
locations of several UNIX tools such as the C compiler, the @code{make}
program and so on. If the option @code{--enable-absolute-pathes} ist set
(@pxref{Customizing the Configuration}), which is the default, then the
locations of the tools at installation time will be burned into the
installed OCS system.

The lookup is done on the base of the environment variable @code{PATH}.
Ensure that @code{PATH} is set such that your prefered variants of the
tools will be found. Think of your @code{PATH} during installation as
the @dfn{reference path} for all future runs of OCS.

In particular, you should ensure:

@itemize @bullet
@item
an ANSI C compiler is found in the path (such as @code{gcc}), either
under the name @code{gcc} or @code{cc}.
@item
GNU @code{make} is found, either under the name @code{gmake} or
@code{make}.
@end itemize

It should be noted that re-configuration of OCS will be necessary if the
tools are moved to other locations, unless you have explicitely disabled
absolut pathes.  Disabling absolut pathes is not recommended on
multi-user systems, since the functionality of OCS will then dependend
on personal user configurations. When using absolut pathes it is a good
idea to have the tools at standard places such as @file{/usr/local/bin}
and @file{/usr/bin}.
@sp 1

It is probably the easiest way to run the configuration procedure itself
to inspect what tools will be choosen under the current @code{PATH}, and
to re-configure if the result does not satisfy.


@node Running the Configuration
@comment  node-name,  next,  previous,  up
@section Running the Configuration

Cd to the source directory of the distribution, and run:

@example
    ./configure --prefix=@var{install-dir} @var{feature} ... @var{feature}
@end example

where @var{install-dir} is the directory where OCS shall be installed,
and @var{feature} is described in @ref{Customizing the Configuration}.

The run of @code{./configure} will check out the capabilities of your
system.  For this purpose it will create C programs on the fly, compile
them, and occasionally run them.  For security reasons you should not
run @code{./configure} as root.

The @code{./configure} program automatically maintains a cache of the
given features and the calculated results to be used for its next
run. This may be useful to selectively enable or disable a particular
feature without examining the system again. However, its should be noted
that @code{./configure} is not capable of tracking any side-effects
induced by features or environment variables such as @code{PATH} on the
validness of the cache. To get rid of such effects, run
@example
    rm config.cache
@end example
before you rerun @code{./configure}.


@node Customizing the Configuration
@comment  node-name,  next,  previous,  up
@section Customizing the Configuration

Several options may be passed to the @code{./configure} program to customize
the configuration. For each option of the form @code{--enable-@var{feature}}
an according @code{--disable-@var{feature}} option exists, which deselects
the given @var{feature}. Some Opal programs require or can benefit from
external libraries, such as GNU readline, Tcl, Tk, or Java. You can disable
the use of these libraries or give the necessary compiler flags if
@code{./configure} is unable to find them

@node General options
@subsection General options
@table @code

@item --prefix=@var{install-dir}		
directory where OCS should be installed. Defaults to
@file{/usr/local/}. The installation will create a subdirectory
@code{ocs-VERSION} within the install directory.

@item --enable-dynamic
enable dynamic linking and support for shared libraries. Default is enabled.
The @sc{Oasys} interpreter depends on dynamic linking.

@item --enable-absolute-pathes
burn the locations of tools at installation time into the installed
OCS. This is the default.

@end table

@node Opal Features
@subsection Opal Features

Default for all features is enabled.

@table @code
@item --enable-doc
generate and install documentation. You might want to disable this, if
memory is tight, or if @TeX{} is not available on your system. The
generation of part of the documentation uses the @sc{Dosfop} documentation
tool, which needs about 100MB memory (swap + physical memory).
@item --enable-dosfop
install the @sc{Dosfop} documentation system
@item --enable-opalwin
install the OpalWin library. If you don't have X, or @sc{Tcl/Tk} you should
disable this feature.
@item --enable-oasys
install the @sc{Oasys} interpreter. The interpreter depends on @sc{Tcl} (not 
on @sc{Tk}), and on dynamic linking, and it benefits from the GNU readline
library.
@item --enable-reflections
install the reflections library for @sc{Opal}. See the documentation for
further details.
@end table

@node Compiler and Linker Flags
@subsection Compiler and Linker Flags

@table @code
@item --with-cflags=@var{flags}
additional flags to be passed to the C compiler on every compilation. 

@item --with-ldflags=@var{flags}
additional flags to be passed to the C compiler on every linkage.

It should be noted that flags defined by @code{--with-cflags} are not
passed automatically on linkage. If flags are common both to compilation
and linkage, provide them twice.

@item --with-libs=@var{libs}
additional libraries (@code{-l@var{lib}} and @code{-L@var{path}}) to be
used for linking.

@item --with-dldflags=@var{flags}
additional flags to be passed to the C compiler on linking a shared
(dynamic) object.  These flags will be appended to the flags given with
@code{--with-ldflags}.

@item --with-dldlibs=@var{libs}
additional libraries to be used for linking a shared (dynamic) object.
These libraries will be appended to the libs given with
@code{--with-libs}.

@item --with-ldrpath=@var{flags}
define runtime path for linking a dynamic library.
@item --with-ldrpathlink=@var{flags}
define linktime path for linking a dynamic library.
@item --with-soname=@var{flags}
define flag to set internal SONAME field.
@item --with-ldstatic=@var{flags}
flag to mark static link targets.
@item --with-lddynamic=@var{flags}
flag to mark dynamic link targets.

@end table

@node External Libraries
@subsection External Libraries

Options for external libraries come in pairs, one for the linker flags and
one for location of the include flags. If either of them is unset (using the 
corresponding @code{--without} option), the library will not be used.

If the flags argument contains spaces, enclose the whole commandline
argument in quotes, e.g. @code{"--with-XXX-lib=-LPATH1 -RPATH1 -llib1"}

@table @code
@item --with-readline-lib=@var{LIBFLAGS}
@itemx --with-readline-incl=@var{INCLFLAGS}
Specify location of the GNU readline library. (Define the include path such
that @code{readline/readline.h} can be successfully included.)

@item --with-tcl-lib=@var{LIBFLAGS}
@itemx --with-tcl-incl=@var{INCLFLAGS}
Specify location of the @sc{Tcl} library.

@item --with-tk-lib=@var{LIBFLAGS}
@itemx --with-tk-incl=@var{INCLFLAGS}
Specify location of the @sc{Tk} library.

@item --with-java-lib=@var{LIBFLAGS}
@itemx --with-java-incl=@var{INCLFLAGS}
Specify location of the @sc{Java} library. (Note that @file{jni.h} is
included which often requires another include in a different directory.)

@end table

@c ========================================================================
@node Installation
@comment  node-name,  next,  previous,  up
@chapter Installation

After successful configuration, OCS is installed by running

@example
    gmake
@end example

in the distribution directory (or @code{make}, whatever is the name of
GNU make on your system). This will bootstrap the OPAL compiler, check
and build the library and selected features, and install everything at
the place you have specified with the @code{--prefix} option on
configuration time.

Running @code{gmake} without a target as above is equivalent to running:

@example
    gmake boot
    gmake check
    gmake build
    gmake install
@end example

The whole process will take around 3 hours on a SPARC 10.

@sp 1
To cleanup every objects derived in the boot, check and build phases
run:

@example
    gmake clean
@end example

To cleanup everything including the configuration files run:

@example
    gmake cleanall
@end example


@sp 1
To test the installation, compile and run one of the test programs in
the @file{examples} directory of the distribution. First extend the
@code{PATH} such that the ocs compiler driver is found:

@example
    PATH="@var{install-dir}/bin:$PATH"
@end example

Then cd to the @file{examples} directory and compile e.g. the "Rabbits"
program, which inputs a number and outputs the associated fibonacci
number:

@example
    ocs -top Rabbits main
    ./main
@end example

An extensive test-suite for an OCS installation is currently
missing. But at least the bootstrapped OPAL compiler has already
compiled successfully its fairly large OPAL library.


@c ========================================================================
@node Problems
@comment  node-name,  next,  previous,  up
@chapter Problems


@node POSIX
@comment  node-name,  next,  previous,  up
@section POSIX

A main source of problems of the installation of OCS is the UNIX OPAL
library (@file{src/lib/System/Unix}). This library is implemented on the
base of POSIX, which is not supported completely by some systems.

If @code{./configure} detects incompatibilities with POSIX, a fall back
strategy is choosen, which means in the worst case that the incompatible
feature is disabled at all. However, not all incompatibilties can be
detected by @code{./configure} and fallback strategies have not been
implemented for all cases yet.

Some systems may require a specific compiler switch to enable POSIX
support which @code{./configure} fails to detect. On such systems OCS
may not compile at all, or only with a largely reduced functionality of
the UNIX library (see the @code{./configure} output).

If your C compiler and system headers propose to support POSIX, it isn't
straightforward to say whether you should enable the support or
not. Just defining @code{-D_POSIX_SOURCE} since the headers make a
distinction about it is generally unsafe, since only the prototypes but
not the libraries bound with a program are effected. On NeXTStep 3.2,
for example, @code{-D_POSIX_SOURCE} is associated with different
libraries. The correct way to select POSIX on this and other systems
based on the GNU C compiler would be to specify the @code{-posix} switch
both for compilation (@code{--enable-cflags}) and for linking
(@code{--enable-ldflags}) -- however, on a NeXT, this won't work, since
the POSIX libraries seem to be broken (@pxref{NeXT}).


@node Handcrafting
@comment  node-name,  next,  previous,  up
@section Handcrafting

It should never be necessary to handcraft the configuration files of the
OCS distribution, but here is what you should know in such a case.

The files @file{src/om/specs/Specs.os.@var{system}} and
@file{src/om/specs/ShSpecs.os.@var{system}} contain the specification of
where to find the UNIX tools and how to call the C compiler. Both files
basically contain the same information: the first one as a @code{make}
file and the second a @code{sh} file. The @var{system} to use is
specified by the script @file{src/om/etc/os} which should echo the
systems name; if @code{./configure} is used, its name is @code{auto}.

The file @file{./ProjectDefs.build} contains the OCS project description
used during the installation. The variable @code{os} has to be set to
the @var{system}. The variables @code{BOOTSYSTEMS} et al. specify
what subsystems of OCS are booted, builded and installed. See
file @code{./configure.in}, near the end, how to setup these variables.

The files @file{src/lib/Internal/Compiler/unixconfig.h} and
@file{src/lib/boot/unixconfig.h} describe the view of OCS onto the
UNIX host system. Both files are identically. In general, all the files
@file{src/lib/boot/@{unixconfig.h,BUILTIN.*,*.hc.c,*.hc.h@}} are
duplicates of the according files in the remaining @file{src/lib} hierarchy. 
Changes to these files have be made at both locations.

The mentioned configuration files are overwritten when 
@code{./configure} is run.  For each file exists a template used as 
input of @code{./configure}, named @file{@var{file}.in}.


@node Out of Memory
@comment  node-name,  next,  previous,  up
@section Out of Memory

For some systems it has been reported that the C compiler runs out of
memory during the installation (a candidate for this behavior is when it
compiles an object named @code{Candidates.o}). This is due to the fact
that many C compilers do not expect that they are used as the backend of
another compiler: the OPAL compiler produces single functions of a size
humans would never write down.

To tackle with this problem, you might either consider to switch to
@code{gcc} or to edit one of the configuration files by hand to disable
the C compilers optimization (@pxref{Handcrafting}). The according file
is @file{src/om/specs/Specs.os.auto}; note that this file is owerwritten
by @code{./configure}.


@node NeXT
@comment  node-name,  next,  previous,  up
@section NeXT

On NeXT machines running NeXTStep 3.2, at least, configuration and
installation will not proceed automatically. The following feature
needs to be enabled:

@example
    --enable-cflags="-D_POSIX_SOURCE -traditional-cpp" 
@end example

It is not possible to use the switch @code{-posix} -- stat functions
will not work correctly (in OCS, the program @code{genmake} is
effected), which seems to be a problem of the POSIX libraries bound with
this switch. Though specifying just @code{-D_POSIX_SOURCE} creates a
workable OCS installation, it is not sure if the low-level UNIX
functionality of the OPAL UNIX library behaves consistent on this system
(no test-suite yet).


@node ULTRIX
@comment  node-name,  next,  previous,  up
@section ULTRIX

At least on DECStations running ULTRIX4.2 and with a @code{gcc} version
older then @code{2.6} it has been turned out to be mandatory to pass the
following option to configure:

@example
    --enable-cflags=-G4
@end example


@contents
@bye
