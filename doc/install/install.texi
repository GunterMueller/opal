\input texinfo
@c ** start of header
@paragraphindent 0
@setfilename install
@settitle Installation of OCS
@setchapternewpage off
@c footnotestyle separate
@comment %**end of header 
@iftex
@c afourpaper
@end iftex

@c $__Header$

@finalout
@titlepage
@title Installation of OCS
@subtitle for Version 2.4_pre1
  
@author by Wolfgang Grieskamp and Klaus Didrich
@author Copyright @copyright{} 2000 The Opal Group
@end titlepage
@page

@c =========================================================================

This document describes the configuration and installation of the
Opal compilation system OCS, version 2.3d or later.

@itemize @bullet
@item
The hotshot is served with @ref{Quick Installation}
@item
For the requirements to install and run OCS, @pxref{Requirements}.
@item
The complete configuration procedure is described in
@ref{Configuration}. For the diverse configuration options,
@pxref{Customizing the Configuration}.
@item 
The building and installation procedure is tackled with in
@ref{Installation}.
@item
Notes on installation problems are found in @ref{Problems}.
@end itemize

@c ========================================================================
@menu
* General Information::         
* Requirements::                
* Quick Installation::          
* Configuration::               
* Installation::                
* Graphical Installation Tool::
* Security::
* Testing the Installation::    
* Problems::                    
@end menu

@node General Information, Requirements
@comment  node-name,  next,  previous,  up
@chapter General Information

Starting with release 2.1e OCS is configured on the base of the GNU
@code{autoconf} utility. This shall provide an automatic adaption of OCS
independent of the system type and local file organization.

Currently OCS can be compiled on Solaris, GNU/Linux, and MacOS X. In
particular, we have successfully build OCS on Ubuntu 11.04, Debian 6,
Fedora 15, Solaris 10 and 11, MacOS X 10.6 and 10.7.

@emph{Note:} The support for MacOS is very new (introduced in OCS 2.4)
and is not so stable. Please report any problems you encounter to
@code{opal-user@@projects.uebb.tu-berlin.de}.

@emph{Important:} If you already have OCS installed make sure that none
of the @code{OCS} executables are in your @code{PATH} and that the
@code{OCS} environment variable is unset. Otherwise, the installation
might produce unpredictable results. The safest option is to remove the
old OCS installation beforehand.


@c ========================================================================
@node Requirements, Quick Installation, General Information
@comment  node-name,  next,  previous,  up
@chapter Requirements
 
To install and run OCS you need the GNU @code{make} utility version 3.64
or later and an ANSI-C compiler, preferable @code{gcc}. You definitively
cannot use OCS with on older version of GNU-make than 3.64.  To find out
the version, type:

@example
    gmake --version
@end example
or
@example
    make --version
@end example

whatever is the name of GNU make on your system.

You will need around 220 MB of free disk space during installation (even
more, if you plan to install contributions). Permanently, around 60 MB is
required.

On Unix/Linux distributions the packages @code{flex} and
@code{libreadline-dev} are required. The packages @code{tcl-dev} and
@code{tk-dev} are recommended.

TODO MacOS:

@c ========================================================================
@node Quick Installation, Configuration, Requirements
@comment  node-name,  next,  previous,  up
@chapter Quick Installation

To configure and install OCS, run

@example
    ./configure 
    gmake install
@end example

This will install OCS in @file{/opt/ocs-VERSION/} path.  

It will take around 10--15 minutes on a 2.4 GHz stand-alone computer for
the complete installation.

Since the installation is somewhat time expensive, and hence
trial-and-error is less appropriate, you should consider to study the
sections below carefully before taking over.


@c ========================================================================
@node Configuration, Installation, Quick Installation
@comment  node-name,  next,  previous,  up
@chapter Configuration


@menu
* Preparing the Configuration::  
* Running the Configuration::   
* Customizing the Configuration::  
@end menu

@node Preparing the Configuration, Running the Configuration, Configuration, Configuration
@comment  node-name,  next,  previous,  up
@section Preparing the Configuration

The automatic configuration procedure will lookup the existence and
locations of several UNIX tools such as the C compiler, the @code{make}
program and so on. 
The lookup is done on the base of the environment variable @code{PATH}.
Ensure that @code{PATH} is set such that your prefered variants of the
tools will be found. 

In particular, you should ensure:

@itemize @bullet
@item
an ANSI C compiler is found in the path (such as @code{gcc}), either
under the name @code{gcc} or @code{cc}.
@item
GNU @code{make} is found, either under the name @code{gmake} or
@code{make}.
@end itemize

The default configuration will write the absolute pathes of the tools into
the configuration files. This behaviour can be controlled with the option
@code{--enable-absolute-pathes} (@pxref{Customizing the Configuration}).

It should be noted that re-configuration of OCS will be necessary if the
tools are moved to other locations, unless you have explicitely disabled
absolut pathes.  Disabling absolut pathes is not recommended on
multi-user systems, since the functionality of OCS will then depend
on personal user configurations. When using absolut pathes it is a good
idea to have the tools at standard places such as @file{/usr/local/bin}
and @file{/usr/bin}.
@sp 1

It is probably the easiest way to run the configuration procedure itself
to inspect what tools will be choosen under the current @code{PATH}, and
to re-configure if the result does not satisfy.


@node Running the Configuration, Customizing the Configuration, Preparing the Configuration, Configuration
@comment  node-name,  next,  previous,  up
@section Running the Configuration

Cd to the source directory of the distribution, and run:

@example
    ./configure --prefix=@var{install-dir} @var{feature} ... @var{feature}
@end example

where @var{install-dir} is the directory where OCS shall be installed,
and @var{feature} is described in @ref{Customizing the Configuration}.

The run of @code{./configure} will check out the capabilities of your
system.  For this purpose it will create C programs on the fly, compile
them, and occasionally run them.  For security reasons you should not
run @code{./configure} as root.

The @code{./configure} program automatically maintains a cache of the
given features and the calculated results to be used for its next
run. This may be useful to selectively enable or disable a particular
feature without examining the system again. However, its should be noted
that @code{./configure} is not capable of tracking any side-effects
induced by features or environment variables such as @code{PATH} on the
validness of the cache. To get rid of such effects, run
@example
    rm config.cache
@end example
before you rerun @code{./configure}.


@node Customizing the Configuration,  , Running the Configuration, Configuration
@comment  node-name,  next,  previous,  up
@section Customizing the Configuration

Several options may be passed to the @code{./configure} program to customize
the configuration. For each option of the form @code{--enable-@var{feature}}
an according @code{--disable-@var{feature}} option exists, which deselects
the given @var{feature}. Some Opal programs require or can benefit from
external libraries, such as GNU readline, Tcl, Tk, You can disable
the use of these libraries or give the necessary compiler flags if
@code{./configure} is unable to find them

@menu
* General options::             
* Opal Features::               
* Compiler and Linker Flags::   
* External Libraries::          
* Alpha Packages::              
@end menu

@node General options, Opal Features, Customizing the Configuration, Customizing the Configuration
@subsection General options
@table @code

@item --prefix=@var{install-dir}		
directory where OCS should be installed. Defaults to
@file{/opt/ocs-VERSION}. Since OCS installs to a non-standard directory
layout, it is recommended to install it under @file{/opt} as the default
does. Hence, setting the installation prefix to @file{/usr} might end up
in a surprise and is not recommended. Instead, the installation prefix
should end in a directory name dedicated to OCS like in
@file{$HOME/sw/ocs} or @file{/usr/local/ocs}.

@item --enable-dynamic
enable dynamic linking and support for shared libraries. Default is enabled.
The @sc{Oasys} interpreter depends on dynamic linking.

@item --enable-absolute-pathes
burn the locations of tools at installation time into the installed
OCS. This is the default.

@item --enable-doc
Install documentation. This is enabled by default.

@end table

@node Opal Features, Compiler and Linker Flags, General options, Customizing the Configuration
@subsection Opal Features

All these features are enabled by default.

@table @code
@item --enable-dosfop
install the @sc{Dosfop} documentation system
@item --enable-opalwin
install the OpalWin library. If you don't have X, or @sc{Tcl/Tk} you should
disable this feature.
@item --enable-oasys
install the @sc{Oasys} interpreter. The interpreter depends on @sc{Tcl} (not 
on @sc{Tk}), and on dynamic linking, and it benefits from the GNU readline
library.
@end table

@node Compiler and Linker Flags, External Libraries, Opal Features, Customizing the Configuration
@subsection Compiler and Linker Flags

These flags are left empty by default.

@table @code
@item --with-cflags=@var{flags}
additional flags to be passed to the C compiler on every compilation. 

@item --with-ldflags=@var{flags}
additional flags to be passed to the C compiler on every linkage.

It should be noted that flags defined by @code{--with-cflags} are not
passed automatically on linkage. If flags are common both to compilation
and linkage, provide them twice.

@item --with-libs=@var{libs}
additional libraries (@code{-l@var{lib}} and @code{-L@var{path}}) to be
used for linking.

@item --with-dldflags=@var{flags}
additional flags to be passed to the C compiler on linking a shared
(dynamic) object.  These flags will be appended to the flags given with
@code{--with-ldflags}.

@item --with-dldlibs=@var{libs}
additional libraries to be used for linking a shared (dynamic) object.
These libraries will be appended to the libs given with
@code{--with-libs}.
@end table

If the following flags are not given, @code{configure} tries to find out the 
type of the linker and sets these flags accordingly.

@table @code
@item --with-ldrpath=@var{flags}
define runtime path for linking a dynamic library.
@item --with-ldrpathlink=@var{flags}
define linktime path for linking a dynamic library.
@item --with-soname=@var{flags}
define flag to set internal SONAME field.
@item --with-ldstatic=@var{flags}
flag to mark static link targets.
@item --with-lddynamic=@var{flags}
flag to mark dynamic link targets.

@end table

@node External Libraries, Compiler and Linker Flags, Customizing the Configuration
@subsection External Libraries

Options for external libraries come in pairs, one for the linker flags and
one for location of the include flags. If either of them is unset (using the 
corresponding @code{--without} option), the library will not be used.

If the flags argument contains spaces, enclose the whole commandline
argument in quotes, e. g. @code{"--with-XXX-lib=-LPATH1 -RPATH1 -llib1"}

@table @code
@item --with-readline-lib=@var{LIBFLAGS}
@itemx --with-readline-incl=@var{INCLFLAGS}
Specify location of the GNU readline library. (Define the include path such
that @code{readline/readline.h} can be successfully included.)

@item --with-tcl-lib=@var{LIBFLAGS}
@itemx --with-tcl-incl=@var{INCLFLAGS}
Specify location of the @sc{Tcl} library.

@item --with-tk-lib=@var{LIBFLAGS}
@itemx --with-tk-incl=@var{INCLFLAGS}
Specify location of the @sc{Tk} library.
@end table

@c ========================================================================
@node Installation, Graphical Installation Tool, Configuration
@comment  node-name,  next,  previous,  up
@chapter Installation

After successful configuration, OCS is installed by running

@example
    gmake install
@end example

in the distribution directory (or @code{make}, whatever is the name of
GNU make on your system). Make sure that you have write permission in the
installation directory (i.e. @file{/opt} or the directory you
explicitly provided with a @code{--prefix} option).

This will bootstrap the Opal compiler, check
and build the library and selected features, and install everything at
the place you have specified with the @code{--prefix} option on
configuration time.

The whole process will take around 10--15 minutes on a 2.4 GHz Core2 CPU.

@c
@c To cleanup every objects derived in the boot, check and build phases
@c run:

@c @example
@c     gmake clean
@c @end example

@c To cleanup everything including the configuration files run:

@c @example
@c     gmake cleanall
@c @end example

@c ======================================================================
@node Security, Preparation Per User, Graphical Installation Tool
@chapter Security

If you want to do a system-wide installation, but do not want to run the
whole configuration and installation process as user @code{root}, you can
proceed as follows.

@enumerate
@item
Log in as @code{root}. Create an empty directory
@var{install-dir}, e. g. @file{/opt/ocs-2.4_pre1}. Make this
directory writable for the user who does the installation, and log out.
@item 
Configure and install the OCS system as described above. Set up the
prefix to @var{install-dir}, if necessary.
@item
Log in as root again, remove the write permission from
@var{install-dir}.
@end enumerate

@c ======================================================================
@node Preparation Per User, Testing the Installation, Security
@chapter Preparation Per User

You have to extend the @code{PATH} such that the ocs compiler driver is
found:

@example
    PATH="@var{install-dir}/bin:$PATH"
@end example

@node Testing the Installation, Problems, Preparation Per User
@chapter Testing the Installation

If you completed the installation successfully, you have already used the
new compiler. If you want to increase confidence in your installation, you
can run the following checks.

The first check is to invoke @code{ocs}:
@example
% ocs info
You are using `ocs-2.4_pre1 (04-Oct-2010)' 
located at `/opt/ocs-2.4_pre1'.
The project ($OCSPROJECT) is not specified.
@end example

If this test fails, you probably have not set your @code{PATH} environment
variable.

For the following tests copy the examples directory from the installation to 
your home directory (or another directory of your choice):
@example
% cp -r @var{install-path}/examples ~ 
@end example

The next check compiles a program which does not use any extra libraries:
@example
% cd ~/examples/Integrator
% ocs
% ./integral
@end example

The compiled program asks for a function and two real numbers for input.
Use e. g. @code{(SIN x)} for the function. To quit, input an empty string for 
the value @code{a} and for the function @code{f}.

If you installed the @sc{OpalWin} library, you can compile the following
example:
@example
% cd ~/examples/Graphics/Queens
% ocs
% ./queens
@end example

The program visualizes the search for the solutions of the eight-queens
problem.

Finally, call the @sc{Opal} interpreter:
@example
% cd ~/ocs/examples/Rational
% oasys
oasys version 1.1e (ocs version 2.4_pre1), (c) 1989-2001 The Opal Group
> a Rational.sign
> f Rational.sign
Rational.sign>e 6/8 + 3/5
checking Rational.sign
checking Rational.impl
compiling Rational.impl
starting evaluator process
27/20
Rational.sign>q
@end example

@c ========================================================================
@node Problems,  , Testing the Installation
@comment  node-name,  next,  previous,  up
@chapter Problems


@menu
* POSIX::                       
* Handcrafting::                
* Out of Memory::               
* Re-Configuring::              
* Cygwin support::              
@end menu

@node POSIX, Handcrafting, Problems, Problems
@comment  node-name,  next,  previous,  up
@section POSIX

A main source of problems of the installation of OCS is the UNIX Opal
library (@file{src/lib/System/Unix}). This library is implemented on the
base of POSIX, which is not supported completely by some systems.

If @code{./configure} detects incompatibilities with POSIX, a fall back
strategy is choosen, which means in the worst case that the incompatible
feature is disabled at all. However, not all incompatibilties can be
detected by @code{./configure} and fallback strategies have not been
implemented for all cases yet.

Some systems may require a specific compiler switch to enable POSIX
support which @code{./configure} fails to detect. On such systems OCS
may not compile at all, or only with a largely reduced functionality of
the UNIX library (see the @code{./configure} output).

If your C compiler and system headers propose to support POSIX, it isn't
straightforward to say whether you should enable the support or
not. Just defining @code{-D_POSIX_SOURCE} since the headers make a
distinction about it is generally unsafe, since only the prototypes but
not the libraries bound with a program are effected. 


@node Handcrafting, Out of Memory, POSIX, Problems
@comment  node-name,  next,  previous,  up
@section Handcrafting

It should never be necessary to handcraft the configuration files of the
OCS distribution, but here is what you should know in such a case.

The files @file{src/om/specs/Specs.basic} and
@file{src/om/specs/ShSpecs.basic} contain the specification of
where to find the UNIX tools and how to call the C compiler. Both files
basically contain the same information: the first one as a @code{make}
file and the second a @code{sh} file. If you want to change compiler flags
(e. g. optimization flags) or the names of the tools (e. g. if you prefer
@code{gzip} to @code{bzip2}), you must change both files, before calling
@code{gmake/make}. 

The file @file{src/lib/Internal/Compiler/unixconfig.h} describes the view of
OCS onto the UNIX host system. 


@node Re-Configuring, Problems
@section Re-Configuring

If you want to change the configuration (e. g. because @sc{Tcl/Tk} has been
installed in the meantime) the easiest way is to redo the installation
process. Use the target @code{reinstall} in the invocation of
@code{gmake/make} to indicate that you really want to overwrite an existing
installation. 

If you kept the intermediate files from the previous installation, it is
faster to invoke @code{gmake/make} with the particular targets. A complete
list of possible targets
is contained in a commentary in the toplevel Makefile, just before the
definition of @code{STDPACKAGES}.

Moving the installation to a different directory creates problems, if
shared libraries are used. You may need to set the environment variable
@code{LD_LIBRARY_PATH} such that the Opal shared libraries are found.
This is done automatically for most of the Opal tools (compiler,
interpreter), but not for the executables generated by the Opal compiler.

@contents
@bye
