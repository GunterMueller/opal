-- Copyright (c) 2011, UEBB Group
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--   * Redistributions of source code must retain the above copyright
--     notice, this list of conditions and the following disclaimer.
--   * Redistributions in binary form must reproduce the above
--     copyright notice, this list of conditions and the following
--     disclaimer in the documentation and/or other materials provided
--     with the distribution.
--   * Neither the name of the TU Berlin nor the names of its
--     contributors may be used to endorse or promote products derived
--     from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- Interface to opalimports

IMPLEMENTATION OpalImports

IMPORT Com        COMPLETELY
       ComCompose COMPLETELY
       Denotation COMPLETELY
       File       COMPLETELY
       Process    COMPLETELY
       Seq        COMPLETELY
       String     COMPLETELY
       StringConv COMPLETELY

IMPORT Config    ONLY opalimportsPath baseImports
       Stop      ONLY stop


DEF opalImports(fileName) ==
    LET cmd == opalimportsPath ++ "< " ++ fileName
    IN popen(cmd,"r")         & (\\input.
       readImports(input,<>)  & (\\imports.
       pclose(input)          ; (\\res.
       IF res okay? THEN
           yield(okay(baseImports ++ imports))
       ELSE
           stop("Import of " ++ fileName ++ "could not be read")
       FI
       )))


FUN readImports : file ** seq[denotation] -> com[seq[denotation]]
DEF readImports(input,imports) ==
    readLine(input)  ; (\\line?.
    IF okay?(line?) THEN
        readImports(input, `(data(line?)) :: imports)
    ELSE
        yield(okay(revert(imports)))
    FI
    )


-- %@ignore
-- Local Variables:
-- mode: opal
-- coding: latin-1-unix
-- End:
-- %@end ignore
