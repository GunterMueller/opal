-- Copyright (c) 2011, UEBB Group
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--   * Redistributions of source code must retain the above copyright
--     notice, this list of conditions and the following disclaimer.
--   * Redistributions in binary form must reproduce the above
--     copyright notice, this list of conditions and the following
--     disclaimer in the documentation and/or other materials provided
--     with the distribution.
--   * Neither the name of the TU Berlin nor the names of its
--     contributors may be used to endorse or promote products derived
--     from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- Auxiliary partly unreleated functions 

IMPLEMENTATION Auxiliary

IMPORT Bool       COMPLETELY
       Char       COMPLETELY
       CharConv   COMPLETELY
       Denotation COMPLETELY
       Nat        COMPLETELY
       Option     COMPLETELY
       Seq        COMPLETELY


DEF `(s,ind,sep) == `(sep#,true,s,ind,sep)

FUN ` : nat ** bool ** seq[denotation] ** nat ** denotation -> denotation
DEF `(fill,_,<>,_,_) == empty
DEF `(fill,atBegin,x::xs,ind,sep) ==
    IF fill + len > width /\ not(atBegin) THEN
        `(newline) ++ margin ++ `(ind,true,x::xs,ind,sep)
    IF fill + len > width /\ atBegin THEN
        x +\+ margin ++ `(ind,true,xs,ind,sep)
    IF fill + len <= width THEN
        x ++ sep ++ `(fill+len+sepLen,false,xs,ind,sep)
    FI
    WHERE
      len == x#
      sepLen == sep#
      margin == init(ind, blank)


DEF `(nil) == ""
DEF `(avail(d)) == d


DEF width == "80"!


DEF +\+ == +/+(newline)


DEF addSuffix(fn, sfx) ==
    IF #(fn) >= #(sfx) ANDIF slice(fn,#(fn) - #(sfx),#(fn)-1) = sfx THEN fn
    ELSE fn ++ sfx
    FI


-- %@ignore
-- Local Variables:
-- mode: opal
-- coding: latin-1-unix
-- End:
-- %@end ignore
