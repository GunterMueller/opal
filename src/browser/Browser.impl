IMPLEMENTATION Browser
-- ============================================================================
-- Autor:       ralfi
-- Projekt:     OPAL1-Compiler
-- Zweck:       Top-Level Struktur
-- Version: $Id$
-- ============================================================================

IMPORT  Com             ONLY    ans com data error fail fail? okay okay? yield
        ComCompose      ONLY    & ;
        ProcessArgs     ONLY    args
        Stream          ONLY    output stdErr stdOut writeLine
        Denotation      ONLY    ++
        InterOpal       ONLY    interOpal:SORT
        InterOpalIO     ONLY    readInterOpal
        Nat             ONLY    - 10 100 20 < = nat
        OptBrowser      ONLY    arguments command: arguments -> option
                                error? : arguments -> bool error:arguments
                                filename : arguments -> option nil v2? v3?
        Option          ONLY    avail? cont nil? option
        Pair            ONLY    1st 2nd pair
        Parser          ONLY    parseArguments
        Seq             ONLY    <> rt seq
        SeqReduce       ONLY    /
        SeqConv		ONLY    `
	String		ONLY	string
        Switch          ONLY    com com2
        Void            ONLY    nil void

DEF browser == (((writeLine(stdOut,"BROWSER 1.1 : written by Ralf Dziallas 1993") &
                parseOptions) & doCommand) & (\\SeqStr.
                writeLine(stdOut,`("", "\n", "")(\\x.x)(SeqStr))));
                exit

FUN doCommand : arguments -> com[seq[denotation]]
DEF doCommand (Args) == 
  LET   OptPair == command(Args)
  IN    IF OptPair nil? THEN yield(fail("doCommand: no commands found"))
        ELSE
          LET   Pair    == OptPair cont
          IN 
                IF (Pair 2nd)<10 THEN yield(okay(com(Pair 2nd,Args)))
                ELSE readIO(Args) & (\\IO.yield(okay(com2(IO)(Pair 2nd,Args))))
                FI
        FI

FUN readIO : arguments -> com[interOpal]
-- PRE Args # error
DEF readIO (Args) == 
  LET   OptFilename     == filename(Args)
  IN    IF OptFilename avail? THEN
          readInterOpal(false,cont(OptFilename)) & (\\OptIO.
                yield(okay(cont(OptIO))))
        IF OptFilename nil? THEN
                yield(fail("readIO: Filename error"))
        FI

FUN exit : ans[void] -> com[void]
DEF exit(Ans) ==
        IF Ans fail? THEN
                writeLine(stdOut, "BROWSER: "++ error(Ans))
        IF Ans okay? THEN
                yield(okay(nil))
        FI

FUN parseOptions : com[arguments]
DEF parseOptions ==
  args ;
  (\\a. IF a fail? THEN writeLine(stdErr,a error) & yield(okay(nil))
        IF a okay? THEN
          LET   Args    == parseArguments(rt(a data))
          IN    (IF Args error? THEN
                        yield(fail("readIO: parse error"))
                IF Args v3? THEN
                     writeLine(stdOut, `("", "@", "")(\\x.x)(a data))
                ELSE yield(okay(nil))
                FI) &
                  yield(okay(Args))
        FI)

