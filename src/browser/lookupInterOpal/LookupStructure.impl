IMPLEMENTATION LookupStructure
-- ============================================================================
-- Autor:	ralfi
-- Projekt:	OPAL1-Compiler
-- Zweck:       Library fuer Strukturzugriffe
-- Version: $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/browser/lookupInterOpal/LookupStructure.impl,v 1.2 1999-10-06 21:31:04 maeder Exp $
-- ============================================================================

IMPORT	
	Denotation	COMPLETELY
	InterOpal	COMPLETELY
/*	ONLY	< def formal? ident : name -> ident
				ident :SORT impl:SORT inst inst?
				insts interOpal local? main main? name:SORT
				none? object:SORT objs onlys origin origin?
				parameter? part pos:SORT pos : object -> seq
				struct symbol : struct -> denotation
*/
	LookupImpl	ONLY	getAppls
	LookupLib	ONLY	applDef callfrom getImport globalLocal inArea? info level name names? nil objName
	LookupObjectFct	ONLY	getInst getNameInst getObjAndPos getObjectInst
	Map		ONLY	! def? map
	MapConv		ONLY	asSeq
	Nat		ONLY	- 100 20 nat
	OptBrowser	ONLY	allpos? arguments v3?
	Option		ONLY	avail nil option
	Pair		ONLY	& 1st 2nd pair
	Seq		ONLY	:: <> <>? seq
	SeqFilter	ONLY	|
	SeqReduce	ONLY	/
	SeqMap		ONLY	*
	
FUN getAllImportedNames : interOpal ** arguments -> origin ** level ->
				seq[pair[info,seq[info]]]
-- fuer alle Instanzen einer Struktur
DEF getAllImportedNames(IO AS interOpal(_,Structs),Args)(Orig,Level) ==
  LET	Struct	== Structs!Orig
	IMap	== Struct insts
	SeqInst	== asSeq(IMap)
	FInsts?	== (\\Pair.(Pair 1st)inst?)|SeqInst
	FInst2	== (\\Pair.paramsSortOrMainParam?(IO)(Pair 2nd))|FInsts?
	FInsts	== IF FInst2 <>? THEN 1st*SeqInst -- -> only none or insts
		   ELSE 1st*FInst2 FI
  IN	(\\Inst.getAllImportedInstNames(IO,Args)(Orig,Inst,Level))*(FInsts)

	FUN paramsSortOrMainParam? : interOpal -> seq[name] -> bool 
	DEF paramsSortOrMainParam?(IO AS interOpal(_,S))(SeqName) ==
	/((\\N,B.IF (IF (N origin)main? THEN false
		     OTHERWISE
 		     IF (N origin)origin? THEN
		       IF((((S!(N origin))objs)!(N ident))def)parameter? THEN
					 true
		       OTHERWISE
		       IF (N inst)none? THEN false
		       IF (N inst)inst? THEN
			   ~(paramsSortOrMainParam?(IO)
					(((S!(N origin))insts)!(N inst)))
		       OTHERWISE
		       IF (N inst)formal? THEN true
		       FI
		     ELSE
			false
		     FI)
		 THEN false 
		 ELSE B FI),true)(SeqName)


FUN getAllImportedInstNames : interOpal ** arguments ->
		origin ** inst ** level -> pair[info,seq[info]]
-- fuer eine Instanz einer Struktur
DEF getAllImportedInstNames(IO AS interOpal(_,Structs),Args)
						(Orig,Inst,Level) ==
  LET	Struct		== Structs!Orig
	OMap		== Struct onlys
	StructName	== (Struct symbol)!
	InstStructName	== IF Level names? THEN
				info(<>,StructName,"","","",nil,nil)
			   ELSE info(<>,StructName,"",InstName,"",nil,nil) FI
	InstName	== getInst(IO,Args)(Inst,Orig)(Level,nil)
	SeqImpNames	== IF Inst def? OMap THEN OMap!Inst
			   ELSE <> FI
	OptInst		== IF Inst none? THEN nil
			   IF Inst inst? THEN avail(&(Inst,Orig))
			   IF Inst formal? THEN nil
			   FI
	SeqInfoImpNames	== /((\\Name,SeqInfo.getNameInst(IO,Args)
				(Name,Level,getImport)(OptInst) :: SeqInfo),<>)
								(SeqImpNames)
  IN	&(InstStructName,SeqInfoImpNames)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- Suche in Importlisten
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

FUN listAllObjects : interOpal ** arguments ->  origin ** level ->
						pair[info,seq[info]]
-- origin points to a structure
DEF listAllObjects(IO AS interOpal(_,Structs),Args)(Orig,Level) ==
  LET	Struct		== Structs!Orig
	MapObjs		== Struct objs
	StructInfo	== name((Struct symbol)!)
	SeqObjs		== 2nd*(asSeq(MapObjs))
	Opt		== nil
  IN &(StructInfo,
	/((\\Obj,Seq.getObjAndPos(IO,Args)(Obj,Level)(Opt)::Seq),<>)(SeqObjs))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- Suche in Definitionen
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

FUN listAllApplicationsAndLocalsPerDef
			: interOpal ** arguments -> level -> seq[seq[info]]
DEF listAllApplicationsAndLocalsPerDef
			(IO AS interOpal(_,Structs),Args)(Level) ==
  LET	MapObjs	== (Structs!main) objs
  IN /((\\Obj,Seq.
	  LET	SeqObj	==
		  	IF Args allpos? THEN ObjStr::SeqAppl
			OTHERWISE
			IF inArea?(Args)(Obj pos) THEN
			     ObjStr::SeqAppl
			ELSE SeqAppl
			FI
		SeqAppl	== getAppls(IO,Args)(Obj def,Level)
		ObjStr	== getObjectInst(IO,Args)(Obj,Level)(OInst)
		OInst	== nil -- ########################################
	  IN	IF SeqObj <>? THEN Seq -- verhindert Leerzeilen
		ELSE SeqObj::Seq
		FI),<>)(2nd*(asSeq(MapObjs)))


