#!/bin/sh
# generate a shared library from a set of OCS systems
# .sign.inter files are used to derminate the structures.
# lib<system>.a is used to get the objects.
#
# expects OCSOM to be set
#
# $Id$


. $OCSOM/specs/ShSpecs.basic

tsosuffix="tso"


## analyze arguments 

symlink="no"
vers="2.3.14"
deps=""

while [ $# -ge 2 ]
do
  if [ $1 = "-h" ]
  then
     symlink="yes"
  elif [ $1 = "-v" ]
  then
     shift
     vers="$1"
  elif [ $1 = "-d" ]
  then
     shift
     deps="$deps $1"
  else
     srcsystems="$srcsystems $1"
  fi
  shift
done

destsystem="$1"

if [ -z "$destsystem" ] || [ -z "$srcsystems" ]
then
  $ECHO "usage: genshlib [ -h ] <srcsyspath> ... <destsyspath>"
  exit 1
fi


destname="`$BASENAME $destsystem`"

tmpdir="/tmp/genshlib_$$"

$RM -rf $tmpdir
mkdir $tmpdir 

## set trap handler
trap '$RM -rf $tmpdir; exit 0' INT QUIT TERM

if [ ! -d "$destsystem" ] 
then
  mkdir $destsystem
fi
$RM -f $destsystem/lib${destname}.$tsosuffix

for sys in $srcsystems 
do
  $ECHO "... incorporating subsystem $sys"
  srcname="`$BASENAME $sys`"
  hcsys="$sys"
  if [ -d "$sys/OCS" ]
  then
     sys="$sys/OCS"
  else
     sys="$sys"
  fi
  if [ -d "$PWD/$sys" ]
  then
    sys="$PWD/$sys"
  fi
  ( cd $tmpdir; $AR x $sys/lib${srcname}.a; $RM -f __*SYMDEF* )
  structs="`( cd $sys; $LS *.sign.inter | $SED -e 's@\([^ ][^ ]*\)\.sign.inter@\1@' \
			   -e 's@BOOL@@' \
			   -e 's@DENOTATION@@' \
			   -e 's@ABORT@@' \
			   )`"
  if [ -z "$structs" ]
  then
    $ECHO "warning: no structures located in $sys"
  fi

  for s in $structs
  do
    if [ ! "$sys/$s.sign.inter" = "$destsystem/$s.sign.inter" ]
    then
      $RM -f $destsystem/$s.sign.inter 
      if [ $symlink = "yes" ]
      then
        ln -s $sys/$s.sign.inter $destsystem
	if [ -f $sys/$s.opt ]
	then
	  ln -s $sys/$s.opt $destsystem
	fi
	if [ -f $sys/$s.oc.h ]
	then
	  ln -s $sys/$s.oc.h $destsystem
	fi
	if [ -f $sys/$s.hc.h ]
	then
	  ln -s $sys/$s.hc.h $destsystem
	elif [ -f $hcsys/$s.hc.h ]
	then
	  ln -s $hcsys/$s.hc.h $destsystem
	fi
      else
        cp -f $sys/$s.sign.inter $destsystem
	if [ -f $sys/$s.opt ]
	then
	  cp -f $sys/$s.opt $destsystem
	fi
	if [ -f $sys/$s.oc.h ]
	then
	  cp -f $sys/$s.oc.h $destsystem
	fi
	if [ -f $sys/$s.hc.h ]
	then
	  cp -f $sys/$s.hc.h $destsystem
	elif [ -f $hcsys/$s.hc.h ]
	then
	  cp -f $hcsys/$s.hc.h $destsystem
	fi
      fi
    fi
    $ECHO "$s lib${destname}.so.$vers" >> $destsystem/lib${destname}.$tsosuffix
  done
done

mkdir $OCS/lib/$OSARCH 2>/dev/null || true

$ECHO "... generating archive $OCS/lib/$OSARCH/lib${destname}.a"
(cd $OCS/lib/$OSARCH 1>/dev/null
 rm -f lib${destname}.a
 $ARQ lib${destname}.a $tmpdir/*
 $RANLIB lib${destname}.a
)




# Make up name of shared library.
if test x$SOVERSIONFIRST = xyes; then
    sofilename=lib${destname}.$vers.$SOSUFFIX
else
    sofilename=lib${destname}.$SOSUFFIX.$vers
fi

$ECHO "... generating shared object $OCS/lib/$OSARCH/$sofilename"

# Argument for shared library name necessary?
if test x$LDSONAME = x; then
    sonamearg=""
else
    sonamearg="$LDSONAME$sofilename"
fi

# echo "$DLD -o $OCS/lib/$OSARCH/$sofilename $sonamearg $tmpdir/* $deps $LIBOS"
$DLD -o $OCS/lib/$OSARCH/$sofilename $sonamearg $tmpdir/* $deps $LIBOS || exit 1


$ECHO "... generating symbolic links"
(cd $destsystem 1>/dev/null
 rm -f lib${destname}.a
 rm -f lib${destname}.$SOSUFFIX
 ln -s ../${OSARCH}/lib${destname}.a .
 ln -s ../${OSARCH}/$sofilename lib${destname}.$SOSUFFIX
)

 

$RM -rf $tmpdir
exit 0

