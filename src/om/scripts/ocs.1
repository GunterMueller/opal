.TH "ocs" 1
.SH NAME
ocs \(em command-line oriented driver for the Opal Compilation System
.SH SYNOPSIS
.B ocs 
[
.B \-top
.I structure
.I command
.ti 1.4i
|
.B \-sub
.I name
.I structure{,structure}
]
.ti 0.9i
{ 
.I option
} 
.ti 0.9i
[
.I target
]

.SH DESCRIPTION 

\fBocs\fP is a command-line oriented driver for the Opal Compilation
System. It is used to compile and maintain Opal software systems.

\fItarget\fP instructs \fBocs\fP as to what shall be done; it can be augmented
by \fIoption\fPs specifying how it shall be done. If \fItarget\fP
is omitted, the default action is to build the system in the current
directory.  If the system is not specified by the \fB-top\fP or
\fB-sub\fP option on the command line, the system description is
retrieved from a file named \fISysDefs\fP in the current directory.

\fBocs\fP always tries to build its target using the minimum number of
steps. Thus, if \fBocs\fP is called with the same arguments again, nothing
will be executed. Only if options change, or if sources constituting a
system are modified, will subsequent calls to \fBocs\fP rebuild (parts of)
a system.

\fBocs\fP can actually be used to manage software projects consisting
of arbitrary documents and sources since it is based on GNU make.

.SH PROJECT TREES AND SYSTEMS

A \fIproject tree\fP under \fBocs\fP is a directory tree of the file
system.  Each node in this tree describes a \fIsystem\fP. There are
currently 4 kinds of systems:
.TP
.I Opal top-level systems
consist of at least one top-level structure which exports a top-level
command. All structures located in the system's node which are in the
import relation of the top-level structure are also incorporated.
.TP
.I Opal subsystems
consist of a possibly unrelated collection of Opal structures which
constitutes a software library.  This collection is enriched by all
imported structures located in the subsystem's node.
.TP
.I Opal subsystems with handcoding
This is a specialization of the above, and additionally supports
hand-coded structures, i.e. Opal structures partially or totally
implemented in C.
.TP
.I miscellaneous systems
In the simplest case, a miscellaneous system is just used for
bracketing other nodes in the project tree. However, it can actually
be an arbitrary collection of documents, in which case you might want
to define your own basic GNU-make maintenance rules. See
DEFINING YOUR OWN KIND OF SYSTEM.
.TI

.SH SPECIFYING SYSTEMS FROM THE COMMAND LINE

The straightforward use of \fBocs\fP is to specify an Opal top-level
or subsystem from the command line:
.TP
.BI -top " structure command"
specifies an Opal top-level system in the current directory, where
\fIstructure\fP gives the top-level structure, and \fIcommand\fP the
top-level command.
.TP
.BI -sub " system structure{,structure}"
specifies an Opal subsystem in the current directory, where \fIsystem\fP
must be the basename of the directory node, and \fIstructures\fP are
incorporated (at least) into the subsystem.
.TI
.LP
The following options control how a system specified on the command-line
shall be compiled:
.TP
.BR -v\fR[ level\fR]
verbose level, see \fBoc\fP(1).
.TP
.BR -w\fR[ level\fR]
warning level, see \fBoc\fP(1).
.TP
.BR -o\fR[ kind\fR]
optimization option, see \fBoc\fP(1). We recommend the use of the switch
\fBopt=\fP\fIconfig\fP instead of this option (see below).
.TP
.BR -d\fR[ kind\fR]
debugging option, see \fBoc\fP(1). We recommend the use of the switch
\fBdebug=\fP\fIconfig\fP instead of this option (see below).
.TP
.BR -prop
activate the property language. Each structure is then constituted by
the four parts: signature, external properties, implementation and
internal properties. Empty property parts are created automatically if
needed.
.TP
.BR -keep
keep the analyzed intermediate applicative code generated by the Opal
compiler's frontend and the C sources generated by the Opal compiler's
backend. Normally, compilation from implementation to object files is
performed in one step, and these intermediate files are deleted.
.TP
.BI -s\fR[ \fRmode \fR] " nodepath"
base the specified system on the subsystem located at \fInodepath\fP.  This
option can be repeated. Imported structures in the import relation of the
system are first looked up in the current node, then in the systems
specified by \fB-s\fP options in the order they appear on the command line,
and finally in the Opal standard library. Note that for top-level systems
even subsystems providing invisibly imported structures must be specified
with a \fB-s\fP option so the linker can find them. \fB-s\fP without
\fImode\fP is equivalent to \fB-sdh\fP. \fImode\fP controls the type of
subsystem and is a combination of:
.RS
.TP
.B f
The subsystem is frozen. Structures belonging to it are not considered
in recompilation checks. It is assumed that a structure is provided
by a frozen subsystem if its derived signature export file is present.
.TP
.B d
The subsystem is in development. Structures belonging to it are
considered in recompilation checks. It is assumed that a structure is
provided by a subsystem in development if its signature file is present.
.TP
.B p
The subsystem contains property parts which shall be considered in
recompilation checks of properties in the current system. This option only
makes sense if the subsystem under \fInodepath\fP is compiled with the
\fB-prop\fP option.
.TP
.B h
The derived objects of the subsystem are hidden in a subdirectory 
\fInodepath\fP/OCS.

.RE
Note that these options, when specified from the command line, only take
effect together with a \fB-top\fP or \fB-sub\fP switch. However, the same
options can be assigned to the variables \fBGENOPTIONS\fP and
\fBGENSUBSYS\fP in a system description file (see below).

.SH SPECIFYING SYSTEMS WITH A DESCRIPTION FILE

The options \fB-top\fP and \fB-sub\fP trigger nothing more then the
automatic generation of a trivial system description file named
.BI SysDefs. "structure-command"
or  
.BI SysDefs. "system" .
You can rename this file \fBSysDefs\fP
and edit it by hand.  You can also create a symbolic link \fBSysDefs\fP ->
.BI SysDefs. "structure-command" ,
in which case the call 
.BI "ocs -top" " structure command " ...
updates the system description and repeated calls without a system
specification on the command line use the latest updates.

In the following, the basic variables of a system description file are
given, where each variable is marked with the system kind it is used
for and as required or optional.
.TP
.BR SYSKIND  "   (all) (optional)"
specifies the system kind (one of \fBtop\fP, \fBsub\fP, \fBsubhc\fP
or \fBmisc\fP). Defaults to \fBtop\fP.
.TP
.BR NODENAME "   (all) (optional)"
defines the name of the system. For Opal top-level systems, this can
be the name of the top-level command. For Opal subsystems, this must
be the basename of the nodepath. For miscellaneous systems, it can be
any reasonable name. If not given, this variable defaults to 
.BR opalnode .
.TP
.BR SUBNODES "   (all) (optional)"
defines the direct subdnodes of this node. If you create a bracketing
node from the 
.B SysDefs.misc.tmpl
template, you usually have to define only this variable and the
variable
.BR NODENAME .
.TP
.BR TOPSTRUCT "   (top) (required)"
defines the name of the top-level structure.
.TP
.BR TOPCOM "   (top) (required)"
defines the name of the top-level command.
.TP
.BR STRUCTS "   (sub) (required)"
defines the structures incorporated in an Opal subsystem.
.TP
.BR NORMSTRUCTS "   (subhc) (required)"
defines the structures in a subsystem with hand-coding which are
completely implemented in Opal.
.TP
.BR FOREIGNSTRUCTS "   (subhc) (required)"
defines the structures in a subsystem with hand-coding which are
partially implemented in Opal.
.TP
.BR OPAL_LIBS "  (all) (optional)"
defines the standard Opal libraries to be referenced by
this system. The value of this variable is usually set up
by referencing predefined variables which denote standard library packages
of the installation. For example, setting 
.BR "OPAL_LIBS = ${OPAL_WIN} ${OPAL_BASE}"
specifies the inclusion of
the window as well as the Opal basic library. The set of packages
available depends on the installation (normally 
.BR "OPAL_WIN OPAL_READLINE OPAL_TCL OPAL_TK OPAL_BASE" ")."
.TP
.BR GENOPTIONS "   (top/sub/subhc) (optional)"
defines the options used for generating the building rules for this
system. All options described in SPECIFYING SYSTEMS FROM THE COMMAND
LINE can be assigned to this variable, except the \fB-s\fP option.
.TP
.BR GENSUBSYS "   (top/sub/subhc) (optional)"
defines the subsystems this system is based on by a sequence of
\fB-s\fP options. The variable application 
.B "$(GENSTDSYS)"
should be put at the end of this sequence; it refers to the Opal
standard libraries as given by \fBOPAL_LIBS\fP. 

.SH TARGETS AND FURTHER OPTIONS

Many of the targets of \fBocs\fP recur over the nodes of a project
tree: the action specified by the target is applied either depth-first or
top-down to each node in the tree, choosing the directory
where \fBocs\fP is invoked as a root.
.TP
.BR all "   (recursive)"
build systems in subnodes and then the current system. This is the
default target.
.TP
.BR check "   (recursive)"
check property parts of structures. Property parts are not considered
by the \fBall\fP target. This option only makes sense if the property
language is activated (see \fB-prop\fP).
.TP
.B clean
remove all intermediate compilation products. 
.TP
.BR cleanall "   (recursive)"
perform 
.B clean 
in current system as well as on all subnodes.
.TP
.B gen
force generating rules for building the current system. Rules are
automatically (re-)generated if the system specification has been
changed or if the import relation of Opal structures changes.
.TP
.BR genall "   (recursive)"
perform \fBgen\fP in current system as well as on all subnodes.
.TP
.B help
short description of options and targets.
.TP
.B info
give information about the Opal Compilation System used.
.TP
.B install
install system at places defined by variables from
.B SysDefs
file.
.TP
.BR pack "   (recursive)"
pack systems components in a compressed \fBtar\fP(1) file.
.TP
.B sendbug
start interactive procedure to send a bug-report.
.TP
.B xhelp
extended description of options and targets.
.TP
.BI -force " structure" .{sign,impl,c}
forces the recompilation of the signature, implementation, or C code
of the structure.
.TI

.SH SWITCHES AND PROJECT DEFINITIONS

Switches are used to choose between predefined optimization, debugging
and other configurations. The default setting of switches and to some
extent also the meaning of the switches is defined by a so-called
project definition file. The name of a project definition file is
retrieved from the environment variable
\fBOCSPROJECT\fP;
if this variable is not set, default project definitions are assumed.
.TP
.BI debug= config
choose debugging configuration, where \fBconfig\fP is one of:
.RS 
.TP
.B no
no debugging
.TP
.B opal
generate code for debugging Opal sources with the GNU debugger
\fBgdb\fP(1).  This is a prerequisite for use of the \fBdebug\fP(1) or
\fBbtrace\fP(1) utilities bundled with OCS.
.TP
.B c
generate code for debugging on the level of the generated C sources
with \fBgdb\fP.
.RE
.TP
.BI opt= config
choose optimization configuration, where \fBconfig\fP is one of:
.RS 
.TP
.B no
no optimization
.TP
.B modest
some rather modest optimizations
.TP 
.B medium
medium optimizations which do not introduce recompilation
dependencies between structure implementations.
.TP
.B full
full optimizations which do introduce recompilation dependencies
between structure implementations.
.RE
.TP
.BI profile= config
choose profiling configuration, where 
.I config
is one of:
.RS
.TP
.B no
no profiling
.TP
.B gprof
profiling on C code level, using the \fB-gp\fP option. This feature
is, however, rather cumbersome to use. In the files generated by
\fBgprof\fP(1), you will find numbered symbols of C functions. In
order to relate them with the original Opal symbols, use the option
\fB-keep\fP to save the C sources and search them for the declarations
of the numbered functions. There you will find a comment which denotes
the original symbol.
.RE
.TP
.BI ocs= config
choose Opal compiler configuration. 
.I config
is one of:
.RS
.TP
.B stdocs
use the standard configuration
.TP
.B expocs
use an experimental configuration with other libraries, binaries, etc.
The definition of this configuration is usually given in the project
definition file.
.RE
.TP
.IB var = value
overwrite any make variable. You should know what you are doing before
you use this switch.
.TI

.SH SUBSYSTEMS WITH HAND-CODING
See the manual "Handcoder’s Guide to OCS Version 2",
written by Wolfgang Grieskamp and Mario Suedholt.

.SH TIPS
Another way to remove your intermediate compilation products
is, instead of calling  
.B ocs 
with the 
.B clean 
target, to delete your
.I OCS  
subdirectory.

Deleting your 
.B OCS/\fIOCSDefs-SysDefs\fP
file is also quicker than calling 
.B ocs
with the 
.B gen
target for generating the rules for building the current system anew. 
Then you can call
.B ocs
to compile your system.


.SH FILES
.TP 
.B ./SysDefs    
system definition file
.TP
.BI ./OCS/OcsDefs-SysDefs.{ structure-command , system}
generated building rules of \fBocs\fP
.TP
.BI ./OCS/ structure ".{sign,impl,extp,intp}.deps"
import dependency files
.TP
.BI ./OCS/ structure .o
object files generated by the C Compiler
.TP
.BI ./OCS/lib system .*
library of subsystem

.SH DIAGNOSTICS
The diagnostics come from GNU 
.BR make (1) 

.SH BUGS
Although the change of debugging or optimization levels outdates
intermediate compilation products, this is not recognized by
\fBocs\fP.

This is particularly evident when you change from a lower
optimization level to a higher one using the switch
.BR opt=full ,
since this optimization level introduces recompilation dependencies
which are not yet reflected in the building rules. In such cases, the
target
.B gen
should be used to enforce the new generation of building rules.

In any case, one should not trust \fBocs\fP to strictly guarantee the
consistency of the compilation products. One of \fBoc\fP's known bugs is
that it does not detect inconsistency in intermediate files, so there is no
support from this end. If in doubt, one should use the target \fBclean\fP
or \fBcleanall\fP and then rebuild the project from the beginning; this
always eliminates consistency problems.

.SH AUTHORS
The \fBocs\fP driver and the make files were
designed and implemented by Wolfgang Grieskamp. Many valuable
suggestions came from the members of the Opal group, in particular
from Andreas Fett, and from the Opal user community. Several concepts and
technical tricks were borrowed from the shape release management
system RMS, bundled with the shape toolkit.
.LP
The Opal Group may be contacted at:
Technische Universitaet Berlin,
Fakultaet IV - Elektrotechnik und Informatik,
Institut fuer Softwaretechnik und Theoretische Informatik,
Fachgebiet Uebersetzerbau und Programmiersprachen,
Sekretariat TEL12-2,
Ernst-Reuter-Platz 7,
D-10587 Berlin,
Email: opal-users@projects.uebb.tu-berlin.de,
WWW: http://projcts.uebb.tu-berlin.de/opal/
