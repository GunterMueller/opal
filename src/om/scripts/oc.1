'\" t
.TH OC 1

.\ LAST EDIT: Mon Feb 14 14:02:47 1994 by dkd@cs.tu-berlin.de bolero
.\ Version:     oc.1[1.3] accessed Mon Feb 14 14:07:46 1994
.\ Bytes:       15441
.\ .\ Log for /home/uebb/wg/ocs/trans/ocs/src/om/scripts/oc.1[1.3]:
.\   
.\ [1.1] Sat Nov 20 14:41:33 1993 wg@cs.tu-berlin.de accessed
.\   [Sat Nov 20 14:38:19 1993] Intention for change:
.\   --- no intent expressed ---
.\   Corrected -zetaEnrich to -zetaEnrichment
.\ [1.2] Tue Nov 23 12:51:45 1993 maeder@cs.tu-berlin.de proposed
.\   [Tue Nov 23 12:22:00 1993] Intention for change:
.\   Optionen -zunderline und -E korrigieren
.\ [1.3] Mon Feb 14 14:07:46 1994 dkd@cs.tu-berlin.de accessed
.\   [Fri Feb 11 15:29:54 1994] Intention for change:
.\   Added some zOptions


.SH NAME
oc, oc1, oc2 \- Opal compiler
.SH SYNOPSIS
.B oc{1,2}
[
.B \-s
|
.B \-i
|
.B \-E
|
.B \-I
]
[
.BR \-v [\c
.IR level ]
]
[
.BR \-w [\c
.IR level ]
]
.ti +.5i
[
.BR \-o [\c
.IR kind ]
]
[
.BR \-d [\c
.IR kind ]
]
[
.BI \-t n
]
[
.BI \-z option
] \&.\|.\|.
.ti +.5i
[
.BI \-h dir
|
.BI \-e dir
]
[
.B \-r
|
.B \-b
]
.I structure
\&.\|.\|.
.SH DESCRIPTION
.LP
The Opal compiler
.B oc
is made up of a 
.IR frontend
.B oc1(1)
and a 
.IR backend
.B oc2(1)
that produces C code. The C Code must be further
translated by a C compiler.
It is not intended to execute
.B oc1 
or
.B oc2
directly, but to use the
Opal compilation system driver
.BR ocs(1)
based in GNU
.BR make(1) 
.LP
.B oc1
translates a signature part of an Opal structure to a signature export
file, or an implementation part of an Opal structure to 
intermediate applicative code.
.B oc2 
optimizes the applicative code and translates it into a C file.
.LP
Both 
.B oc1
and
.B oc2 
accept the same command line options, though some options are ignored
by one end of the Opal compiler. All structures involved in a
compilation must be given on the command line.  The
.B source structure
is the first structure;
all imported structures must follow. 
.LP
Unless a
.BI \-h dir
or
.BI \-e dir
(directory) option precedes a
structure, the structure's
files are located in the current working directory, which is assumed to
be a 
.I hidden 
Opal directory. In a
.I hidden
Opal directory, compilation products (export files, object code, 
as well as diagnostic files)
are located in a special subdirectory named OCS, whereas in an
.I expanded
(or visible) Opal directory,
all compilation products are located in the directory itself.
.SH OPTIONS
.TP
.B \-s
Compile SIGNATURE part of the source structure.
.TP
.B \-i
Compile IMPLEMENTATION part of the source structure.
This is the default.
.TP
.B \-E
Compile EXTERNAL PROPERTIES part of the source structure. 
This is only legal if the Opal property language is activated with the
.B -zprop
option (see below).
.TP
.B \-I
Compile INTERNAL PROPERTIES part of the source structure. 
This is only legal with the 
.B -zprop 
option set (see below).
.TP
.BI \-h dir
The derived files of the following structures are located in the 
directory
.IR dir /OCS.
This option can be repeated.
.TP
.BI \-e dir
The derived files of the following structures are located in the
directory
.IR dir .
This option can be repeated.
.TP
.B \-r
The following structures are taken to be
.IR released ,
i.e., the implementation parts and their compilation products may be used
for optimization purposes in the translation of the source structure.
This option can be repeated.
.TP
.B \-b
The following structures are taken to be
.IR busy ,
i.e., the implementation parts and their compilation products may not be used.
This is the default.
This option can be repeated.
./----------- -v
.TP
.BI \-v\fR[ level\fR]
Verbose compilation. The default is
.BR \-v0 ;
.B \-v
with the
.I level
omitted is equivalent to
.BR \-v1 .
.I level
is one of:
.RS
.TP
.B 0
Quiet compilation.
.TP
.B 1
Display the compilation phases.
.TP
.B 2
Display the compilation phases and their subphases.
.TP
.B 3
Display even minor compilation steps.
.RE
./------------ -w
.TP
.BI \-w\fR[ level\fR]
Display warnings. The default is
.BR \-w1 ;
.B \-w
with the
.I level
omitted is equivalent to
.BR \-w2 .
.I level
is one of:
.RS
.TP
.B 0
Do not generate warnings. Only errors are displayed.
.TP
.B 1
Display warnings, e.g., a duplicate pattern. 
.TP
.B 2
Like
.BR \-w1 ,
but additionally display hints,
e.g., missing patterns.
.RE
./ ---------- -o
.TP
.BI \-o\fR[ kind\fR]
Controls code optimization. The default is no optimization;
.B -o
with the kind omitted is equivalent to
.BR -o1 .
.I kind
is a combination of:
.RS
.TP
.B 1
This is an alias for the combination
.BR esucm .
.TP
.B 2
This is an alias for the combination
.BR 1pgT .
.TP
.B e
Perform common subexpression 
.IR elimination .
.TP
.B s
Perform 
.I simplification 
of expressions by exploiting the axiomatic
semantics of the functional core.
.TP
.B u
Perform 
.I unfolding 
of function definitions and of local equations. This option allows the
Opal compiler to code functions and equations in a
.IR non-strict
fashion. The resulting program is only robustly correct, i.e.
satisfies the semantics only for terminating programs.
.TP
.B c
Perform optimization of 
.I constant 
expressions. The resulting program
evaluates each detectable constant expression not more then once. Note
that the memory allocated by the object resulting from this
evaluation can never be retrieved.
.TP
.B m
Perform optimization of 
.I memory 
allocation and garbage collection. The
resulting program realizes direct reusage of memory cells and
selective update of single-threaded data objects.
.TP
.B p
This option allows the Opal compiler to treat runtime errors of 
.I partial
functions as a "no-case", which allows some subtle optimizations. It
results only in robustly correct code.
.TP
.B g
This option enables the use and generation of the optimization export
files for 
.I global
inter-structure optimizations (if they are released, see the
.B -r
option). Function definitions and properties are
made available across structures boundaries. The use of this option
enforces recompilation dependencies between structure implementations.
.TP
.B T
This option generally allows the Opal compiler to perform some
optimizations which might be expensive with respect to compilation 
.IR time .
.TP
.B S
This option generally allows the Opal compiler to perform
optimizations which might be speculative by with respect to the code 
.I size 
(but not to the code speed).
.RE
./--------- d
.TP
.BI \-d\fR[ kind\fR]
Controls generation of code for debugging. The default is to generate
no code for debugging; 
.B \-d
with the
.I kind
omitted is equivalent to
.BR \-dd .
.I kind
is a combination of:
.RS
.TP
.B d
Generate information for use in an object code debugger.
.TP
.B T
Generate code for tracing all function entries and exits. Depending
on the optimization level, not all function calls are considered.
.TP
.B t
Generate code for tracing all entries and exits of exported functions.
Depending on the optimization level, auxiliary functions may be implicitely
exported.
.RE
.TP
.BI \-t n
Locate intermediate files and the generated C file in
.BR /tmp .
.I n
has to be a unique number to distinguish intermediate files from different
compilation processes, usually a process number. If this option is used,
intermediate files are removed; otherwise they are preserved for
recompilation purposes.
.TP
.BI \-z option
.I option
is taken as special compiler option; it can be an arbitrary text. This
option can be repeated.  Several z options have recently been added to
support language extensions. The current release enforces the
setting of the following set of z options to support the official Opal
.I implementation
language. 
.RS
.TP 
.B etaEnrichment
Enriches function definitions with missing (curried) arguments, i.e. DEF f
== succ is treated as DEF f(N) == succ(N).
.TP
.B underline
Allows alphanumerical and graphical Opal names to be combined into a single
name using an underline character, i.e. aa_.. or aa_bb.
.TP
.B wildcard
On left-hand sides one or more unused variables can be denoted by a single
underline, i.e LET (a,_,_) == ... . Note, however, that a single underline is no
longer a valid Opal name.
.TP
.B section 
In an expression on the right-hand side a single underline in place of an
argument causes the expression to be (lambda) abstracted over that argument,
i.e. (_ +b) stands for (\\\\N.N +b). 
.TP
.B seqGuards
Within IF conditions the newly introduced keywords ANDIF and ORIF are
boolean operators which will sequentially evaluate their arguments.
.TP
.B infix
This supports a sequence of unbracketed expressions (multiple infix), if and
only if the types of all expressions determine a unique bracketing, i.e.
a::b::c::d::S becomes a::(b::(c::(d::S))). 
.TP
.B rassoc
In conjunction with 
.B -zinfix
a sequence of expressions with the same infix
operator is taken to be right associative, i.e. 1+2+3+4 is 1+(2+(3+4)).
Note that this is not always what you want, because (3-(2-1)) is not ((3-2)-1).
Note also that 1-2+3, for example, will not be resolved, because - and + are
different operators.
.LP
The following z options may be useful in experimental settings. 
.TP
.B interOpal
Generates an intermediate representation of the analyzed Opal
structure for use of other Opal development tools.
.TP
.B prop
This switches on the Opal 
.I property
language, which allows one to write down algebraic properties of Opal
objects.
.TP
.B onlyParse
Parses only the source structure and generates the abstract syntax.
.TP
.B doNotParse
Compiles the source structure, but reads the previously generated 
abstract syntax. 
.LP
The following z options support the hand-coding of Opal structures in
C.
.TP
.B gForeignInterface
Generate a C header file of the compiled structure which declares
symbolic names for the implemented functions.
.TP
.B gForeignTemplate
Generate files 
.IB structure .h.tmpl
and
.IB structure .c.tmpl
where the header file declares symbolic names as
with
.BR -zgForeignInterface ,
while the C file contains a template which can be used for further
C handcoding.
.LP
There are many other z options which allow special compiler outputs and/or 
different compilation alternatives.
These are further documented in 
.IR "Special Options of the Opal Compiler" .
.RE

.SH FILES
.PD 0
.TP 20
.IB structure .sign
signature part of
.I structure
.TP
.IB structure .impl
implementation part of
.I structure
.TP
.IB structure .extp
external properties part of
.I structure
.TP
.IB structure .intp
internal properties part of
.I structure
.TP
.IB structure .x.diag
diagnostic file containing all errors, warnings and hints generated
during the compilation of
.IR structure , 
where 
.B x
stands for one of 
.BR sign , 
.BR impl , 
.BR extp 
or
.BR intp .
.TP
.IB structure .deps
dependency file for the compilation products of
.IR structure .
It contains recompilation information and a list of files used during
compilation.
.TP
.IB structure .absy
contains the abstract syntax created with the \fIz\fP option \fBonlyParse\fP
of
.IR structure .
.TP
.IB structure .exp
signature export file for
.I structure
.TP
.IB structure .impl.exp
implementation export file of
.I structure 
to be used within internal properties
.TP
.IB structure .extp.exp
external properties export file of
.I structure
to be used by other property parts
.TP
.IB  structure .ana
intermediate file for analyzed implementation part of
.I structure
containing the applicative code.
.TP
.IB structure .opt
implementation export file of
.I structure
to be used for global optimization
.TP
.IB  structure .h
include file for
.I structure
.TP
.IB structure .c
C file for
.I structure
./ .TP
./ .IB structure .o
./ object code of
./ .I structure
./ generated by a C compiler
.PD

.SH SEE ALSO
.BR ocs(1) ,
.LP
.IR "A User's Guide to the Opal Compilation System (Version 2)" .
.LP
P. Pepper (ed.),
.IR "The Programming Language Opal - 5th corrected edition" , 
Technical University of Berlin, FB 13.
.LP
.IR "The Opal Tutorial"
.LP
.IR "Bibliotheca Opalica Reference" .
.LP 
.IR "Handcoder's Guide to OCS Version 2" 
.SH DIAGNOSTICS
.B oc
returns an exit status of
.B 0
if the compilation has been successful; it returns an exit status of
.B 1
if errors were found in the compiled structure part;
if command line options are wrong or errors occur during file i/o,
it returns an exit status of
.BR 2 ;
if compiler restrictions were disregarded
it returns an exit status of
.BR 255 .
.LP
The diagnostics produced by the Opal compiler are intended to be
self-explanatory. 

.SH BUGS
./ The implementation of infixes is currently rather prototypical. Large
./ infix expressions without brackets might cause the compiler to use up
./ a lot memory or to virtually prevent it from terminating. More then 6
./ levels of omitted bracketing in infix applications is not recommended.
./ .LP
Please refer to the 
.IR "A User's Guide to the Opal Compilation System (Version 2)"
for how to identify a bug. We encourage you to send bug reports to
opal-users@projects.uebb.tu-berlin.de via
.I ocs 
.IR sendbug .

.SH NO WARRANTY
The OPAL Compiler is an experimental research
product and is licensed free of charge. Therefore, we provide
ABSOLUTELY NO WARRANTY of any kind in any case. The Technical
University of Berlin and the authors provide this software package "as
is" without warranty of any kind, either expressed or implied,
including, but not limited to, the implied warranties of
merchandizing and fitness for a particular purpose.  The entire risk
as to the quality and the performance of the program lies with you.
.LP
In no event may the Technical University of Berlin or any of the
program's authors be liable to you for damages, including any lost
profits, lost monies, or other special, incidental, or consequential
damages arising out of the use of or inability to use the program, even
if you have been advised of the possibility of such damages, or for
any claim by any other party. 

.SH AUTHORS
The language OPAL was designed by Gottfried Egger, Andreas Fett,
Carola Gerke, Wolfgang Grieskamp, Michael Jatzeck, Peter Pepper, and
Wolfram Schulte. The frontend of the OPAL compiler was designed and
implemented by Andreas Fett, Michael Jatzeck, and Carola Gerke.  The
backend was designed and implemented by Wolfram Schulte
and Wolfgang Grieskamp.
.LP
The OPAL Group may be contacted at:
Technische Universitaet Berlin,
Fakultaet IV - Elektrotechnik und Informatik,
Institut für Softwaretechnik und Theoretische Informatik,
Fachgebiet Uebersetzerbau und Programmiersprachen,
Sekretariat TEL12-2,
Ernst-Reuter-Platz 7,
D-10587 Berlin,
Email: opal-users@projects.uebb.tu-berlin.de,
WWW: http://projcts.uebb.tu-berlin.de/opal/

./.SH COPYRIGHT AND LICENCE
./
./The OPAL Compiler is distributed as free software software.  Copyright
./is with the authors, Andreas Fett, Carola Gerke, Wolfgang Grieskamp,
./Michael Jatzeck, Wolfram Schulte. As stated above, there is absolutely
./no warranty.
./.LP
./You are free to use the OPAL Compiler to generate
./NON-COMMERCIAL stand-alone applications.
./.LP
./You are free to copy and re-distribute the OPAL Compiler
./as a whole WITHOUT ANY MODIFICATION.
./.LP
./You are free to build commercial software from the OPAL Compiler, 
./or to redistribute modified parts of it, PROVIDED:
./
./.TP 
./1) You have written consent from Peter Pepper, who is 
./authorized by the authors for this purpose;
./.LP
./.TP 
./2) The notice on copyright of the authors above is included 
./in human readable form in your product.
