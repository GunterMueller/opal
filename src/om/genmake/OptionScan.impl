
IMPLEMENTATION OptionScan
-- scanning of program options
-- wg 4.7.93
-- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/om/genmake/OptionScan.impl,v 1.3 1999-05-31 08:42:41 kd Exp $

IMPORT  Nat             COMPLETELY
        Char            COMPLETELY
        Denotation      ONLY ++
        String          COMPLETELY
        Compose         ONLY o
        BTUnion         COMPLETELY
        StringFormat    COMPLETELY
        StringScan      COMPLETELY
        StringFilter    COMPLETELY
        StringConv      ONLY `
        Pair            COMPLETELY
        Option          COMPLETELY
        Seq             COMPLETELY
        SeqMap          COMPLETELY
        SeqReduce       COMPLETELY
--      Map[denotation,<,seq[seq[union]]] COMPLETELY
        Map COMPLETELY
        Com             COMPLETELY
        ProcessArgs     ONLY args
        ComCompose      COMPLETELY



DEF scanOptions(Specs,Default) ==
    args & (\\Args.  
        scanOpts(Specs,anaSpec * Specs,Default,! * rt(Args)))



FUN anaSpec :           denotation -> seq[string]

FUN scanOpts :          seq[denotation] ** seq[seq[string]] ** map[denotation,<,seq[seq[union]]] 
                        ** seq[string]
                                        -> com[pair[map[denotation,<,seq[seq[union]]],seq[denotation]]]
FUN scanNextOpt :       seq[denotation] ** seq[seq[string]] ** map[denotation,<,seq[seq[union]]]
                        ** seq[string] ** seq[denotation] ** seq[seq[string]]
                                        -> com[pair[map[denotation,<,seq[seq[union]]],seq[denotation]]]
FUN scanRestOpt :       seq[denotation] ** seq[seq[string]] ** map[denotation,<,seq[seq[union]]]
                        ** denotation ** seq[union] 
                        ** seq[string] ** seq[string] 
                                        -> com[pair[map[denotation,<,seq[seq[union]]],seq[denotation]]]

FUN error :             denotation ** denotation 
                                -> com[pair[map[denotation,<,seq[seq[union]]],seq[denotation]]]


-- scan options
DEF scanOpts(Specs,Formats,Opts,Args AS _ :: _) ==
    scanNextOpt(Specs,Formats,Opts,Args,Specs,Formats)
DEF scanOpts(Specs,Formats,Opts,<>) ==
    -- no more arguments
    yield(okay(Opts & <>))

-- identify option
DEF scanNextOpt(Specs,Formats,Opts,Args AS Arg::RestArgs,
                Spec :: RestSpecs,Format :: RestFormats) ==
    LET FirstVals? == scan(`(ft(Format)),Arg)
    IN
    IF avail?(FirstVals?) THEN
        -- this option Spec matches
        scanRestOpt(Specs,Formats,Opts,Spec,cont(FirstVals?),
                    RestArgs,rt(Format))
    ELSE
        -- try next option Spec
        scanNextOpt(Specs,Formats,Opts,Args,RestSpecs,RestFormats)
    FI
DEF scanNextOpt(Specs,Formats,Opts,Arg :: RestArgs,<>,<>) ==
    -- no option matches
    scanOpts(Specs,Formats,Opts,RestArgs) & (\\OptsAndRest.
    LET (FinalOpts,Rest) == (1st(OptsAndRest),2nd(OptsAndRest))
    IN
    yield(okay(FinalOpts & (`(Arg) :: Rest)))
    )

-- continue scanning an identifed option
DEF scanRestOpt(Specs,Formats,Opts,Spec,Vals,
                Arg::RestArgs,FormatComp::RestFormatComps) ==
    LET NextVals? == 
           IF FormatComp = !("%s") THEN avail(Arg u)
           IF FormatComp = !("%d") THEN avail((Arg`):denotation u)
                                   ELSE scan(FormatComp`,Arg) FI
    IN
    IF avail?(NextVals?) THEN
        scanRestOpt(Specs,Formats,Opts,Spec,Vals ++ cont(NextVals?),
                    RestArgs,RestFormatComps)
    ELSE
        error(Spec,"option format mismatch")
    FI

DEF scanRestOpt(Specs,Formats,Opts,Spec,Vals,
                <>,FormatComp::FormatComps) ==
    error(Spec,"option argument number too small")

DEF scanRestOpt(Specs,Formats,Opts,Spec,Vals,
                Args,<>) ==
    LET OldVals? == Opts!?Spec
        NewVals  == IF avail?(OldVals?) THEN Vals :: cont(OldVals?)
                                        ELSE %(Vals) FI
        NewOpts  == def(Spec,NewVals,Opts)
    IN
    scanOpts(Specs,Formats,NewOpts,Args)
    

-- yield error
DEF error(Spec,Message) ==
    yield(fail(format("option ""%s"": %s",
                      %(denotation(Spec),denotation(Message)))`))


-- analyze option specification
DEF anaSpec(Spec) ==
    anaSpec(drop(space?,Spec!))

    FUN anaSpec : string -> seq[string]
    DEF anaSpec(<>) == <>
    DEF anaSpec(Spec) ==
        LET (Format,RestSpec) == split(~ o space?,Spec)
        IN
        Format :: anaSpec(drop(space?,RestSpec))

        
-- argument format

IMPORT  MapConv[denotation,<,seq[seq[union]]] ONLY `
        SeqConv         ONLY `
        StringConv      ONLY `
        NatConv         ONLY `
        IntConv         ONLY `
        BoolConv        ONLY `
        RealConv        ONLY `

DEF `(Map) == `(\\x. !(x),`(`(`)))(Map)

FUN ` : union -> string
DEF `(nat(X)) == !((X`) ++ "N")
DEF `(int(X)) == !((X`) ++ "I")
DEF `(real(X)) == !((X`) ++ "R")
DEF `(string(X)) == !("'" ++ (X`) ++ "'")
DEF `(denotation(X)) == !("""" ++ X ++ """")
DEF `(bool(X)) == !(`(X))
