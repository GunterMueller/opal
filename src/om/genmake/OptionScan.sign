
SIGNATURE OptionScan
-- scanning program options

IMPORT	Nat		ONLY nat
	String		ONLY string
	Denotation	ONLY <
	BTUnion		ONLY union
	Seq		[denotation] ONLY seq
	Seq		[union] ONLY seq
	Seq		[seq[union]] ONLY seq
	Map		[denotation,<,seq[seq[union]]] ONLY map
	Pair		[map,seq[denotation]] ONLY pair
	Com		[pair] ONLY com


FUN scanOptions : seq[denotation] ** map -> com[pair[map,seq[denotation]]]
    /*
	scanOptions(Specs,Default) & (\\OptsAndRest. ...

    	Scan arguments of program according to a sequence of
	option specifications. 
	
	Options are specified by means of scan'StringScan formats,
	with the following extension: a whitespace within the
	option specification means "scan the rest of the option
	from the next argument".

	Options specifications are tried in order they appear
	in Specs until the next argument matches (the prefix
	until the whitespace) of the specification. All remaining
	argument desired by the option specification must be
	present and matching, otherwise an error is generated.
	
	The seq[union] resulting from a scan is pushed with the 
	option specification as a key to the map; several matches 
	of the same option appear in reverse order in the map. 
	Default is used as the initial map.
	
	Arguments which do not match any option specification are 
	returned in Rest.

	Example:
		DEF outOpt     = "-o %s"
		DEF outAltOpt  = "-o%s"
		DEF optimOpt   = "-o%n"

		scanOptions( optimOpt :: outOpt :: outAltOpt, Default)
				& (\\ OptsAndRest. ...


	Will produce for arguments "-o2 -ofoo -o foo -o1 bar" the
	mapping:

		optimOpt  |-> %(nat(1))  ::  %(nat(2))  :: <>
		outOpt    |-> %(string(!("foo"))) :: <>
		outAltOpt |-> %(string(!("foo"))) :: <>

    */

FUN ` : map -> string
    -- format argument mapping
