SIGNATURE TransformInsts

IMPORT Com[ttable] ONLY com
       InterOpal ONLY name : SORT < : name ** name -> bool
                      origin : SORT < : origin ** origin -> bool
		      ident : SORT inst : SORT interOpal : SORT
		      struct : SORT
       Map[name, <, interReflection] ONLY map
       Map[origin, <, struct] ONLY map
       Nat ONLY nat
       Set[name, <] ONLY set


-- %$Instantiation with Reflections$

/* % The type @code{interReflection} maps an explicit instantiation
     parameter to its reflection. The @code{generated} variant maps
     a plain sort reference, i.e. @code{nat} to a @code{sortReflection}
     object that reflects that sort, instantiated properly if the
     main structure has any parameters. The parameter @code{variant} maps a
     dynamic structure sort parameter to a (implicit)
     @code{sortReflection} parameter at parameter position @code{no}. */

TYPE interReflection == generated(orig : name,
				  ident : ident,
				  inst : inst)
			parameter(orig : name,
				  ident : ident,
				  no : nat)


/* % The function @code{asName} computes the correct name for the target
     object of a @code{interReflection} in the main structure. */

FUN asName : interReflection -> name


/* % The type @code{ttable} represents the state of the instantiation
     transformation in progress. @code{structs} contains the structures 
     in the current compilation environment,
     @code{refls} maps formal parameters declared dynamic to their
     reflections. */

TYPE ttable == ttable(structs : map[origin, <, struct],
		      refls : map[name, <, interReflection])


/* % The @code{transformInst} command transforms the main structure
     in the given @code{ttable}, allocating identifiers for all needed
     @code{sortReflections} and expanding instantiation patterns containing
     dynamic sort parameters with the appropriate reflections. It is
     assumed that dynamic formal parameters of the main structure
     already have a reflection counterpart in @code{refls}. */

FUN transformInsts : ttable -> com[ttable]

