SIGNATURE Config


/* % Structure @code{Config} processes arguments to the @code{dynamite}
     command. The actual command line parsing is
     hidden. @code{fileArgument} is the given file name of the
     InterOpal structure to process. */

FUN fileArgument : denotation


FUN globalPragma? : bool

/* % Tells whether a @code{DYNAMIC} pragma without arguments covers
     all of the formal parameters, instead of none. Default is
     @code{false}. */


FUN dynamicValues? : bool

/* % Tells whether formal parameters that are no sorts but actual
     values, e.g. @code{42 : nat} shall be allowed to be dynamic.
     If false, any @code{DYNAMIC} declaration of those parameters
     is silently ignored. Default is @code{false}. Note that
     handling of dynamic values is not and may probably never
     be implemented. */


FUN checkSignature? : bool

/* % Tells whether the InterOpal structure of the signature part of
     a structure shall be read when transforming the implementation
     part. This works around a bug in the front end, which makes
     position marks of tokens (signature vs. implementation) in the
     InterOpal syntax tree unreliable. Default is @code{true}. */

