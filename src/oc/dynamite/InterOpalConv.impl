IMPLEMENTATION InterOpalConv

IMPORT InterOpal COMPLETELY
       Nat COMPLETELY
       NatConv ONLY `
       SeqConv ONLY `
       MapConv ONLY `
       SeqReduce COMPLETELY
       Denotation COMPLETELY
       String ONLY string


DEF interOpal(Part, Structs)` == (Part`) ++ "(" ++ `(`,`)(Structs) ++ ")"

DEF signature` == "signature"
DEF implementation` == "implementation"
DEF extProperties` == "extProperties"
DEF intProperties` == "intProperties"

FUN `` : part -> denotation

DEF signature`` == "sign"
DEF implementation`` == "impl"
DEF extProperties`` == "extp"
DEF intProperties`` == "intp"

DEF struct(Pos, Origin, Symbol, Insts, Onlys, Objs, Props, Pragmas)` ==
  "(" ++ `(`)(Pos) ++ "," ++ (Origin`) ++ "," ++ Symbol ++ "," ++
    `(`, `(`))(Insts) ++ "," ++ `(`, `(`))(Onlys) ++ "," ++ `(`, `)(Objs) ++ "," ++
    `(`, `)(Props) ++ "," ++ `(`)(Pragmas) ++ ")"

DEF object(Pos, Ident, Symbol, Kind, Def, Props, Pragmas)` ==
  "(" ++ `(`)(Pos) ++ "," ++ (Ident`) ++ "," ++ Symbol ++ "," ++
    (Kind`) ++ "," ++ (Def`) ++ "," ++ `(`)(Props) ++ "," ++
    `(`)(Pragmas) ++ ")"

DEF unknown` == "?"
DEF part(Part)` == "<" ++ (Part``) ++ ">"
DEF pos(Part, X, Y)` == "<" ++ (Part``) ++ "," ++ (X`) ++ "," ++ (Y`) ++ ">"

DEF name(Ident, Origin, Inst)` ==
  "(" ++ (Ident`) ++ "," ++ (Origin`) ++ "," ++ (Inst`) ++ ")"

DEF sort` == "SORT"
DEF fct(Fct)` == Fct`

DEF sort(Sort)` == Sort`
DEF cart(Elems)` == ((\\ Elem, List . +/+("**")(Elem`, List)), "") / Elems
DEF funct(Dom, Codom)` == (Dom`) ++ "->" ++ (Codom`)

DEF ident(No)` == "o" ++ (No`)

DEF local` == "local"
DEF main` == "main"
DEF origin(No)` == "s" ++ (No`)

DEF formal` == "formal"
DEF none` == "none"
DEF inst(No)` == "i" ++ (No`)

DEF missing` == "-"
DEF imported` == "?"
DEF parameter(Pos, No)` == "p" ++ (No`)
DEF induced(Pos, Sort)` == "^(" ++ (ident(Sort)`) ++ "," ++ (inst(Sort)`) ++ ")"
DEF data(Variants)` == `(`)(Variants)
DEF def(Eqns)` == `(`)(Eqns)

DEF eqn(Pos, Lhs, Patterns, Rhs)` ==
  (Lhs`) ++ "==" ++ (Rhs`)

DEF any(Pos)` == "_"
DEF (name(Pos, Name)) : pattern` == Name`

DEF (name(Pos, Name)) : expr` == Name`
DEF den(Pos, Rep)` == Rep
DEF (tuple(Pos, Elems)) : expr` == `(`)(Elems)
DEF (apply(Pos, Funct, Arg)) : expr` == (Funct`) ++ (Arg`)
