IMPLEMENTATION ShiftLocalVars

IMPORT InterOpal COMPLETELY
       Nat COMPLETELY
       Map COMPLETELY
       MapMap ONLY *
       OptionMap ONLY *
       Pair COMPLETELY
       Seq ONLY seq
       SeqMap ONLY *
       Com ONLY succeed


-- FUN shiftLocalVars : pair[map[origin, < struct], nat] ->
--                       com[map[origin, <, struct]]

DEF shiftLocalVars(Structs & N) ==
  succeed((main, (_ + N)) upd Structs)


FUN + : struct ** nat -> struct

DEF struct(Pos, Origin, Symbol, Insts, Onlys, Objs, Props, Pragmas) + N ==
  struct(Pos, Origin, Symbol, Insts, Onlys, (_ + N) * Objs, Props, Pragmas)


FUN + : object ** nat -> object

DEF object(Pos, Ident, Symbol, Kind, Def, Props, Pragmas) + N ==
  object(Pos, Ident, Symbol, Kind, Def + N, Props, Pragmas)


FUN + : impl ** nat -> impl

DEF def(Eqns) + N == def((_ + N) * Eqns)
DEF Impl : impl + N == Impl


FUN + : eqn ** nat -> eqn

DEF eqn(Pos, Lhs, Patterns, Rhs) + N ==
  eqn(Pos, Lhs + N, (_ + N) * Patterns, Rhs + N)


FUN + : pattern ** nat -> pattern

DEF any(Pos) + N == any(Pos)
DEF (name(Pos, Name)) : pattern + N == name(Pos, Name)
DEF var(Pos, Var) + N == var(Pos, Var + N)
DEF as(Pos, Var, Pattern) + N == as(Pos, Var + N, Pattern + N)
DEF (apply(Pos, Funct, Arg)) : pattern + N == apply(Pos, Funct + N, Arg + N)
DEF (tuple(Pos, Elems)) : pattern + N == tuple(Pos, (_ + N) * Elems)


FUN + : expr ** nat -> expr

DEF (name(Pos, Name)) : expr + N == name(Pos, Name + N)
DEF den(Pos, Rep) + N == den(Pos, Rep)
DEF (tuple(Pos, Elems)) : expr + N == tuple(Pos, (_ + N) * Elems)
DEF (apply(Pos, Funct, Arg)) : expr + N == apply(Pos, Funct + N, Arg + N)
DEF cases(Pos, Guards, Else) + N ==
  cases(Pos, (_ + N) * Guards, (_ + N) * Else)
DEF lambda(Pos, Vars, Body) + N == lambda(Pos, (_ + N) * Vars, Body + N)
DEF block(Pos, Eqns, Body) + N == block(Pos, (_ + N) * Eqns, Body + N)


FUN + : guard ** nat -> guard

DEF guard(Pos, If, Then) + N == guard(Pos, If + N, Then + N)


FUN + : var ** nat -> var

DEF var(Pos, ident(No), Symbol, Fct) + N ==
  var(Pos, ident(No + N), Symbol, Fct)


FUN + : name ** nat -> name

DEF name(ident(No), local, none) + N == name(ident(No + N), local, none)
DEF Name : name + N == Name
