IMPLEMENTATION Dynamite

IMPORT InterOpal         ONLY interOpal part : SORT
                              implementation implementation?
                              origin : SORT struct : SORT
			      < : origin ** origin -> bool
       Map               ONLY map
       InterOpalIO       ONLY readInterOpal writeInterOpal
       InterOpalTools    ONLY baseName ok?
       Denotation        ONLY ++
       Seq               ONLY seq ft rt #
       Com               ONLY com break succeed
       ComCheck          ONLY check
       Config            ONLY fileArgument
       ProcessArgs       ONLY args
       Option            ONLY option
       ComCompose        ONLY &
       CheckDynamic      COMPLETELY
       ReflectParams     COMPLETELY
       TransformInsts    COMPLETELY
       ImportREFLECTION  COMPLETELY
       ImplementReflections COMPLETELY
       ShiftLocalVars ONLY shiftLocalVars
       Void                 ONLY nil

       WriteStatus ONLY =>


DEF dynamite ==
  (\\ Message . Message) check process(fileArgument)


FUN process : denotation -> com[void]

DEF process(InterFile) ==
  readInterOpal(false, InterFile) &
  ok?(InterFile) &
  transform(InterFile)


FUN transform : denotation -> interOpal -> com[void]

DEF transform(InterFile)(IO AS interOpal(Part, Structs)) ==
  IF Part implementation? THEN
    checkDynamic(InterFile)(Structs) &
    " reflecting params ..." => reflectParams &
    " transforming insts ..." => transformInsts &
    " importing REFLECTION ..." => importREFLECTION &
    " implementing reflections ..." => implementReflections &
    " shifting variables ..." => shiftLocalVars &
    output(InterFile, implementation)
   ELSE succeed(nil)
   FI


FUN output : denotation ** part -> map[origin, <, struct] -> com[void]

DEF output(InterFile, Part)(Structs) ==
  writeInterOpal(false, InterFile)(interOpal(Part, Structs))

