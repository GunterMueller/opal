SIGNATURE ImplementReflections

IMPORT InterOpal ONLY interOpal : SORT inst : SORT expr : SORT
                      origin : SORT < : origin ** origin -> bool
                      name : SORT < : name ** name -> bool
		      struct : SORT
       TransformInsts ONLY interReflection : SORT
       Map[origin, <, struct] ONLY map
       Map[name, <, interReflection] ONLY map
       Nat ONLY nat
       Pair[map[origin, <, struct], nat] ONLY pair
       Seq[expr] ONLY seq
       Com[pair[map[origin, <, struct], nat]] ONLY com


/* % The type @code{itable} represents the state of the reflection
     implementation in progress. An @code{itable} is created as
     @code{itable(structs, refls, ...)} where @code{structs} is the
     InterOpal structure map and @code{refls} maps symbolic names to
     their reflections. The optional parameters @code{coreReflection},
     @code{sort} and @code{asInstances} refer to the InterOpal
     representation of coreReflections (see structure @code{REFLECTION}).
     The @code{importREFLECTION} command fills them in. */

SORT itable

FUN itable : map[origin, <, struct] ** map[name, <, interReflection] **
	      name ** name ** (seq[expr] -> expr) -> itable

FUN itable : map[origin, <, struct] ** map[name, <, interReflection] ->
	      itable

FUN implementReflections : itable ->
	       com[pair[map[origin, <, struct], nat]]
