SIGNATURE CheckDynamic

IMPORT InterOpal ONLY origin : SORT < : origin ** origin -> bool
                      struct : SORT
       Map[origin, <, struct] ONLY map
       Com[map] ONLY com


-- %$Use of the DYNAMIC pragma$

/* % In order to handle dynamic structure parameters correctly, the
     compiler must be able to recognize structures that expect
     reflections of their formal parameters. Currently, either all or
     none of the formal sort parameters of a structure are dynamic,
     but this may change in the future to a single parameter
     granularity. A formal parameter must be dynamic, if either it is
     explicitly declared so (as an argument of a @code{DYNAMIC}
     pragma) or it is passed as an actual parameter to some structure
     that expects a dynamic parameter in that position.

     If a parameter turns out to be dynamic in the implementation of a
     structure, it must be made dynamic in the interface too, because
     it is impossible to resolve calls to that structure correctly
     when the dynamic property is hidden. The function
     @code{checkDynamic} called with a InterOpal file name and the
     corresponding structures verifies the rule stated above,
     returning its second argument, or produces an error. */

FUN checkDynamic : denotation -> map[origin, <, struct] ->
		    com[map[origin, <, struct]]

