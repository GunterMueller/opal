IMPLEMENTATION CheckDynamic

IMPORT Com               ONLY com succeed break
       ComCompose        ONLY &
       Denotation        COMPLETELY
       InterOpal         COMPLETELY
       InterOpalIO       ONLY readInterOpal
       InterOpalEquality ONLY = : name ** name -> bool
       InterOpalTools    ONLY ok? formalParams baseName dynamic?
       Map               ONLY map ! codom undef iter def?
       MapReduce         ONLY /
       Nat               ONLY nat < 0 succ
       Option            ONLY option avail? cont
       Pair[bool, bool]  ONLY pair &
       Seq               ONLY seq exist? <>? :: <> #
       SeqIndex          ONLY ! pos
       SeqMap            ONLY *
       SeqReduce         ONLY /


-- %$The main function$

-- FUN checkDynamic : denotation -> map[origin, <, struct] ->
--		       com[map[origin, <, struct]]

DEF checkDynamic(InterFile)(Structs) ==
  dynamics(InterFile, Structs) & (\\ Dynamics .
  (IF DynamicParams <>? THEN succeed(Structs)
   ELSE break("parameter(s) " ++ Names ++ " of structure " ++ symbol(Main) ++
	      " must be declared dynamic.")
     WHERE
       Names == (+/+(" and "), "") / (Name * DynamicParams)
       Name == (\\ Param . symbol(objs(Main) ! ident(insts(Main) !
						     formal ! Param)))
       Main == Structs ! main
   FI
   WHERE DynamicParams == (checkDynamic(Structs), <>) / Dynamics))


FUN checkDynamic : map[origin, <, struct] ->
		    nat ** pair[bool, bool] ** seq[nat] -> seq[nat]

DEF checkDynamic(Structs)(Param, SignDynamic? & ImplDynamic?, DynamicParams) ==
  IF ImplDynamic? ORIF dynamicReuse?(Structs, Param) THEN
    IF SignDynamic? THEN DynamicParams
    ELSE Param :: DynamicParams
    FI
  ELSE DynamicParams
  FI


FUN signatureInterName : denotation -> denotation

DEF signatureInterName(InterFile) ==
  baseName(InterFile) ++ ".sign.inter"


FUN dynamics : denotation ** map[origin, <, struct] ->
		com[map[nat, <, pair[bool, bool]]]

DEF dynamics(InterFile, Structs) ==
  readInterOpal(false, SignatureInterFile) &
  ok?(InterFile) & (\\ IO .
  succeed(dynamics(structs(IO) ! main, Structs ! main)))
  WHERE SignatureInterFile == signatureInterName(InterFile)


FUN dynamics : struct ** struct -> map[nat, <, pair[bool, bool]]

DEF dynamics(Sign, Impl) ==
  iter(0, succ, (_ < Params))(Dynamic?)
  WHERE Params == paramCount(Sign)
	Dynamic? == \\ Param . dynamic?(Sign, Param) & dynamic?(Impl, Param)


FUN dynamics : struct -> map[nat, <, pair[bool, bool]]

DEF dynamics(Impl) ==
  iter(0, succ, (_ < Params))(Dynamic?)
  WHERE Dynamic? == \\ Param .
		      dynamic?(Impl, Param, fromSign?) &
		      dynamic?(Impl, Param)
	Params == paramCount(Impl)


FUN fromSign? : pragma -> bool

DEF fromSign?(Pragma) ==
  (\\ Item . IF Item token? THEN part(pos(Item)) signature?
	     ELSE false
	     FI) exist? items(Pragma)


FUN dynamicReuse? : map[origin, <, struct] ** nat -> bool

DEF dynamicReuse?(Structs, Param) ==
  exist?(dynamicReuse?(Structs)(Main, Param),
	 codom(main undef Structs))
  WHERE Main == Structs ! main


FUN dynamicReuse? : map[origin, <, struct] -> struct ** nat -> struct -> bool

DEF dynamicReuse?(Structs)(Main, Param)(Struct) ==
  dynamicReuse?(Structs)(insts(Main) ! formal ! Param, Struct)
  exist?
  codom(insts(Struct))


FUN dynamicReuse? : map[origin, <, struct] -> name ** struct -> seq[name] -> bool

DEF dynamicReuse?(Structs)(FormalParam, Struct)(ActualParams) ==
  IF Position? avail? THEN
    dynamic?(Struct, cont(Position?))
  ELSE false
  FI
  WHERE Position? == pos(contains?(Structs)(FormalParam), ActualParams)


FUN contains? : map[origin, <, struct] -> name -> name -> bool

DEF contains?(Structs)(Name1)(Name2) ==
  IF Name1 = Name2 THEN true
  OTHERWISE
  IF inst(Name2) none? THEN false
  ELSE contains?(Structs)(Name1) exist? Insts
    WHERE Insts == insts(Structs ! origin(Name2)) ! inst(Name2)
  FI


FUN paramCount : struct -> nat

DEF paramCount(Struct) ==
  IF formal def? Insts THEN #(Insts ! formal)
  ELSE 0
  FI
  WHERE Insts == insts(Struct)

