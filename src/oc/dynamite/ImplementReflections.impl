IMPLEMENTATION ImplementReflections

IMPORT InterOpal COMPLETELY
       InterOpalTools COMPLETELY
       InterOpalEquality COMPLETELY
       TransformInsts COMPLETELY
       Seq COMPLETELY
       SeqFilter ONLY |
       SeqIndex ONLY ! pos
       SeqMap ONLY *
       SeqReduce ONLY /
       Map COMPLETELY
       Com ONLY com succeed
       ComCompose COMPLETELY
       Option COMPLETELY
       Pair ONLY &
       Config ONLY debug?
       Nat COMPLETELY

       Denotation COMPLETELY
       BasicIO COMPLETELY
       NatConv COMPLETELY


DATA itable == itable(structs : map[origin, <, struct],
		      refls : map[name, <, interReflection],
		      tools : option[itools])


-- FUN itable : map[origin, <, struct] ** map[name, <, interReflection] **
--               itools -> itable

DEF itable(Structs, Refls, Tools) ==
  itable(Structs, Refls, avail(Tools))


-- FUN itable : map[origin, <, struct] ** map[name, <, interReflection] ->
--               itable

DEF itable(Structs, Refls) == itable(Structs, Refls, nil)


DATA itools == itools(coreReflectionName : name,
		      coreTypeName : name,
		      sortName : name,
		      valueName : name,
		      basicName : name,
		      functionName : name,
		      asInstances : seq[expr] -> expr,
		      asCoreType : seq[expr] -> expr)


-- FUN implementReflections : itable -> com[pair[map[origin, <, struct], nat]]

DEF implementReflections(IT) ==
  (implementReflection(IT), succeed(structs(IT))) / Refls & (\\ Structs .
  succeed(Structs & NewParams))
  WHERE NewParams == #(Param? | Refls)
	Param? == (\\ Refl . (Refl parameter?) and (origin(orig(Refl)) main?))
	Refls == codom(refls(IT))


FUN implementReflection : itable ->
			   interReflection ** com[map[origin, <, struct]] ->
			   com[map[origin, <, struct]]

DEF implementReflection(itable(S, Refls, Tools))
                       (Refl, State) ==
  IF debug? THEN
    State & (\\ Structs .
    writeLine("  implementing "
	      ++ symbol(objs(Structs ! origin(orig(Refl))) !
			ident(orig(Refl)))
	      ++ "'" ++ symbol(Structs ! origin(orig(Refl))) ++
	      " as ident(" ++ `(no(ident(Refl))) ++
	      ") ...") ;
    succeed(Structs)) & Implement
  ELSE
    State & Implement
  FI
  WHERE Origin == origin(asName(Refl))
	Implement ==
	  (\\ Structs .
	   (succeed((Origin, implementReflection(IT, Refl)) upd Structs)
	    WHERE IT == itable(Structs, Refls, Tools)))


FUN implementReflection : itable ** interReflection -> struct -> struct

DEF implementReflection(IT, Refl)
                       (struct(Pos, Origin, Symbol, Insts, Onlys,
			       Objs, Props, Pragmas)) ==
  struct(Pos, Origin, Symbol, Insts, Onlys, (ident(Refl), Obj) def Objs,
	 Props, Pragmas)
  WHERE Obj == implementReflection(IT, Refl)


FUN implementReflection : itable ** interReflection -> object

DEF implementReflection(IT, Refl) ==
  object(unknown :: <>, Ident,
	 reflectSymbol(symbol(lookup(structs(IT), Orig))),
	 fct(sort(coreReflectionName(cont(tools(IT))))), Def, <>, <>)
  WHERE Orig == orig(Refl)
	Ident == ident(Refl)
	Def == IF Refl parameter? THEN parameter(unknown, no(Refl))
	       ELSE def(Eqn :: <>)
		 WHERE
		   Eqn == eqn(unknown, Pat, <>, Impl)
		   Pat == name(unknown, asName(Refl))
		   Impl == implementReflection(IT, {})(Orig)
	       FI


FUN implementReflection : itable ** map[origin, <, inst] -> name -> expr

DEF implementReflection(it AS itable(Structs, Refls, avail(Tools)), Current)
		       (Orig) ==
  LET Object == lookup(Structs, Orig)
      IdDen == den(unknown, symbol(Object))
      Inst == inst(Orig)
      StructDen == den(unknown, symbol(Struct))
      Params == IF Inst def? Insts THEN Insts ! Inst
		ELSE <>
		FI
      Insts == insts(Struct)
   -- Sorts == (\\ Name. kind(lookup(Structs, Name)) sort?) | Params
      Names == getInstNames(Refls)(Params) -- (\\ Name. asName(Refls ! Name)) * Params
      Instances == asInstances(Tools)(name(unknown, _) * Names)
      Formal? == Insts !? formal
      Formal == IF Formal? avail? THEN cont(Formal?)
		ELSE <>
		FI
      paramNo? == pos(Orig = _, Formal)
      Struct == Structs ! origin(Orig)
  IN
  IF paramNo? avail? THEN
    implementReflection(it, Current)((insts(Struct) !
				      (Current ! origin(Orig))) !
				     cont(paramNo?))
  OTHERWISE
  IF kind(Object) sort? THEN
    LET SortArgs == tuple(unknown, IdDen :: StructDen :: Instances :: <>)
    IN apply(unknown, name(unknown, sortName(Tools)), SortArgs)
  ELSE
    LET ValueArgs == tuple(unknown, IdDen :: StructDen :: Instances ::
			   Fct :: <>)
	Fct == implementFct(it, Local)(fct(kind(Object)))
	Local == (origin(Orig), inst(Orig)) def Current
    IN apply(unknown, name(unknown, valueName(Tools)), ValueArgs)
  FI


FUN getInstNames : map[name, <, interReflection] -> seq[name] ->
		    seq[name]

DEF getInstNames(Refls)(<>) == <>
DEF getInstNames(Refls)(Name :: Names) ==
  LET Refl? == Refls !? Name
  IN
  IF Refl? avail? THEN asName(cont(Refl?)) :: getInstNames(Refls)(Names)
  ELSE getInstNames(Refls)(Names)
  FI


FUN implementFct : itable ** map[origin, <, inst] -> fct -> expr

DEF implementFct(IT, Current)(Fct) ==
  LET Tools == cont(tools(IT))
  IN
  IF Fct sort? THEN apply(unknown, name(unknown, basicName(Tools)),
			  implementReflection(IT, Current)(sort(Fct)))
  IF Fct cart? THEN asCoreType(Tools)(implementFct(IT, Current) *
				      elems(Fct))
  IF Fct funct? THEN apply(unknown, name(unknown, functionName(Tools)),
			   tuple(unknown,
				 implementFct(IT, Current)(dom(Fct)) ::
				 implementFct(IT, Current)(codom(Fct)) :: <>))
  FI


FUN reflectSymbol : denotation -> denotation

/* Generate symbolic identifier for reflected parameter. */

DEF reflectSymbol(Symbol) == Symbol
