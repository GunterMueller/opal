
IMPLEMENTATION Absy
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-04-14 23:42:33 $ ($Revision: 1.2 $)

-- Autorin:     cg
-- Projekt:     OPAL1-Compiler (Scanner, Parser)
-- Zweck:       collecting the types of the abstract syntax into one type

IMPORT    -- absy
          Rep                   COMPLETELY
          OcPos                 ONLY pos `
          Struct                COMPLETELY
          Impl                  COMPLETELY
          PartName              COMPLETELY
          GlobPragma            COMPLETELY
IMPORT    -- lib                
          Seq                   COMPLETELY
          SeqReduce             COMPLETELY
          SeqMap                COMPLETELY
          SeqConv               COMPLETELY
          Denotation            COMPLETELY
          Char                  COMPLETELY
          CharConv              COMPLETELY
-- %- ----------------------------------------------------------------------
-- %$General Abstract Syntax Type$
-- %- ----------------------------------------------------------------------

DATA absy    == AbsySeq (aSeq:seq[absy])
                Struct  (struct:struct)
                Name    (pName:partName)
                NameSeq (nSeq:seq[partName])
                Kind    (kind:kind)
                Origin  (origin:origin)
                Import  (import:seq[import])
                Type    (type:seq[sortImpl])
                Data    (data:seq[sortImpl])
                Variants (variants:seq[variant])
                Comps   (comps:seq[comp])
                EqSeq   (eqs:seq[eq])
                Formula (f:formula)
                LawSeq  (ls:seq[law])
                Expr    (e:expr)
                Guards  (g:seq[guard])
                Pos     (p:pos)
                GPragma  (pi:seq[globPragma])
                ProofHead(ph: proofHead)
                ProofBody(pb: proofBody)
                NameSpec (pName: partName, spc: spc)
                Spc(spc: spc)
                Relation (type: rep, import: seq[import])
                noAbsy

FUN structOf : absy -> struct
DEF structOf(A) == IF A Struct? THEN struct(A) ELSE errorStruct FI

-- %- ----------------------------------------------------------------------

FUN ` : absy ->  denotation
DEF ` (Struct(S)) == S `
DEF ` (Name(PN))  == PN ` 
DEF ` (NameSeq(NSeq)) == `("[", ",", "]")(`)(NSeq)
DEF ` (Kind(K))     == K  ` : kind->denotation
DEF ` (Origin(O))   == O  ` : origin->denotation
DEF ` (Import(ISeq)) == `("", "\n", "")(`)(ISeq)
DEF ` (Type(SISeq))  == `("TYPE ", "\n", "")(`)(SISeq) 
DEF ` (Data(SISeq))  == `("DATA ", "\n", "")(`)(SISeq) 
DEF ` (Variants(VSeq)) == `("", "\n", "")(`)(VSeq) 
DEF ` (Comps(CSeq)) == `("(", ",", ")")(`)(CSeq) 
DEF ` (EqSeq(ESeq))  == `("DEF ", "\n", "")(`)(ESeq) 
DEF ` (LawSeq(LSeq))  == `("LAW ", "\n", "")(`)(LSeq) 
DEF ` (Expr(E))  == `(E)
DEF ` (Formula(F))  == "(" ++ `(F) ++ ")"


DEF ` (Guards(GSeq)) == `("", "\n", "")(`)(GSeq)
DEF ` (Pos(P)) == `(P) 
DEF ` (GPragma(PS)) == `("", "\n", "")(`)(PS)
DEF ` (ProofHead(PH)) == `(PH)
DEF ` (ProofBody(PB)) == `(PB)
DEF ` (NameSpec(PN, Spec)) ==
  "["++ (PN `) ++ `(Spec) ++ "]"

DEF `(Spc(Spec)) == `(Spec)
DEF ` (Relation(T, ISeq)) == 
  `("RELATION " ++ `(T) ++ " ", "\n", "")(`)(ISeq)

DEF ` (noAbsy) == "%NoAbsy" 

