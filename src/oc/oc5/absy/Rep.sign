
SIGNATURE Rep
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- %- Autor:    cg
-- %- Projekt:  OPAL1-Compiler (Scanner, Parser)
-- %- Zweck:    representation of denotations

IMPORT 	Nat		ONLY nat 
	Option[rep] 	ONLY option


-- %- ------------------------------------------------------------------------
-- %$map/table of representations$
-- %- ------------------------------------------------------------------------

SORT repTab 
-- % number of reps in the map (corresponds to the next free number) 
FUN  # : repTab -> nat

-- %- ------------------------------------------------------------------------
-- %$representation$
-- %- ------------------------------------------------------------------------

SORT rep 
-- TYPE rep == mkRep(ord:nat, ` :denotation, generated?:bool)

FUN ord : rep -> nat 
FUN ` : rep -> denotation 
FUN generated? : rep -> bool

FUN `` : nat -> denotation
-- %PRE nat <= ord(lastKeyword)

-- %- ------------------------------------------------------------------------
-- %$accessing the map of representations$
-- %- ------------------------------------------------------------------------
FUN  getRep : repTab ** denotation -> rep
-- %PRE denotation must have been inserted before

-- %- ------------------------------------------------------------------------
-- %$constructor function on the map of representations$
-- %- ------------------------------------------------------------------------

-- %duplication of the repTab should be avoided
FUN initialTab : () -> repTab

FUN insert : repTab ** denotation -> repTab ** rep

-- %generate suffix and insert extended denotation (i.e. underline)
FUN genAndIns : repTab ** denotation -> repTab ** rep

-- %- ------------------------------------------------------------------------
-- %$verbose output$
-- %- ------------------------------------------------------------------------


FUN printRep : rep -> denotation  
FUN dump : repTab -> denotation

-- %- ------------------------------------------------------------------------
-- %$for (de)coding laws as sorts$
-- %- ------------------------------------------------------------------------

FUN code : repTab ** rep -> repTab ** rep
FUN coded? coded?? : rep -> bool
FUN decode : repTab ** rep -> option[rep]

-- %- ------------------------------------------------------------------------
-- %$for (de)coding names of proofs$
-- %- ------------------------------------------------------------------------

FUN codeP : repTab ** rep -> repTab ** rep
FUN codedP? codedP?? : rep -> bool
FUN decodeP : repTab ** rep -> option[rep]

-- %- ------------------------------------------------------------------------
-- %$relations$
-- %- ------------------------------------------------------------------------

FUN = < : rep ** rep -> bool

-- %- ------------------------------------------------------------------------
-- %$uppercase keywords$
-- %- ------------------------------------------------------------------------

FUN     
	signature implementation
	sort type data
	import completely only
	fun def as
	let in where
	if then otherwise else fi

-- %- -----------------------------------------------------------------------
-- %$symbol keywords$
-- %- -----------------------------------------------------------------------

        colon   
	arrow product 
        equation                
	lambda dot                     

-- % The dot (".") is only a keyword, if preceded by lambda, all or ex. 

-- %- -----------------------------------------------------------------------
-- %$pragma indicators$
-- %- -----------------------------------------------------------------------

        prBeg    prEnd                        

-- %- -----------------------------------------------------------------------
-- %$separators$ 
-- %Separators are never parts of special keywords
-- %- -----------------------------------------------------------------------
        openBr closeBr 
	comma 
	apo 
	openSqBr closeSqBr     

-- %- ------------------------------------------------------------------------
-- %$property keywords$ 
-- %(options -zprop and -I -E)
-- %- ------------------------------------------------------------------------
	external internal properties law 
    	all ex   
	dfd ineq 
	equal eqv
        not and or implies dfd 

-- %- ------------------------------------------------------------------------
-- %$extra keywords$
-- %(options -zseqGuard)$
-- %- ------------------------------------------------------------------------

	orelse andelse 
	allbut 

-- %- ------------------------------------------------------------------------
-- %$proofchecker keywords$
-- %(options -zpchecker)
-- %- ------------------------------------------------------------------------

    	proof turnstile 
    	PROOFSCRIPT proofscript
    	spc pre post 
    	theory assert assume

-- %- ------------------------------------------------------------------------
-- %$predefined identifiers$
-- %- ------------------------------------------------------------------------

    	PREDEF_BOOL bool true false 
    	DENOTATION denotation
    	ABORT 

-- %- ------------------------------------------------------------------------
-- %$technical identifiers$
-- %- ------------------------------------------------------------------------

    	nilRep errorRep : rep

-- %- ------------------------------------------------------------------------
-- %$tests$
-- %- ------------------------------------------------------------------------

FUN nilRep? errorRep? : rep -> bool 

-- %predefined structure name? 
FUN predefinedStr? : rep -> bool

FUN lastKeyword : rep
