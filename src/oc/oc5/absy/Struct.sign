
SIGNATURE Struct
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-04-14 23:42:28 $ ($Revision: 1.3 $)

-- AutorInnen:  mija + carola
-- Projekt:     OPAL1-Compiler + property language
-- Zweck:       Signatur der Typen struct,import und origin fuer die
--              abstrakte Syntax


IMPORT  -- absy
        PartName        ONLY partName:SORT kind
        Impl		ONLY eq sortImpl:SORT expr law:SORT proofHead:SORT
                             proofBody:SORT
        GlobPragma      ONLY pragmaItem globPragma
IMPORT  -- admin
        OcPos             ONLY pos
IMPORT  -- token
        Rep             ONLY rep : SORT <
IMPORT  -- lib
        Option[seq[partName]] ONLY option
        Seq[partName]   ONLY seq
        Seq[import]     ONLY seq
        Seq[sortImpl]   ONLY seq
        Seq[eq]         ONLY seq
        Seq[law]        ONLY seq
        Seq[globPragma] ONLY seq
        Seq[pragmaItem] ONLY seq
	Seq[proofHead] 	ONLY seq
      	Seq[proofBody] 	ONLY seq
       	Pair[partName, law] ONLY pair
       	Pair[rep, import] ONLY pair
       	Seq[pair[partName,law]] ONLY seq
       	Seq[pair[rep,import]] ONLY seq
       	Nat ONLY nat

        -- Compilationseinheit (Signatur- oder Implementationsteil)
TYPE struct ==  
                mkstruct(
                  head:origin,                  -- Kopf (Name,form.Parameter)
                  imports:seq[import],  -- explizite Importe (IMPORT)
                  signature:seq[partName], -- neue Sig. (SORT,FUN)
                  specsign:seq[pair[partName, law]],  -- spez. FUNs
                  sortImpls:seq[sortImpl], -- Sortenimpl. (DATADef)
                  funImpls:seq[eq],        -- Funktionsimpl. (DEFEq)
                  freeTypes:seq[sortImpl], -- frei aufbauende Typen (TYPEDecl)
                  laws:seq[law],                 -- Eigenschaften (LAWProp)
                  pragmas:seq[globPragma],      -- pragmas der Struktur
                  proofHeads: seq[proofHead],   -- proofHeads der Struktur
                  proofBodies: seq[proofBody],  -- proofBodies der Struktur
                  relations: seq[pair[rep,import]],
                       -- Relationen zu anderen Strukturen, rep zur Info
                  pos:pos,                      -- Position des Schluesselworts
                  part:rep)                    -- sign, impl, extp

        -- IMPORT mit ONLY oder ALLBUT Namenslisten
        -- (COMPLETELY entspricht ALLBUT mit leerer Namensliste)
TYPE import ==  
             mkImport(	only? : bool, 
			origin : origin, 
			namelist : seq[partName])

     -- Herkunft:Strukturname, aktuelle/formale Parameter
TYPE origin ==  
                origin( structIde : rep,        -- Strukturbezeichner
                        pos : pos,              -- Position des ?
                        paramS : option[seq[partName]]) -- Instanz

-- %- ------------------------------------------------------------------------
-- %$Konstanten$

FUN errorOrigin nilOrigin: origin
FUN errorOrigin?:  origin -> bool

FUN errorStruct nilStruct: struct
FUN errorStruct?: struct -> bool

-- %- ------------------------------------------------------------------------
-- %$Textkonversionen$

FUN  `  : struct -> denotation
FUN  `  : import -> denotation
FUN  `  : origin -> denotation

-- %- ------------------------------------------------------------------------
-- %$Vergleiche$

FUN = : import ** import -> bool
FUN = : origin ** origin -> bool

-- %- ------------------------------------------------------------------------
-- %$Update-Funktionen$ 
-- %$$Origin$$
FUN :=_paramS : origin ** option[seq[partName]] -> origin
FUN :=_pos : origin ** pos -> origin
FUN :=_structIde : origin ** rep -> origin

-- %$$Import$$
FUN :=_namelist : import ** seq[partName] -> import
FUN :=_origin : import ** origin -> import

-- %$$Struct$$
FUN :=_part : struct ** rep -> struct
FUN :=_pos : struct ** pos -> struct
FUN :=_relations : struct ** seq[pair[rep,import]] -> struct
FUN :=_proofBodies : struct ** seq[proofBody] -> struct
FUN :=_proofHeads : struct ** seq[proofHead] -> struct
FUN :=_pragmas : struct ** seq[globPragma] -> struct
FUN :=_laws : struct ** seq[law] -> struct
FUN :=_freeTypes : struct ** seq[sortImpl] -> struct
FUN :=_funImpls : struct ** seq[eq] -> struct
FUN :=_sortImpls : struct ** seq[sortImpl] -> struct
FUN :=_specsign : struct ** seq[pair[partName,law]] -> struct
FUN :=_signature : struct ** seq[partName] -> struct
FUN :=_imports : struct ** seq[import] -> struct
FUN :=_head : struct ** origin -> struct
