/* % Sorten fuer die Implementationsteile der abstrakten Syntax.
            Die Textrepraesentation der Gleichungen enthaelt nicht die
              Positionen. Es wird ein Pretty-Printing der Ausdruecke
              versucht, ohne allerdings besonders ausgekluegelt zu sein.
*/

SIGNATURE Impl
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- %- AutorInnen:  mija + carola
-- %- Projekt:     OPAL1-Compiler (Frontend) + property language
-- %- Zweck:       

IMPORT  PartName        ONLY partName:SORT
        Seq[variant]    ONLY seq
        Seq[comp]       ONLY seq
        Seq[expr]       ONLY seq
        Seq[eq]         ONLY seq
        Seq[guard]      ONLY seq
        Seq[partName]           ONLY seq
        Seq[pair[expr,nat]]     ONLY seq
        Pair[expr,nat]          ONLY pair   
        Rep             ONLY rep : SORT
        OcPos             ONLY pos
        Nat             ONLY nat 16
        Option[formula] ONLY option

SORT expr 

-- %Sortenimplementationen (Position des Gleichheitszeichens)
TYPE sortImpl== sortImpl( sort:partName, variants:seq[variant], pos:pos )

-- %Sortenvarianten (Position des Konstruktors)
TYPE variant == variant( cons:partName, test:partName, 
                        comps:seq[comp], pos:pos )

-- %Komponenten der Sortenprodukte (Position des Doppelpunktes)
TYPE comp ==    comp( sel:partName, fct:partName, pos:pos )

-- %Gleichungen (pos ist die Position des Gleichheitszeichens)
TYPE eq ==      eq( left:expr, right:expr, pos:pos )

-- %Vertauscht beide Seiten
FUN revert: eq -> eq

-- %Algebraische Gesetze
TYPE law ==     law(ide:rep, form:formula, pos:pos)

-- %Formeln
TYPE formula == dfd(which:expr, pos:pos)
                equal(left:expr, right:expr, pos:pos)
                ineq(left:expr, right:expr, pos:pos)
                neg(which:formula, pos:pos)
                and(left:formula, right:formula, pos:pos)
                or(left:formula, right:formula, pos:pos)
                imply(left:formula, right:formula, pos:pos)
                eqv(left:formula, right:formula, pos:pos)
                all(vars:seq[partName], which:formula, pos:pos)
                ex(vars:seq[partName], which:formula, pos:pos)
                informal(text: rep, pos:pos)
                none(pos:pos)

/* %simuliert LET-Gleichungen für Formeln.
    Gleichungen werden in Expressions verteilt */
FUN block: seq[eq] ** formula ** pos -> formula

-- %Spezifikationen
TYPE spc == spc(head: eq, pre: option[formula], post: formula, pos:pos)

FUN mkSpecLaw: spc -> law 

-- %Beweise (Kopf und Rumpf)
TYPE proofHead == proofHead(ide: rep, prems: seq[partName], 
                                concl: partName, pos: pos)
TYPE proofBody == proofBody(proof: partName, body: expr, pos: pos)

/* %$Ausdruecke$ */
/* %
@itemize @bullet */
TYPE expr ==    
/* %@item
Fehler oder fehlendes ELSE oder fehlendes Argument */
                none(pos:pos)   
/* %@item
Laufzeitfehler fuer missing patterns */
                rtError(msg:denotation,pos:pos) 
/* %@item
Denotation (Position des Anfuehrungszeichens) */
                den( string:rep, pos:pos )
/* %@item Klammerung (Tuple)
*/
                tuple( elems:seq[expr], pos:pos )
/* %@item
Funktionsapplikation */
                apply( funct:expr, arg:expr, pos:pos )
/* %@item
Fallunterscheidung (else=none bei fehlendem ELSE) */
                cases( guards:seq[guard], else:expr, pos:pos )
/* %@item
Funktionsabstraktion (lokal) */
                lambda( vars:seq[partName], body:expr, pos:pos )
/* %@item
Wert (Namensapplikation) */
                val( object:partName, pos:pos)
/* %@item
Patternbenennung (nur linke Seite einer Funktionsdef.) */
                as( patName:partName, expr:expr, pos:pos )
/* %@item 
Zwischenergebnisvereinbarungen */
                block( defs:seq[eq], body:expr, pos:pos )
/* %@item
Benutzerannotation des Typs eines Ausdrucks */
                typed( expr:expr, fct:partName, pos:pos )
/* %@item
Mixfixapplikation mit Annotationen der Teilausdrücke */
                mix( fix:seq[pair[expr,nat]],pos:pos)
-- %@end itemize

-- %Fallunterscheidung
TYPE guard ==   guard( if:expr, then:expr, pos:pos )

-- %- -------------------------------------------------------------------------
-- %$Textkonversionen$

FUN  `  : sortImpl -> denotation
FUN  `  : variant -> denotation
FUN  `  : comp -> denotation
FUN  `  : eq -> denotation
FUN  `  : law -> denotation
FUN  `  : formula -> denotation
FUN  `  : spc -> denotation
FUN  `  : proofHead -> denotation
FUN  `  : proofBody -> denotation
FUN  `  : expr -> denotation
FUN  `  : guard -> denotation
