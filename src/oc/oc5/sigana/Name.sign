SIGNATURE Name

IMPORT Rep ONLY rep
IMPORT Nat ONLY nat
IMPORT Seq[fullName] ONLY seq

TYPE fullName == fullName(ide: rep, orig: rep, kinst: seq[fullName])
	     var(no: nat, fullKind: fullName)

FUN sort law proof: fullName
FUN sort?: fullName -> bool
FUN stripKind: fullName -> fullName
FUN addKind: fullName ** fullName -> fullName
FUN inst: fullName -> seq[fullName]
FUN kind: fullName -> fullName
FUN mkFct: fullName ** fullName -> fullName
FUN arg res: fullName -> fullName

FUN :=_inst : fullName ** seq[fullName] -> fullName
FUN :=_ide : fullName ** rep -> fullName

FUN ` : fullName -> denotation

FUN = < : fullName ** fullName -> bool

FUN maxVar : fullName -> nat
FUN incr : nat ** fullName -> fullName
FUN monomorph? : fullName -> bool
FUN mkTuple : nat -> fullName
FUN tuple0 : fullName
