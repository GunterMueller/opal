IMPLEMENTATION SigAna

IMPORT  Void	COMPLETELY
	Struct  COMPLETELY
	Stream	COMPLETELY
	Seq	COMPLETELY
	SeqConv	COMPLETELY
	SeqFilter	COMPLETELY
	SeqMap	COMPLETELY
	SeqOfSeq	COMPLETELY
	Set	COMPLETELY
	SetConv	COMPLETELY
        Rep     COMPLETELY
        Pair	COMPLETELY
        Options COMPLETELY
	Match	ONLY asSeq
	NatConv	COMPLETELY
	NameSpace	COMPLETELY
	PostMatchParams COMPLETELY
	InitRelation	COMPLETELY
	GlobSig	COMPLETELY
	Name	COMPLETELY
	Error	COMPLETELY
	Verbose COMPLETELY
	Com	COMPLETELY
	ComCompose 	COMPLETELY

FUN sigAna:     options                 -- Compileraufrufoptionen
        -> pair[struct'Struct,repTab]  -- Struktur und Repraesentationstabelle
                -> com[void]

DEF sigAna(Opts)(Struct & RT) ==
    verb(Opts,subphase,"reading imports  ...") & (\\ _ .
	LET GS == init(RT, Struct) IN
    readInters(Opts, Struct) & (\\Inters.
    succeed(insertInters(Inters, GS)) & (\\GS1.
	(IF impl?(Opts) THEN 
		readOwn(Opts) & (\\Inter. 
		succeed(insertOwnInter(Inter, GS1)))
	ELSE succeed(GS1) FI) & (\\GS2.
    succeed(insertSorts(GS2)) & (\\GS3.
    verb(Opts,subphase,"analyzing signature  ...") & (\\ _ .
    succeed(insertFuns(GS3)) & (\\GS4.
    verb(Opts,subphase,"analyzing parameters  ...") & (\\ _ .
    succeed(matchParams(GS4)) & (\\GS5.
    errors(Opts, errs(GS5)) & (\\ _ .
    verb(Opts,subphase,"dumping signature  ...") & (\\ _ .
	LET Names == asSeq(names(GS5))
	IN
	   (IF cop?("allNames", Opts) THEN 
		writeLine(stdOut, `("", "\n", "")(`)(Names)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	LET OwnNames == (\\N. orig(N) = structIde(head(Struct))) | Names
	IN
	   (IF cop?("ownNames", Opts) THEN
		writeLine(stdOut, `("", "\n", "")(`)(OwnNames)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	   (IF cop?("ownIdes", Opts) THEN
		writeLine(stdOut, `("", "\n", "")(`)(ide * OwnNames)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	   (IF cop?("repTabCount", Opts) THEN
		writeLine(stdOut, `(#(repTab(GS5))))
	   ELSE succeed(nil) FI)
	))))))))))))))
