IMPLEMENTATION SigAna

IMPORT  Void	COMPLETELY
	Struct  COMPLETELY
	Stream	COMPLETELY
	Seq	COMPLETELY
	SeqConv	COMPLETELY
	SeqFilter	COMPLETELY
	SeqMap	COMPLETELY
	SeqOfSeq	COMPLETELY
	Set	COMPLETELY
	SetConv	COMPLETELY
        Rep     COMPLETELY
        Pair	COMPLETELY
        Options COMPLETELY
	NatConv	COMPLETELY
	NameSpace	COMPLETELY
	RepMap	COMPLETELY
	InitRelation	COMPLETELY
	GlobSig	COMPLETELY
	Name	COMPLETELY
	Error	COMPLETELY
	Com	COMPLETELY
	ComCompose 	COMPLETELY

FUN sigAna:     options                 -- Compileraufrufoptionen
        -> pair[struct'Struct,repTab]  -- Struktur und Repraesentationstabelle
                -> com[void]

DEF sigAna(Opts)(Struct & RT) ==
	LET GS == init(RT, Struct) IN
	readInters(Opts, Struct) & (\\Inters.
	(IF impl?(Opts) THEN 
		readOwn(Opts) & (\\Inter. 
		succeed(insertOwnInter(Inter, GS)))
	ELSE succeed(GS) FI) & (\\GS2.
	LET GS3 == insertInters(Inters, GS2)
	    GS4 == insertSorts(GS3)
	    GS5 == insertFuns(GS4)
	    Names == flat(asSeq * codom(names(GS5)))
            OwnNames == (\\N. orig(N) = structIde(head(Struct))) | Names
	    OwnIdes == ide * OwnNames
	    RT2 == repTab(GS5) 	
	IN errors(Opts, errs(GS5)) & (\\ _ .
	   (IF cop?("allNames", Opts) THEN 
		writeLine(stdOut, `("", "\n", "")(`)(Names)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	   (IF cop?("ownNames", Opts) THEN
		writeLine(stdOut, `("", "\n", "")(`)(OwnNames)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	   (IF cop?("ownIdes", Opts) THEN
		writeLine(stdOut, `("", "\n", "")(`)(OwnIdes)) 
	   ELSE succeed(nil) FI) & (\\ _ .
	   (IF cop?("repTabCount", Opts) THEN
		writeLine(stdOut, `(#(RT2))) 
	   ELSE succeed(nil) FI)))))))
