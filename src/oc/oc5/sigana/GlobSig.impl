IMPLEMENTATION GlobSig

IMPORT 
	OcError	COMPLETELY
	Name 	COMPLETELY
	InterOpal	COMPLETELY
	Match	ONLY nameInfo addNames init extend
	Nat	COMPLETELY
	Option  COMPLETELY
	Pair	COMPLETELY
	Rep	COMPLETELY
	Seq	COMPLETELY
	Struct	COMPLETELY


DATA globSig == globSig(
	repTab: repTab,
	struct: struct'Struct,
	imports: interInfo,
	params: seq[fullName],
	errs: err, 
	count: nat,
	names: nameInfo)  

DATA interInfo == {}
	def(rep: rep, interOpal: interOpal,
	     formals: seq[fullName], names: seq[fullName], rest: interInfo)

DEF def(Rep, I, F, N, Rest) ! R == IF R = Rep THEN (I, F, N) ELSE
	Rest ! R FI


FUN :=_repTab : globSig ** repTab -> globSig
DEF :=_repTab(globSig(_,2,3,4,5,c6,7),new) == 
	globSig(new,2,3,4,5,c6,extend(#(new), 7))

DEF :=_struct(globSig(1,_,3,4,5,c6,7),new) == globSig(1,new,3,4,5,c6,7)

DEF :=_params(globSig(1,2,3,_,5,c6,7),new) == globSig(1,2,3,new,5,c6,7)

DEF :=_names(globSig(1,2,3,4,5,c6,_),new) == globSig(1,2,3,4,5,c6,new)

DEF :=_imports(globSig(1,2,_,4,5,c6,7),new) == globSig(1,2,new,4,5,c6,7)

DEF :=_errs(globSig(1,2,3,4,_,c6,7),new) == globSig(1,2,3,4,new,c6,7)

FUN :=_count : globSig ** nat -> globSig
DEF :=_count(globSig(1,2,3,4,5,_,7),new) == globSig(1,2,3,4,5,new,7)



-- -------------------------------------------------------------------
FUN addErrs : globSig ** err -> globSig
DEF addErrs(GS, Err) == :=_errs(GS, errs(GS) + Err) 

FUN addNames : globSig ** seq[fullName] -> globSig
DEF addNames(GS, Names) == 
	:=_names(GS, addNames(names(GS), Names))

FUN init: repTab ** struct'Struct -> globSig
DEF init(RT, Struct) ==
	globSig(RT, Struct, {}, <>, ok, 0, init(#(RT)))
