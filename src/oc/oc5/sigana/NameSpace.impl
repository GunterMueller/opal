IMPLEMENTATION NameSpace

IMPORT 	
	Denotation ONLY	++
	OcError	COMPLETELY
	FullInter ONLY	mkFullNames mkOwnNames
	GlobSig	COMPLETELY
	InterOpal	COMPLETELY
	Match	ONLY deepMatch deepMatchInst asSeq
	Name COMPLETELY
	NameUnify COMPLETELY
	Nat	COMPLETELY
	NatConv	COMPLETELY
	Option  COMPLETELY
	Pair	COMPLETELY
	PartName COMPLETELY
	OcPos	ONLY 	pos `
	Quadruple COMPLETELY
	Rep	ONLY	= arrow rep repTab #
	Seq	COMPLETELY
	SeqConv	COMPLETELY
	SeqFilter	COMPLETELY
	SeqMap		COMPLETELY
	SeqMapEnv	COMPLETELY
	SeqOfSeq	COMPLETELY
	SeqReduce	COMPLETELY
	SeqZip	COMPLETELY
	Struct	COMPLETELY
/*
	Com	COMPLETELY
	ComCompose ONLY &
	OcOptions  COMPLETELY
	OcVerbose COMPLETELY
*/
-- ---------------------------------------------------------------------------
FUN insertOwnInter: interOpal ** globSig -> globSig
DEF insertOwnInter(IO, GS) == 
LET 
    (RT2, ActParams, Names) == mkOwnNames(repTab(GS), IO)
IN :=_params(addNames(:=_repTab(GS, RT2), Names), ActParams)

-- ---------------------------------------------------------------------------
FUN insertInters: seq[interOpal] ** globSig -> globSig
DEF insertInters(IOS, GS) ==
	LET RT == repTab(GS) 
	    (RT2, QuadSeq) == *(mkImport, RT, IOS)
	    Imports == imports(struct(GS))
	    ImportSeqs == partition(\\I1, I2. structIde(origin(I1)) =
				structIde(origin(I2)))(Imports)
	    GS2 == \ (anaImports, GS, ImportSeqs)
            Info == \ (\\Q, I. def(unquad(Q), I), {}, QuadSeq) 
	IN :=_imports(:=_repTab(GS2, RT2), Info)

FUN mkImport : repTab ** interOpal -> 
	repTab ** quad[rep,interOpal,seq[fullName],seq[fullName]]
DEF mkImport(RT, IO) ==
	LET (RT2, Rep, Formals, Names) == mkFullNames(RT, IO)
	IN (RT2, &(Rep, IO, Formals, Names))

-- --------------------------------------------------------------------------
FUN anaImports: seq[import] ** globSig -> globSig
-- PRE ::?(Is) AND structIde(origin(I)) alle gleich
DEF anaImports(Is, GS) ==
	LET 
	    (UninstIs, InstIs) == partition(\\I.nil?(paramS(origin(I))), Is)
	    Err == IF ::?(UninstIs) ANDIF ::?(InstIs) THEN 
		   mixImpErr(UninstIs, InstIs) ELSE ok FI
	IN IF ok?(Err) THEN GS ELSE 
		LET Struct == struct(GS)
		    Imports == imports(Struct)
		    O == structIde(origin(ft(Is))) 
		    NewImports == (\\I. ~(O = structIde(origin(I)))) | Imports
		    NewStruct == :=_imports(Struct, NewImports)
		IN
		addErrs(:=_struct(GS, NewStruct), Err)
	   FI

FUN mixImpErr: seq[import] ** seq[import] -> err
DEF mixImpErr(UninstIs, InstIs) == 
	err(error, "mixed imports\n  uninstantiated" ++
	 `("\n    ", "\n    " , "")
		(\\I. `(pos(origin(I))) ++ `(origin(I)))(UninstIs) ++
	 "\n  instantiated" ++
	 `("\n    ", "\n    " , "")
		(\\I. `(pos(origin(I))) ++ `(origin(I)))(InstIs),
				pos(origin(ft(InstIs))))

-- ---------------------------------------------------------------------------
FUN analyseImports: phase ** globSig -> globSig
DEF analyseImports(Phase, GS) ==
	LET Imports == imports(struct(GS))
	IN \ (anaImports(Phase), GS, Imports)

DATA phase == first cycle last

FUN anaImports: phase -> import ** globSig -> globSig
-- PRE ::?(Is) AND structIde(origin(I)) alle gleich
DEF anaImports(Phase)(I, GS) ==
	LET (_, Formals, AllNames) == imports(GS) ! 
			structIde(origin(I))
	IN anaImport(Phase, Formals, AllNames)(I, GS)

FUN anaImport : phase ** seq[fullName] ** seq[fullName]
		-> import ** globSig -> globSig
DEF anaImport(Phase, Formals, AllNames)(I, GS) ==
	LET Origin == origin(I)
	IN
	IF avail?(paramS(Origin)) THEN
	    IF ~(first?(Phase)) THEN 
		LET ParamS == cont(paramS(Origin))
		    InstS == deepMatchInst(names(GS), Formals, ParamS)
		IN
	            IF last?(Phase) THEN
			LET Pos == pos(Origin)
			    Err == IF <>?(InstS) THEN missErr(ParamS, Pos)
			           ELSE IF ::?(rt(InstS)) THEN 
					ambErr(InstS, ParamS, Pos)
				      ELSE IF forall?(monomorph?, ft(InstS)) 
					THEN ok ELSE 
					varErr(ft(InstS), ParamS, Pos) FI
				   FI FI
			IN addErrs(GS, Err)
		    ELSE IF <>?(InstS) THEN GS -- no instance
		         ELSE IF ::?(rt(InstS)) THEN GS -- ambiguous
		   	      ELSE -- unique Inst
			   IF forall?(monomorph?, ft(InstS)) THEN
			      LET Subst == mkSubst(ft(InstS)) 
	  	    	          InstNames == subst(_, Subst) * AllNames
				  Pairs == zip(&)(InstNames, InstNames)
			      IN match(Pairs, namelist(I), 
							only?(I), GS)
			   ELSE GS FI -- disallowed  generic instance
                              FI -- unique or ambiguous
		         FI -- none or at least one instance
		    FI -- last or cycle					
	    ELSE GS FI -- first
	ELSE -- uninstantiierter Import oder unparametrisierte Struktur
	   IF first?(Phase) THEN
		LET Subst == fixFront(#(Formals))
	    	    InstNames == IF <>?(Formals) THEN AllNames
				ELSE subst(_, Subst) * AllNames FI
		    Pairs == zip(&)(InstNames, AllNames)
			-- check overlapping or emtpy sets
		IN  match(Pairs, namelist(I), only?(I), GS)
	   ELSE GS FI
	FI

FUN missErr : seq[partName] ** pos'OcPos -> err
DEF missErr(S, P) == 
	err(error, "no identification of instance `" ++ 
		`("[", ",", "]")(`)(S) ++ "'" , P)

FUN ambErr : seq[seq[fullName]] ** seq[partName] ** pos'OcPos -> err
DEF ambErr(InstS, S, P) == 
	err(error, "ambiguous identification of instance `" ++ 
		`("[", ",", "]")(`)(S) ++ 
		"'\n  " ++ `(#(InstS)) ++ " matching candidates" ++ 
		`("\n    ", "\n    ", "")(`("[", ",", "]")(`))(InstS), P)

FUN varErr : seq[fullName] ** seq[partName] ** pos'OcPos -> err
DEF varErr(Inst, S, P) == 
	err(error, "illegal generic instance `" ++ `("[", ",", "]")(`)(S) ++ 
		"'\n  matched by `" ++ `("[", ",", "]")(`)(Inst) ++ "'", P)

FUN match: seq[pair[fullName, fullName]] 
	** seq[partName] ** bool ** globSig -> globSig
DEF match(AllNames, <>, Only?, GS) == 
	IF Only? THEN GS ELSE 
		addNames(GS, 2nd * AllNames) FI

DEF match(AllNames, Ft :: Rt, Only?, GS) ==
	LET (Matches, Rest) == partition(match(Ft), AllNames)
	IN match(Rest, Rt, Only?, IF <>?(Matches) THEN
		addErrs(GS,
			err(warning, "void listing of '%s'", 
					`(Ft), pos(Ft)))
	   ELSE IF Only? THEN 
		addNames(GS, 2nd * Matches)
		ELSE GS FI 
	   FI)

FUN match: partName -> pair[fullName, fullName] -> bool
DEF match(P)(F & _) == avail?(match(F, fixVar(P)))
 	
-- ---------------------------------------------------------------------------
FUN insertSorts : globSig -> globSig
DEF insertSorts(GS) == analyseImports(first, analyseFuns(first, GS))

FUN insertFuns : globSig -> globSig
DEF insertFuns(GS) ==
	LET N == #(asSeq(names(GS)))
	    GS3 == analyseFuns(cycle, analyseImports(cycle, GS))
/*	    Opts == EXEC(analyzeOptions)
	    GS3 == EXEC(verb(Opts, subphase, "funs") & (\\ _ .
			succeed(analyseFuns(cycle, GS)) & (\\GS2.
	                verb(Opts, subphase, "imports") & (\\ _ .
			succeed(analyseImports(cycle, GS2))))))
*/	IN IF #(asSeq(names(GS3))) = N THEN 
		analyseImports(last, analyseFuns(last, GS3))
	   ELSE insertFuns(GS3) FI

FUN analyseFuns : phase ** globSig -> globSig
DEF analyseFuns(Phase, GS) ==
LET Struct == struct(GS)
    Orig == structIde(head(Struct))
    Sig == signature(Struct)
IN IF first?(Phase) THEN
	LET Sorts == (\\P. sort?(kind(P))) | Sig
	    Fun == :=_ide(mkTuple(2), arrow)
	    NewNames == mkSort(Orig) * Sorts
	IN addNames(GS, Fun :: NewNames)
   ELSE LET
	    Funs == (\\P. op?(kind(P))) | Sig
	    Fcts == (\\F. fct(kind(F))) * Funs
	    CandFcts ==	zip(&)(deepMatch(names(GS)) * Fcts, Funs)
	    (NoCands, MoreCands) == partition(\\P. <>?(1st(P)), CandFcts)
	    (UniCands, AmbCands) == partition(\\P. <>?(rt(1st(P))), MoreCands)
	    (MonoCands, VarCands) == partition(\\P. monomorph?(ft(1st(P))),
								  UniCands)
	IN IF last?(Phase) THEN
	   LET MissErrs == \ (\\P, E. E + missErr(P), ok, NoCands)
               AmbErrs == \ (\\P, E. E + ambErr(P), MissErrs, AmbCands)
               VarErrs == \ (\\P, E. E + varErr(P), AmbErrs, VarCands)
	   IN addErrs(GS, VarErrs)
	   ELSE -- cycle
	     LET OneCands == (\\P. mkFun(ide(2nd(P)), Orig, ft(1st(P)))) 
				* MonoCands
	     IN addNames(GS, OneCands)
	   FI
   FI

FUN ambErr : pair[seq[fullName], partName] -> err
DEF ambErr(Cands & P) == LET Fct == fct(kind(P)) IN
	err(error, "ambiguous identification of `" ++ `(Fct) ++ 
		"'\n  " ++ `(#(Cands)) ++ " matching candidates" ++ 
		`("\n    ", "\n    ", "")(`)(Cands), pos(Fct))

FUN missErr : pair[seq[fullName], partName] -> err
DEF missErr(<> & P) == LET Fct == fct(kind(P)) IN
	err(error, "no identification of `" ++ `(Fct) ++ 
		"'", pos(Fct))
	 
FUN varErr : pair[seq[fullName], partName] -> err
DEF varErr(F :: <> & P) == LET Fct == fct(kind(P)) IN
	err(error, "illegal generic `" ++ `(Fct) ++ 
		"'\n  matched by `" ++ `(F) ++ "'", pos(Fct))

FUN mkFun : rep ** rep ** fullName -> fullName
DEF mkFun(Ide, Orig, Fct) ==
	fullName(Ide, Orig, %(Fct))

FUN mkSort : rep -> partName -> fullName
-- PRE sort?(P) , not generated?(ide(P))
DEF mkSort(Orig)(P) ==
	fullName(ide(P), Orig, %(sort))


-- --------------------------------------------------------------------------
