IMPLEMENTATION NameUnify

IMPORT  Name COMPLETELY
        Nat COMPLETELY
        Option COMPLETELY
        OptionMap COMPLETELY
        Pair COMPLETELY
        PartName COMPLETELY
        Rep COMPLETELY
        Seq COMPLETELY    
        SeqMap COMPLETELY    
        SeqZip COMPLETELY    

DATA frontSubst == abs(rep: seq[pair[nat,fullName]])

FUN empty: frontSubst
DEF empty == abs(<>)

FUN add: nat ** fullName ** frontSubst -> frontSubst
DEF add(N, F, abs(Subst)) == abs(N & F :: Subst)

FUN unify: fullName ** fullName -> option[frontSubst]
DEF unify == unify(empty)

FUN unify: frontSubst -> fullName ** fullName -> option[frontSubst]
DEF unify(S)(fullName(I1, O1, R1), fullName(I2, O2, R2)) == 
        IF I1 = I2 THEN 
                IF O1 = O2 THEN
                        unify(S)(R1, R2)
                ELSE nil FI
        ELSE nil FI

DEF unify(S)(var(N, K1), F AS fullName(I2, O2, K2 :: R)) == 
        LET Opt == find?(\\P. 1st(P) = N, rep(S))
        IN
        IF avail?(Opt) THEN unify(S)(updKind(2nd(cont(Opt)), K1), F)
        ELSE IF N occursIn F THEN nil
             ELSE unify(add(N, fullName(I2, O2, R), S))(K1, K2)
             FI
        FI 

DEF unify(S)(F AS fullName(I1, O1, K1 :: R), var(N, K2)) == 
        LET Opt == find?(\\P. 1st(P) = N, rep(S))
        IN
        IF avail?(Opt) THEN unify(S)(F, updKind(2nd(cont(Opt)), K2))
        ELSE IF N occursIn F THEN nil
             ELSE unify(add(N, fullName(I1, O1, R), S))(K1, K2)
             FI
        FI 

DEF unify(S)(V1 AS var(N1, K1), V2 AS var(N2, K2)) == 
        LET Opt1 == find?(\\P. 1st(P) = N1, rep(S))
            Opt2 == find?(\\P. 1st(P) = N2, rep(S))
        IN
        IF avail?(Opt1) THEN unify(S)(updKind(2nd(cont(Opt1)), K1), V2)
        IF avail?(Opt2) THEN unify(S)(V1, updKind(2nd(cont(Opt2)), K2))
        ELSE IF N1 occursIn K2 THEN nil
             IF N2 occursIn K1 THEN nil
             ELSE IF N1 < N2 THEN 
                        unify(add(N1, var(N2, noKind), S))(K1, K2)
                  IF N2 < N1 THEN 
                        unify(add(N1, var(N2, noKind), S))(K1, K2)
                  ELSE unify(S)(K1, K2)
                  FI
             FI
        FI 

FUN noKind: fullName
DEF noKind == fullName(nilRep, nilRep, <>)

FUN updKind: fullName ** fullName -> fullName
DEF updKind(F, K) == IF var?(F) THEN var(no(F), K) ELSE addKind(F, K) FI

FUN occursIn: nat ** fullName -> bool
DEF occursIn(N, F AS fullName(_,_,S)) == 
        IF maxVar(F) = 0 THEN false 
        ELSE exist?(occursIn(N, _), S) FI
DEF occursIn(N, var(M, K)) == IF N = M THEN true
        ELSE occursIn(N, K) FI

FUN unify: frontSubst -> seq[fullName] ** seq[fullName] -> option[frontSubst]
DEF unify(S)(<>, <>) == avail(S)
DEF unify(_)(_, <>) == nil
DEF unify(_)(<>, _) == nil
DEF unify(S)(F1 :: R1, F2 :: R2) ==
        LET OptS == unify(S)(F1, F2)
        IN IF nil?(OptS) THEN nil
           ELSE unify(cont(OptS))(R1, R2) FI

FUN o : frontSubst ** frontSubst -> frontSubst
DEF abs(S1) o abs(S2) == abs(S1 ++ S2)

FUN subst : fullName ** frontSubst -> fullName
FUN rsubst: fullName ** seq[pair[nat, fullName]] -> fullName
DEF subst(F, abs(S)) == rsubst(F, revert(S))
DEF rsubst(F AS fullName(I, O, R), S) == 
        IF <>?(S) ORIF maxVar(F) = 0 THEN F ELSE
        fullName(I, O, rsubst(_, S) * R) FI
DEF rsubst(var(N, K), <>) == var(N, K)
DEF rsubst(var(N, K), S AS (M & F :: Rt)) ==
        LET Kind == rsubst(K, S) 
        IN IF N = M THEN rsubst(updKind(F, Kind), Rt)
        ELSE rsubst(var(N, Kind), Rt) FI

FUN match: fullName ** partName -> option[partName]
DEF match(fullName(I, O, Kinst), 
        P AS partName(Ide, Orig, ParamS, _, Kind, _)) ==
        IF generated?(Ide) ORIF I = Ide
           THEN IF nil?(Orig) ORIF avail?(Orig) ANDIF O = cont(Orig)
                   THEN IF (IF none?(Kind) THEN true
                            ELSE IF sort?(Kind) ANDIF ::?(Kinst) 
                                ANDIF sort?(ft(Kinst)) THEN true
                            ELSE IF op?(Kind) ANDIF ::?(Kinst)
                                ANDIF avail?(match(ft(Kinst), fct(Kind)))
                            THEN true ELSE false FI FI FI)     
                           THEN IF nil?(ParamS) ORIF
                                avail?(ParamS) ANDIF
                                 #(Kinst) = #(cont(ParamS)) + 1
                                 ANDIF forall?(\\Pair.
                                        avail?(match(unpair(Pair))),
                                        zip(&)(rt(Kinst), cont(ParamS)))
                                   THEN avail(P)
                                ELSE nil FI
                        ELSE nil FI
                ELSE nil FI
        ELSE nil FI

DEF match(var(_, K), 
        P AS partName(_, _, _, _, Kind, _)) ==
        IF (IF none?(Kind) THEN true
                            ELSE IF sort?(Kind) ANDIF sort?(K) THEN true
                            ELSE IF op?(Kind) ANDIF avail?(match(K, fct(Kind)))
                            THEN true ELSE false FI FI FI) 
        THEN avail(P) ELSE nil FI

FUN fixFront: nat -> frontSubst
DEF fixFront(0) == abs(<>)
DEF fixFront(succ(N)) == add(succ(N), noKind, fixFront(N))

FUN mkSubst: nat ** seq[fullName] -> frontSubst
DEF mkSubst(_, <>) == abs(<>)
DEF mkSubst(N, Ft :: Rt) == add(N, stripKind(Ft), 
        mkSubst(N + 1, Rt))

FUN mkSubst: seq[fullName] -> frontSubst
DEF mkSubst(S) == mkSubst(1, S)

FUN fixVar: partName -> partName
DEF fixVar(partName(Ide, Orig, ParamS, InstPos, Kind, Pos)) ==
        IF generated?(Ide) THEN
                partName(nilRep, avail(nilRep), avail(<>), InstPos, 
                        fixVar(Kind), Pos)
        ELSE partName(Ide, Orig, (fixVar * _) * ParamS, InstPos,
                        fixVar(Kind), Pos)
        FI

FUN fixVar: kind -> kind
DEF fixVar(K) == IF op?(K) THEN op(fixVar(fct(K))) ELSE K FI
