SIGNATURE RepMap[codom: SORT]

IMPORT Nat              ONLY nat
       Option[codom]    ONLY option
       Pair[rep, codom] ONLY pair
       Rep		ONLY rep
       Seq[codom]       ONLY seq
       Seq[pair]        ONLY seq



-- %$Parameter$
/* % @code{rep} is the type of the domain, @code{codom} the type of
the codomain. */
SORT codom

-- %$The Type Itself$
SORT map

-- %$Nonfree Constructors$
-- %The empty map.
FUN {}          : map   
-- %(Re)define map at point.
FUN def         : rep ** codom ** map -> map
    undef       : rep ** map -> map

-- %In @code{upd (d, f, m)}, redefine @code{m} at @code{d} by @code{f(m!d)}
FUN upd         : rep ** (codom -> codom) ** map -> map 

-- %$Accessing Codom - Elements$
-- %@code{m!d}: give associated value to @code{d} in @code{m} which must exist
FUN !           : map ** rep -> codom           

/* %@code{m ?! d}: give associated value to @code{d} in @code{m}, if
it exists, else @code{nil}  */
FUN !?          : map ** rep -> option[codom]   

-- %$Information About a Map$

-- %test for empty map
FUN {}?         : map -> bool
-- % test for definedness
FUN def?        : rep ** map -> bool

FUN * : (codom -> codom) ** map -> map

FUN | : (codom -> bool) ** map -> map

FUN asMap: seq[pair] -> map

FUN codom: map -> seq[codom]
