IMPLEMENTATION RepMap

IMPORT Nat ONLY nat
       NatMap COMPLETELY
       NatMapConv ONLY asNatMap 
       NatMapMap ONLY *
       NatMapFilter ONLY |
       Option[codom] ONLY option
       Pair COMPLETELY
       Rep COMPLETELY
       Seq ONLY seq
       SeqMap ONLY *

DATA map == abs(rep: natMap[codom])

FUN {}          : map   
-- %(Re)define map at point.
DEF {} == abs({})

FUN def         : rep ** codom ** map -> map
DEF def(R,C,abs(M)) == abs(def(ord(R),C,M))

FUN undef       : rep ** map -> map
DEF undef(R,abs(M)) == abs(undef(ord(R), M))

-- %In @code{upd (d, f, m)}, redefine @code{m} at @code{d} by @code{f(m!d)}
FUN upd         : rep ** (codom -> codom) ** map -> map 
DEF upd(R, F, abs(M)) == abs(upd(ord(R), F, M))

-- %$Accessing Codom - Elements$
-- %@code{m!d}: give associated value to @code{d} in @code{m} which must exist
FUN !           : map ** rep -> codom           
DEF abs(M) ! R == M!ord(R)

/* %@code{m ?! d}: give associated value to @code{d} in @code{m}, if
it exists, else @code{nil}  */
FUN !?          : map ** rep -> option[codom]   
DEF abs(M) !? R == M!?ord(R)

-- %$Information About a Map$

-- %test for empty map
FUN {}?         : map -> bool
DEF {}?(abs(M)) == {}?(M)

-- % test for definedness
FUN def?        : rep ** map -> bool
DEF def?(R, abs(M)) == def?(ord(R), M)

-- %cardinality of @code{dom(m)}
FUN #           : map -> nat                    
DEF #(abs(M)) == #(M)

FUN * : (codom -> codom) ** map -> map
DEF F * abs(M) == abs(F * M)

FUN | : (codom -> bool) ** map -> map
DEF P | abs(M) == abs((\\ _, C.P(C)) | M)

FUN asMap: seq[pair[rep, codom]] -> map
DEF asMap(S) == abs(asNatMap((\\P. ord(1st(P)) & 2nd(P)) * S))

FUN codom: map -> seq[codom]
DEF codom(abs(M)) == codom(M)