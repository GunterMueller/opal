IMPLEMENTATION Driver
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-11 17:33:14 $ ($Revision: 1.1.1.1 $)

IMPORT 	Void		COMPLETELY
	Pair		COMPLETELY
	Triple		COMPLETELY
	Seq		ONLY seq
	Com 		COMPLETELY
	ComCompose	COMPLETELY
	Stream		COMPLETELY

	Verbose		COMPLETELY
	Options		COMPLETELY
	OcExit		ONLY exit languageError
	OcSetup		COMPLETELY
	OcStream	COMPLETELY

	Rep		ONLY repTab
	Token		ONLY token:SORT
	Struct		ONLY struct imports import

	Scanner		ONLY scan
	Parser		ONLY parse
	AbsyIO		ONLY readAbsy writeAbsy

	SigAna		COMPLETELY

-- ---------------------------------------------------------------------------

FUN oc5: com[void]

DEF oc5 ==
  init(oc1) ;
  (\\a.IF a fail? THEN exit(fail(error(a)))
       IF a okay? THEN
         LET options == data(a) IN compile(options) ; finit(options)
       FI)

-- ---------------------------------------------------------------------------

FUN compile: options -> com[void]

DEF compile(options) == 
	syntaxAna(options) & (\\StructRep.
	sigAna(options)(StructRep))

-- ---------------------------------------------------------------------------
FUN syntaxAna: options -> com[pair[struct,repTab]]

DEF syntaxAna(options) ==
  verb(options,phase,syntaxAnaPhase) ;
  (\\ _ .scan(options) & parse(options))

-- ===========================================================================
-- Texte

FUN syntaxAnaPhase contextAnaPhase: denotation
DEF syntaxAnaPhase == "syntax checking ..."
DEF contextAnaPhase == "context checking ..."
