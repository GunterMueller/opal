-- ============================================================================
-- Autor:	af
-- Projekt:	OPAL1-Compiler
-- ============================================================================

IMPLEMENTATION NameTranslation
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-22 12:37:02 $ ($Revision: 1.1 $)

IMPORT	Nat		COMPLETELY

	Denotation	ONLY =

	An		COMPLETELY
        SourceAn	COMPLETELY
	Ide		ONLY ide:SORT local global
		     		origin:SORT origin:nat->origin target

	InterOpal       COMPLETELY      	
        InterOpalAccess COMPLETELY


	NatMap[ide] 	ONLY natMap {} def ! 

        Map		ONLY ! map

	Builtin 	ONLY bool true false true? false? and or ~ = |=
			     denotation tl <| 
			     ABORT INLINE

-- ----------------------------------------------------------------------------

FUN nullIde: ide

DEF nullIde == local(0)

FUN ide: interOpal -> name -> ide

DEF ide(IO)(name) ==
  IF local?(name) THEN local(no(ident(name)))
  ELSE
    IF param?(IO, name) THEN parameterIde(paramNo(IO, name))
    OTHERWISE
    IF internal?(name) THEN internalIde(IO)(name)
    IF external?(name) THEN externalIde(IO)(name)
    FI
  FI

FUN parameterIde: nat -> ide

DEF parameterIde(no) == local(no)

FUN internalIde: interOpal -> name -> ide

DEF internalIde(_)(name) == global(no(ident(name)),target)

FUN externalIde: interOpal -> name -> ide

DEF externalIde(IO)(name) ==
  LET O == origin(name)
      N == no(ident(name))
  IN
  IF no(O) = 1 THEN -- BOOL 
    predefBoolMap ! N
  IF no(O) = 2 THEN -- DENOTATION 
    predefDenotationMap ! N
  IF symbol(structs(IO) ! O) = "ABORT" THEN
    ABORT
  IF symbol(structs(IO) ! O) = "INLINE" THEN
    INLINE
  ELSE
    global(N, origin(no(O)))
  FI

FUN predefBoolMap predefDenotationMap : natMap[ide]
-- see interOpalDump of BOOL and DENOTATION
DEF predefBoolMap ==
    def(1,bool,
    def(2,false,
    def(3,false?,
    def(4,true,
    def(5,true?,
    def(6,~,
    def(7,and,
    def(8,or,
    def(9,=,
    def(10,|=, 
	{} ))))))))))

DEF predefDenotationMap ==
    def(1,denotation,
    def(2,tl,
    def(3,<|,
	{} )))

-- ------------------------------------------

FUN posAn: pos'InterOpal -> an

DEF posAn(p) == none set pos(p`)

FUN ` : pos'InterOpal -> pos'SourceAn

DEF p` == IF unknown?(p) or part?(p) THEN pos(1, 1)
          ELSE pos(row(p), col(p)) FI 
