-- ============================================================================
-- Autor:       af
-- Projekt:     OPAL1-Compiler
-- ============================================================================

IMPLEMENTATION FctTranslation
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-08 18:20:47 $ ($Revision: 1.5 $)

IMPORT  Nat                     ONLY nat 0
        Seq                     COMPLETELY
        SeqMap                  COMPLETELY
        SeqReduce               COMPLETELY
        SeqFilter               ONLY |
        String                  ONLY string

        TypeAn                  COMPLETELY
        Ide                     ONLY ide:SORT
        Builtin                 ONLY tuple

        InterOpal       COMPLETELY
        InterOpalAccess COMPLETELY

        ParameterTranslation    ONLY info:SORT sortParamTypes
        NameTranslation         ONLY ide

        ABORT                   ONLY ABORT
        Denotation              ONLY = ++

-- ----------------------------------------------------------------------------

FUN nullType: type

DEF nullType == ide(tuple(0))

-- ----------------------------------------------------------------------------
FUN type: interOpal**info -> kind -> type
DEF type(_, _)(sort) == ABORT("type'FctTranslation: not defined for sort")
DEF type(_, _)(cart(_)) == ABORT("type'FctTranslation: not defined for tuple")
DEF type(IO, info)(fct(f)) == type(IO, info)(f)
DEF type(IO, info)(other(id, _)) ==
  IF id = "any" THEN
    type(IO, info)(bool(IO))  -- Typ ist eigentlich egal
  ELSE ABORT("type'FctTranslation: not defined for other/" ++ id)
  FI

FUN bool: interOpal -> fct
DEF bool(IO) ==
  LET BOOL == (\\s. symbol(s) = "BOOL") | structs(IO)
  IN
  IF BOOL <>? THEN ABORT("bool'FctTranslation: no structure BOOL ?!")
  ELSE
    LET bools == (\\o. symbol(o) = "bool" and
                       (kind(o) sort?)) | objects(ft(BOOL))
    IN
    IF bools <>? THEN ABORT("bool'FctTranslation: no sort bool ?!")
    ELSE
      sort(name(ident(ft(bools)), origin(ft(BOOL)), none))
    FI
  FI

-- ----------------------------------------------------------------------------

FUN type: interOpal**info -> fct -> type

DEF type(IO,info)(sort(name)) == type(IO,info)(name)

DEF type(IO,info)(funct(cart(<>),cart(ress))) ==
  LET argType  == nullType
      resTypes == type(IO,info)*ress
  IN fun(argType%,tuple(resTypes))

DEF type(IO,info)(funct(cart(args),cart(ress))) ==
  LET argTypes == type(IO,info)*args 
      resTypes == type(IO,info)*ress
  IN fun(argTypes,tuple(resTypes))

DEF type(IO,info)(funct(cart(<>),res)) ==
  LET argType  == nullType
      resType  == type(IO,info)(res)
  IN fun(argType%,resType)

DEF type(IO,info)(funct(cart(args),res)) ==
  LET argTypes == type(IO,info)*args 
      resType  == type(IO,info)(res)
  IN fun(argTypes,resType)

DEF type(IO,info)(funct(arg,cart(ress))) ==
  LET argType  == type(IO,info)(arg)
      resTypes == type(IO,info)*ress
  IN fun(argType%,tuple(resTypes))

DEF type(IO,info)(funct(arg,res)) ==
  LET argType  == type(IO,info)(arg)
      resType  == type(IO,info)(res)
  IN fun(argType%,resType)

-- ----------------------------------------------------------------------------

FUN tuple: seq[type] -> type
-- sequence may not contain exactly one element

DEF tuple(types) == optSpec(ide(tuple(types#)),types)

-- ----------------------------------------------------------------------------

FUN type: interOpal**info -> name -> type

DEF type(IO,info)(name) ==
  LET baseType == ide(ide(IO)(name))
  IN IF param?(IO, name) THEN baseType
     OTHERWISE
     IF name internal? THEN optSpec(baseType,sortParamTypes(info))
     IF name external? THEN
       optSpec(baseType,
               type(IO,info)*((\\n.sort?(IO,n))| origInst(IO,name)))
     FI

-- ----------------------------------------------------------------------------

FUN optSpec: type**seq[type] -> type

DEF optSpec(base,<>) == base
DEF optSpec          == spec

FUN optFun: seq[type]**type -> type

DEF optFun(<>,type) == type
DEF optFun          == fun

FUN optGen: seq[ide]**type -> type

DEF optGen(<>,type) == type
DEF optGen          == gen

