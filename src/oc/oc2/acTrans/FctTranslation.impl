-- ============================================================================
-- Autor:	af
-- Projekt:	OPAL1-Compiler
-- ============================================================================

IMPLEMENTATION FctTranslation
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-22 12:36:58 $ ($Revision: 1.1 $)

IMPORT	Nat			ONLY nat 0
	Seq			COMPLETELY
	SeqMap			COMPLETELY
	SeqReduce		COMPLETELY
	SeqFilter		ONLY |

	TypeAn			COMPLETELY
	Ide			ONLY ide:SORT
	Builtin			ONLY tuple

	InterOpal	COMPLETELY
        InterOpalAccess COMPLETELY

	ParameterTranslation	ONLY info:SORT sortParamTypes
	NameTranslation		ONLY ide

	DEBUG			ONLY PRINT string
	ABORT			ONLY ABORT

-- ----------------------------------------------------------------------------

FUN nullType: type

DEF nullType == ide(tuple(0))

-- ----------------------------------------------------------------------------

FUN type: interOpal**info -> fct -> type

DEF type(IO,info)(sort(name)) == type(IO,info)(name)

DEF type(IO,info)(funct(cart(<>),cart(ress))) ==
  LET argType  == nullType
      resTypes == type(IO,info)*ress
  IN fun(argType%,tuple(resTypes))

DEF type(IO,info)(funct(cart(args),cart(ress))) ==
  LET argTypes == type(IO,info)*args 
      resTypes == type(IO,info)*ress
  IN fun(argTypes,tuple(resTypes))

DEF type(IO,info)(funct(cart(<>),res)) ==
  LET argType  == nullType
      resType  == type(IO,info)(res)
  IN fun(argType%,resType)

DEF type(IO,info)(funct(cart(args),res)) ==
  LET argTypes == type(IO,info)*args 
      resType  == type(IO,info)(res)
  IN fun(argTypes,resType)

DEF type(IO,info)(funct(arg,cart(ress))) ==
  LET argType  == type(IO,info)(arg)
      resTypes == type(IO,info)*ress
  IN fun(argType%,tuple(resTypes))

DEF type(IO,info)(funct(arg,res)) ==
  LET argType  == type(IO,info)(arg)
      resType  == type(IO,info)(res)
  IN fun(argType%,resType)

-- ----------------------------------------------------------------------------

FUN tuple: seq[type] -> type
-- sequence may not contain exactly one element

DEF tuple(types) == optSpec(ide(tuple(types#)),types)

-- ----------------------------------------------------------------------------

FUN type: interOpal**info -> name -> type

DEF type(IO,info)(name) ==
  LET baseType == ide(ide(IO)(name))
  IN IF param?(IO, name) THEN baseType
     OTHERWISE
     IF name internal? THEN optSpec(baseType,sortParamTypes(info))
     IF name external? THEN
       optSpec(baseType,
               type(IO,info)*((\\n.sort?(IO,n))| origInst(IO,name)))
     FI

-- ----------------------------------------------------------------------------

FUN optSpec: type**seq[type] -> type

DEF optSpec(base,<>) == base
DEF optSpec          == spec

FUN optFun: seq[type]**type -> type

DEF optFun(<>,type) == type
DEF optFun          == fun

FUN optGen: seq[ide]**type -> type

DEF optGen(<>,type) == type
DEF optGen          == gen

