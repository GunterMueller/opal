-- Adapted to new library "Bibliotheca Opalica"
-- Version of January, the 17, 1994


IMPLEMENTATION Driver
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- subject: driver
-- project: acc/driver
-- author:  ws+wg 2-92

IMPORT  
        Denotation      ONLY ++
        String          ONLY string
        StringConv      ONLY `
        Nat             ONLY nat 0 1
        Char            ONLY char  -- COMPLETELY
        Compose         COMPLETELY
        Com             ONLY ans:SORT com data yield exit okay fail okay? error
        Void            ONLY void nil   
        Option          COMPLETELY
        Pair            COMPLETELY
        Triple          COMPLETELY

IMPORT  OcOptions         ONLY options analyzeOptions myInterOpalFile myStruct
        OcVerbose         COMPLETELY
        ComCompose      COMPLETELY
        Stream          ONLY output stdOut stdErr
        OcBinStream     ONLY optread
        OcSetup         COMPLETELY
        OcExit          ONLY ioError languageError exit
        OcError           ONLY err:SORT errors

IMPORT  NatMap          ONLY natMap def

IMPORT  PreparedOptions ONLY popts prepareOptions options
        Ac              ONLY unit:SORT
        InterOpal       ONLY interOpal:SORT ioTypeKey
        AcDump          ONLY acDump
        DumpToFile      ONLY dumpToFile
        Ic              ONLY mod:SORT
        Translation     COMPLETELY

IMPORT  Optimize        ONLY optimize
        Translate       ONLY translate
        Generate        ONLY generate
        
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- The base command

DEF oc2 == (init(oc2) & drive) ; exit'OcExit


FUN drive : options -> com[void]
DEF drive(DraftOpts) ==
    LET Opts == prepareOptions(DraftOpts)
        oOpts == options(Opts)
    IN
    optread(oOpts,myInterOpalFile(oOpts), ioTypeKey) & (\\Inter?.
    IF avail?(Inter?) THEN
        LET Inter == cont(Inter?)
        IN (unit(oOpts)(Inter) ; 
        dumpToFile(Opts,"AnaFile",\\U.acDump(oOpts,U))) & (\\ AnaUnit.
           driveSingleProc(Opts, AnaUnit)
        )
    ELSE
        yield(fail(ioError)) 
    FI
   )
 


FUN driveSingleProc : popts ** unit -> com[void]
DEF driveSingleProc(Opts, AnaUnit) == 
        optimize(Opts)(AnaUnit)                         & (\\ OptUnit_+_Err.
        failOnError(Opts,2nd(OptUnit_+_Err))            & (\\ _ .
        translate(Opts)(1st(OptUnit_+_Err))             & (\\ TransMod_+_Err .
        failOnError(Opts,2nd(TransMod_+_Err))           & (\\ _ .
        generate(Opts)(1st(OptUnit_+_Err),
                       1st(TransMod_+_Err))             & (\\ GenErr .
        failOnError(Opts,GenErr)                        & (\\ _ .
        finit(options(Opts))(okay(nil))
        ))))))


FUN failOnError: popts ** err -> com[void]
DEF failOnError(Opts,Err) ==
    errors(options(Opts),Err) & (\\Ok? .
    IF Ok? THEN yield(okay(nil)) 
           ELSE finit(options(Opts))(fail(languageError))  FI
    )

