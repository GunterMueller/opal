IMPLEMENTATION Macros
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:49 $ ($Revision: 1.1.1.1 $)

/* %-
-- subject: macros for C code generation
-- project: acc
-- author:  wg 6-92
*/

IMPORT  Nat             COMPLETELY
        NatConv         ONLY ` asChar
        Char            ONLY char = ! newline printable?
        PrintableChar   ONLY \ dblquote rsngquote dot * / n underscore ? a b f r v 0
        Denotation      COMPLETELY
        String          COMPLETELY
        StringConv      ONLY `
        Seq             COMPLETELY
        SeqMap          ONLY *
        SeqReduce       ONLY /
        SeqZip          COMPLETELY
        Pair            COMPLETELY
        Set             ONLY set arb excl 
        Bag[nat,<]      ONLY bag {} incl
        BagConv[nat,<]  ONLY asSeqPair
        SetReduce       ONLY /
        ABORT           ONLY ABORT

IMPORT  Option ONLY option
        Void ONLY void

IMPORT  Ide             ONLY ide # :ide->nat
        Store           COMPLETELY
        SourceAn        ONLY pos:SORT line

IMPORT  BoxedText       COMPLETELY
        SymbolMap       ONLY symbolMap
       DEBUG ONLY FIELD?
       Latin1 ONLY printable?'Latin1
       Greek ONLY printable?'Greek
       CharConv ONLY asNat


-- FUN underscore: char
-- DEF underscore == !("_")

-- %$Constants$

-- %$$Plain C$

FUN EQU SWITCH CASE DEFAULT BREAK cIF cELSE FOREVER CONTINUE SAND SOR
    CONST REGISTER SEMI OPEN CLOSE COLON BECOMES COMMA QUEST DQUOTE
    BEGIN END FALSE ADR REF BLANK DEFINE INCLUDE IFNDEF ENDIF
    LINE VISITED EXTERN STATIC VOID RETURN : box
DEF EQU == word("==")
DEF SAND == word("&&")
DEF SOR == word("||")
DEF SWITCH == word("switch")
DEF CASE == word("case ")
DEF DEFAULT == word("default: ")
DEF BREAK == word("break;")
DEF cIF == word("if")
DEF cELSE == word("else")
DEF FOREVER == word("for(;;)")
DEF CONTINUE == word("continue;")
DEF CONST == word("const ")
DEF REGISTER == word("register ")
DEF SEMI == word(";")
DEF OPEN == word("(")
DEF CLOSE == word(")")
DEF COLON == word(":")
DEF BECOMES == word("=")
DEF COMMA == word(",")
DEF QUEST == word("?")
DEF DQUOTE == word("""")
DEF BEGIN == word("{")
DEF END == word("}")
DEF ADR == word("&")
DEF REF == word("*")
DEF FALSE == word("0")
DEF BLANK == word(" ")
DEF DEFINE == word("#define ")
DEF INCLUDE == word("#include ")
DEF LINE == word("#line ")
DEF IFNDEF == word("#ifndef ")
DEF ENDIF == word("#endif")
DEF VISITED == word("static int visited=0; if(visited) return; visited=1;")
DEF EXTERN == word("extern ")
DEF STATIC == word("static ")
DEF VOID == word("void ")
DEF RETURN == word("return ")

-- %$$Files$

FUN RTS BUILTINSUFFIX FOREIGNSUFFIX SOURCESUFFIX : box
DEF RTS == word("BUILTIN.h")
DEF BUILTINSUFFIX == word(".h")
DEF FOREIGNSUFFIX == word(".h")
DEF SOURCESUFFIX == word(".impl")

-- %$$Name Components$

FUN GLOBALCODE ENTRYCODE MACROCODE 
    LOCALCODE TMPCODE TMCCODE 
    EXCLCODE RESULTCODE INITCODE CONSTINITCODE INCLUDEDCODE TUPFIELDCODE 
    CLOSENTRYCODE UNDERSCORE 
    CONSTAUXCODE : box
DEF CONSTAUXCODE == word("___")
DEF GLOBALCODE == word("__")
DEF ENTRYCODE == word("_")
DEF MACROCODE == word("")
DEF LOCALCODE == word("x")
DEF TMPCODE == word("t")
DEF TMCCODE == word("p")
DEF EXCLCODE == word("x_")
DEF RESULTCODE == word("r")
DEF INITCODE == word("init_")
DEF CONSTINITCODE == word("init_const_")
DEF INCLUDEDCODE == word("_included")
DEF TUPFIELDCODE == word(".c")
DEF CLOSENTRYCODE == word("_c")
DEF UNDERSCORE == word("_")

-- %$$RTS types$

FUN OBJ OBJPTR FLAG TUP : box
DEF OBJ == word("OBJ")
DEF OBJPTR == word("OBJ*")
DEF FLAG == word("FLAG")
DEF TUP == word("TUP")

-- %$$RTS macros for data types$

FUN PRIM PRIM1 ISPRIM TAGPRIM ISTAGPRIM : box
DEF PRIM == word("PRM")
DEF PRIM1 == word("PRM1")
DEF ISPRIM == word("ISPRM")
DEF TAGPRIM == word("TGPRM")
DEF ISTAGPRIM == word("ISTGPRM")

FUN PROD PROD1 PRODFLAT PROD1FLAT FIELD FIELD1 ISPROD TAGPROD ISTAGPROD
    CHANGETAG ISEXCL COPYPROD FREEPROD DISPPROD DISPPRODFLAT DECRPROD 
    NIL DEMAND DEMAND1 
    REUSE REUSEPRODFLAT REUSEPROD : box
DEF PROD == word("PRD")
DEF PROD1 == word("PRD1")
DEF PRODFLAT == word("PRDF")
DEF PROD1FLAT == word("PRD1F")
DEF FIELD == word("FLD")
DEF FIELD1 == word("FLD1")
DEF ISPROD == word("ISPRD")
DEF TAGPROD == word("TGPRD")
DEF ISTAGPROD == word("ISTGPRD")
DEF DEMAND == word("DMD")
DEF DEMAND1 == word("DMD1")
DEF CHANGETAG == word("CHGTG")
DEF ISEXCL == word("EXPRD")
DEF COPYPROD == word("CPPRD")
DEF FREEPROD == word("FRPRD")
DEF DISPPROD == word("DSPRD")
DEF DISPPRODFLAT == word("DSPRDF")
DEF DECRPROD == word("DCPRD")
DEF NIL == word("NIL")
DEF REUSE == word("RSOME")
DEF REUSEPRODFLAT == word("RPRDF")
DEF REUSEPROD == word("RPRD")

FUN TAGSOME ISTAGSOME : box
DEF TAGSOME == word("TGOBJ")
DEF ISTAGSOME == word("ISTGOBJ")


-- %$$RTS macros for closures$

FUN METHOD FREECLOS COPYCLOS DISPCLOS DISPCLOSFLAT DECRCLOS CLOS LCLOS : box
DEF METHOD == word("METHOD")
DEF FREECLOS == word("FRCLS")
DEF COPYCLOS == word("CPCLS")
DEF DISPCLOS == word("DSCLS")
DEF DISPCLOSFLAT == word("DSCLSF")
DEF DECRCLOS == word("DCCLS")
DEF CLOS == word("CLS")
DEF LCLOS == word("LCLS")


-- %$$RTS macros for polymorphic objects$

FUN FREE COPY : box
DEF FREE == word("FREE")
DEF COPY == word("COPY")

-- %$$RTS misc. macros$

FUN HALT DENO ENTER EXIT : box
DEF HALT == word("HLT")
DEF DENO == word("DEN")
DEF ENTER == word("ENTER")
DEF EXIT == word("EXIT")

-- %$$block indention$

FUN ind : nat
DEF ind == "1"!'Nat

-- %$$Symbols$

FUN initSym : denotation -> box
DEF initSym(sym) == words(%(word(sym),word("_init")))

FUN includedSym : denotation -> box
DEF includedSym(sym) == words(%(word(sym),word("_included")))

FUN sourceSym : denotation -> box
DEF sourceSym(sym) == words(%(word(sym),word(".impl")))

FUN foreignSym : denotation -> box
DEF foreignSym(sym) == words(%(word(sym),word(".h")))

-- %$$Comments$

DEF cComment(box) == words(%(word("/* "),box,word(" */")))

FUN comment : denotation -> box
DEF comment(c) == words(%(word("/* "),
                          word(`(subsClose(!(c)))),
                          word(" */")))

  FUN subsClose : string -> string
  DEF subsClose(<>) == <>
  DEF subsClose(r AS c1 :: <>) == r
  DEF subsClose(c1::(r AS c2::r1)) ==
      IF (c1 = *) and (c2 = /) THEN
        !("!8s!") ++ subsClose(r1)
      ELSE c1::subsClose(r) FI

-- %$$empty$
FUN EMPTY : box
DEF EMPTY == word("")

-- $Help Functions$ 
-- %- =========================================================================

-- FUN word : denotation -> box
-- DEF word(d:denotation) ==
--    word((d!):denotation)

FUN word : nat -> box
DEF word(n:nat) ==
    word((n`):denotation)

FUN cond : box ** box ** box -> box
DEF cond(c,t,e) ==
    words(%(OPEN,c,QUEST,t,COLON,e,CLOSE))

FUN fun : box ** box -> box
DEF fun(f,a) ==
    words(%(f,OPEN,a,CLOSE))

FUN fun : box ** box ** box -> box
DEF fun(f,a1,a2) ==
    words(%(f,OPEN,a1,COMMA,a2,CLOSE))

FUN fun : box ** box ** box ** box -> box
DEF fun(f,a1,a2,a3) ==
    words(%(f,OPEN,a1,COMMA,a2,COMMA,a3,CLOSE))
    
FUN proc : box ** box -> box
DEF proc(f,a1) ==
    words(%(f,OPEN,a1,CLOSE,SEMI))

FUN proc : box ** box ** box -> box
DEF proc(f,a1,a2) ==
    words(%(f,OPEN,a1,COMMA,a2,CLOSE,SEMI))

FUN proc : box ** box ** box ** box -> box
DEF proc(f,a1,a2,a3) ==
    words(%(f,OPEN,a1,COMMA,a2) ++ %(COMMA,a3,CLOSE,SEMI))
    
FUN proc : box ** box ** box ** box ** box -> box
DEF proc(f,a1,a2,a3,a4) ==
    words(%(f,OPEN,a1,COMMA,a2,COMMA) ++ %(a3,COMMA,a4,CLOSE,SEMI))

FUN list : (box -> seq[box]) ** seq[box:SORT] ** seq[box:SORT] 
                             -> seq[box:SORT]
DEF list(f,s,r) ==
    IF <>?(s) THEN r
              ELSE f(ft(s)) ++ (next(f) / r)(rt(s)) FI

  FUN next : (box -> seq[box]) -> box ** seq[box:SORT] -> seq[box:SORT]
  DEF next(f)(b,r) ==
    COMMA::(f(b)++r)
    
-- %$Names$
-- %- ========================================================================

DEF cResult == 
    RESULTCODE

DEF cLocal(i) ==
    words(%(LOCALCODE,word(#(i))))

DEF cGlobal(msym,i) ==
    words(%(GLOBALCODE,word(msym),UNDERSCORE,word(#(i))))

DEF cEntry(msym,i) ==
    words(%(ENTRYCODE,word(msym),UNDERSCORE,word(#(i))))

DEF cMacro(msym,i) ==
    words(%(MACROCODE,word(msym),UNDERSCORE,word(#(i))))

DEF cClosEntry(n) ==
    words(%(n,CLOSENTRYCODE))

DEF cGlobalSym(msym,i,sy) ==
    words(%(GLOBALCODE,word(msym),UNDERSCORE,word(sy)))

DEF cEntrySym(msym,i,sy) ==
    words(%(ENTRYCODE,word(msym),UNDERSCORE,word(sy)))

DEF cMacroSym(msym,i,sy) ==
    words(%(MACROCODE,word(msym),UNDERSCORE,word(sy)))

DEF cTmc(n) ==
    IF n > 0 THEN 
        words(%(TMCCODE,word(n)))
    ELSE
        TMCCODE
    FI

DEF cTmp(n) ==
    IF n > 0 THEN
        words(%(TMPCODE,word(n)))
    ELSE
        TMPCODE
    FI

DEF cExclVar(o) ==
    words(%(EXCLCODE,subsDot(o)))

    -- conceptual bug: there might be a '.' (TUPFIELDCODE) in o ...
    -- subsitute it by '_'

    FUN subsDot : box -> box
    DEF subsDot(b) ==
        IF b word? THEN word(subsDot1(word(b)))
        IF b words? THEN words(subsDot * words(b)) FI

    FUN subsDot1 : denotation -> denotation
    DEF subsDot1(t) ==
        init(#(t),\\i. IF (t!i) = dot THEN underscore ELSE t!i FI)


-- %$types$
-- %- ========================================================================

DEF cType(st) ==
    OBJ

DEF cTupType(n) ==
    words(%(TUP,word(n)))

DEF cPtrType(st) ==
    words(%(OBJ,REF))

DEF cFlagType ==
    FLAG

-- %$expressions$
-- %- ========================================================================

DEF cNil == NIL

DEF cString(s) ==
    words(%(DQUOTE,word(`(escape(!(s)))),DQUOTE))

   /* %We have to convert some characters in a literal denotation, because
       the C compiler will interpret some escape sequences. (One might 
       argue, whether `@code{?}' needs to be escaped; but it @emph{is}
       contained in the escape sequences.)
   */
    FUN escape : string -> string
    DEF escape(t) ==
        IF <>?(t) THEN t
        ELSE
          IF c = ("\\"!) THEN \ :: \ :: escape(rt(t))
          IF c = ("\?"!) THEN \ :: ? :: escape(rt(t))
          IF c = ("'"!) THEN \ :: rsngquote :: escape(rt(t))
          IF c = (""""!) THEN \ :: dblquote :: escape(rt(t))
          OTHERWISE
          IF printable?'Char(c) or
             (FIELD?[bool]("-zlatin1") and printable?'Latin1(c)) or
             (FIELD?[bool]("-zgreek") and printable?'Greek(c))
             THEN c :: escape(rt(t))
          OTHERWISE
          IF c = ("\a"!) THEN \ :: a :: escape(rt(t))
          IF c = ("\b"!) THEN \ :: b :: escape(rt(t))
          IF c = ("\f"!) THEN \ :: f :: escape(rt(t))
          IF c = ("\n"!) THEN \ :: n :: escape(rt(t))
          IF c = ("\r"!) THEN \ :: r :: escape(rt(t))
          IF c = ("\t"!) THEN \ :: ("t"!) :: escape(rt(t))
          IF c = ("\v"!) THEN \ :: v :: escape(rt(t))
          ELSE                
            /* %Non-printable characters are represented as octal numbers
                with three digits. This is the only possibility which does
                not depend on the following character. */
                \ :: asChar(c2) :: asChar(c1) :: asChar(c0) :: escape(rt(t))
                WHERE
                  c0 == (n % 8) + asNat(0)
                  c1 == ((n / 8) % 8) + asNat(0)
                  c2 == ((n / 64) % 8) + asNat(0)
                  n == asNat(c)
          FI
          WHERE c == ft(t)
        FI
        
DEF cTupField(s,n) ==
    words(%(s,TUPFIELDCODE,word(n)))

DEF cField(o,st,n) ==
    IF oneProd?(st) THEN
       fun(FIELD1,o,word(n))
    ELSE
       fun(FIELD,o,word(n))
    FI

DEF cTest(o,st) ==
    IF isPrim?(st) THEN 
        fun(ISPRIM,o)
    IF isProd?(st) THEN
        fun(ISPROD,o)
    FI

DEF cTestTag(o,st,tags,tagst) ==
    IF onePrim?(tagst) THEN
        fun(ISPRIM,o)
    IF oneProd?(tagst) THEN
        fun(ISPROD,o)
    OTHERWISE
    IF isProd?(tagst) THEN
        LET test == 
                LET (ft,rt) == (arb(tags),excl(arb(tags),tags))
                IN
                (\\t,b.words(%(fun(ISTAGPROD,o,word(t)),SOR,b)),
                               fun(ISTAGPROD,o,word(ft))) / rt
        IN
        IF isProd?(st) THEN
            test
        ELSE
            words(%(fun(ISPROD,o),SAND,OPEN,test,CLOSE))
        FI
    IF isPrim?(tagst) THEN
        LET test == 
                LET (ft,rt) == (arb(tags),excl(arb(tags),tags))
                IN
                (\\t,b.words(%(fun(ISTAGPRIM,o,word(t)),SOR,b)),
                               fun(ISTAGPRIM,o,word(ft))) / rt
        IN
        IF isPrim?(st) THEN
            test
        ELSE
            words(%(fun(ISPRIM,o),SAND,OPEN,test,CLOSE))
        FI
    FI

DEF cTag(o,st) ==
    IF isPrim?(st) THEN 
        fun(TAGPRIM,o)
    IF isProd?(st) THEN
        fun(TAGPROD,o)
    ELSE
        fun(TAGSOME,o)
    FI

DEF cExcl(o,n) ==
    fun(ISEXCL,o,word(n))

DEF cRef(o) ==
    words(%(REF,o))

DEF cAdr(o) ==
    words(%(ADR,o))

DEF cCall(p,as,rn) ==
    words(p::(OPEN::list(% : box->seq[box],as,%(CLOSE))))

DEF cEval(o,as,rn) ==
    words(OPEN::(REF::(cast::(fun(METHOD,o,word(#(as)))::(CLOSE::
         (OPEN::list(% : box->seq[box],o::as,%(CLOSE))))))))
    WHERE 
      cast == words(OPEN::(rt::(OPEN::(REF::(CLOSE::
                          (OPEN::list(castParam,o::as,%(CLOSE,CLOSE))))))))
      rt   == IF rn > 1:nat THEN words(%(TUP,word(rn))) ELSE OBJ FI

  FUN castParam : box -> seq[box]
  DEF castParam(_) == %(OBJ)


DEF cInlineDeno(d) == fun(word("make_denotation"),d)

-- %$Declarations$
-- %- ========================================================================

DEF cDec(t,o) ==
    words(%(t,BLANK,o,SEMI))

DEF cInitDec(t,o,i) ==
    words(%(t,BLANK,o,BECOMES,i,SEMI))

DEF cExternVarDec(t,o) ==
    words(%(EXTERN,t,BLANK,o,SEMI))

DEF cProcDec(extern?,o,is,rn) ==
    LET wds == t::(BLANK::
                  (o::(OPEN::list(externParam,is,%(CLOSE,SEMI)))))
        t   == IF rn > 1 THEN cTupType(rn) ELSE cType(some) FI
    IN
    IF extern? THEN words(EXTERN::wds) ELSE words(STATIC::wds) FI


  FUN externParam : box -> seq[box]
  DEF externParam(b) == %(b)

-- %$statements$
-- %- ========================================================================

DEF cNop  == 
    EMPTY

DEF cRestart ==
    CONTINUE

DEF cHalt(m) ==
    proc(HALT,m)

DEF cPos(p) ==
    lineNo(line(p))

DEF cDeno(r,o) ==
    proc(DENO,r,o)

DEF cClos(modsym,p,r,_,v) ==
    proc(CLOS,word(r),p,v)
    
DEF cClosLazy(modsym,p,r,_,v) ==
    proc(LCLOS,word(r),p,v)
    
DEF cAssign(i,o) ==
    words(%(o,BECOMES,i,SEMI))

DEF cExpand(m,is,os) ==
    words(m::(OPEN::list(% :box->seq[box],is++os,%(CLOSE,SEMI))))

DEF cFree(o,st,n) ==
    IF isPrim?(st) THEN
        cNop
    IF isProd?(st) THEN
        proc(FREEPROD,o,word(n))
    IF isClos?(st) THEN
        proc(FREECLOS,o,word(n))
    ELSE
        proc(FREE,o,word(n))
    FI

  FUN flat? : store -> bool
  DEF flat?(st) ==
    (primitive?)forall?(comps(st))

  FUN primitive? : store -> bool
  DEF primitive?(st) ==
    prim?(st) or (somePrim?(st) or onePrim?(st))

DEF cCopy(o,st,n) ==
    IF isPrim?(st) THEN
        cNop
    IF isProd?(st) THEN
        proc(COPYPROD,o,word(n))
    IF isClos?(st) THEN
        proc(COPYCLOS,o,word(n))
    ELSE
        proc(COPY,o,word(n))
    FI

DEF cDispose(o,st) ==
    IF isProd?(st) THEN
        proc(DISPPROD,o)
    IF isClos?(st) THEN
        proc(DISPCLOS,o)
    FI

DEF cDisposeFlat(o,st) ==
    IF isProd?(st) THEN
        proc(DISPPRODFLAT,o)
    IF isClos?(st) THEN
        proc(DISPCLOSFLAT,o)
    FI

DEF cDecr(o,st,n) ==
    IF isProd?(st) THEN
        proc(DECRPROD,o,word(n))
    IF isClos?(st) THEN
        proc(DECRCLOS,o,word(n))
    FI 

DEF cCons(st,r) ==
    IF onePrim?(st) THEN
        proc(PRIM1,r)
    IF prim?(st) THEN
        proc(PRIM,word(tag(st)),r)
    IF oneProd?(st) THEN
        IF flat?(st) THEN
            proc(PROD1FLAT,word(#(comps(st))),r)
        ELSE
            proc(PROD1,word(#(comps(st))),r)
        FI
    IF prod?(st) THEN
        IF flat?(st) THEN
            proc(PRODFLAT,word(#(comps(st))),word(tag(st)),r)
        ELSE
            proc(PROD,word(#(comps(st))),word(tag(st)),r)
        FI
    FI

DEF cDemand(Sts) ==
    LET SizeBags == 
          (\\St, P. LET (PBag,P1Bag) == (1st(P), 2nd(P))
                    IN
                    IF oneProd?(St) THEN 
                        PBag & incl(#(comps(St)), P1Bag)
                    IF prod?(St) THEN
                        incl(#(comps(St)), PBag) & P1Bag
                    ELSE
                        P
                    FI
          , {} & {}) / Sts
        GenDemand == \\Macro . \\Sz_Cnt, Rest.
                        LET (Sz, Cnt) == (1st(Sz_Cnt), 2nd(Sz_Cnt))
                        IN
                        Macro :: OPEN :: (word(Sz) :: COMMA :: word(Cnt) :: (
                                          CLOSE :: SEMI :: Rest))
    IN
    words( 
      ( GenDemand(DEMAND1) , 
                        ( GenDemand(DEMAND), <> ) / asSeqPair(1st(SizeBags)) )
         / asSeqPair(2nd(SizeBags))
    )




DEF cReuse(r,oldst,newst,o) ==
    LET newTag? == IF prod?(newst) THEN -- prod?(oldst)
                                       tag(oldst) |= tag(newst) 
                                   ELSE false FI
        reuse   == IF prod?(newst) THEN
                       IF flat?(newst) THEN
                           proc(REUSEPRODFLAT,r,o)
                       ELSE
                           proc(REUSEPROD,r,o)
                       FI
                   ELSE proc(REUSE,r,o) FI
    IN
    IF newTag? THEN
        words(%(reuse,proc(CHANGETAG,o,word(tag(newst)))))
    ELSE
        reuse
    FI

DEF cBlock(ds,ss) == 
    IF <>?(ds) THEN lines(ss) 
               ELSE block(ind,words(BEGIN::ds),END,lines(ss)) FI

DEF cIte(i,t,e) ==
    lines(%(block(ind,words(%(cIF,OPEN,i,CLOSE,BEGIN)),cNop,lines(%(t))),
            block(ind,words(%(END,cELSE,BEGIN)),END,lines(%(e)))))

DEF cSwitch(e,cs,d) ==
    block(ind,words(%(SWITCH,OPEN,e,CLOSE,BEGIN)),END,
            lines(cs+%block(ind,DEFAULT,cNop,lines(%(d)))))

DEF cCase(tags,st,b) ==
    IF onePrim?(st) or oneProd?(st) THEN
        ABORT("cCase'Macros: object has no actual tag")
    ELSE
        block(ind,words(cases),BREAK,lines(%(b)))
        WHERE cases == (\\t,r.CASE::word(t)::COLON::r,<>) / tags
    FI

DEF cConstAuxCall(msym,i) ==
   words(%(CONSTAUXCODE, word(msym), 
           UNDERSCORE, word(#(i)), OPEN, CLOSE, SEMI))



-- %$definitions$
-- %- ========================================================================

DEF cVar(sym,extern?,t,o) ==
    IF extern? THEN
       words(%(t,BLANK,o,SEMI,BLANK,comment(sym)))
    ELSE
       words(%(STATIC,t,BLANK,o,SEMI,BLANK,comment(sym)))
    FI


DEF cProc(sym,trace?,extern?,p,as,rn,b) ==
    lines(%(header(sym,extern?,p,as,EMPTY,rtype),
            cBlock(%(rdec),%(traceOpt(sym,trace?,b),return))))
    WHERE
      rdec  == cDec(rtype,cResult)
      rtype == IF rn > 1:nat THEN words(%(TUP,word(rn))) ELSE OBJ FI

  FUN header : denotation ** bool ** box ** seq[box] ** box ** box -> box
  DEF header(sym,extern?,p,as,ac,rt) ==
    LET wds == rt::(BLANK::(p::(OPEN::list(argDec(ac),as,
                                          %(CLOSE,BLANK,comm)))))
        comm == IF #(sym) = 0 THEN EMPTY ELSE comment(sym) FI
    IN
    IF extern? THEN
        words(EXTERN::wds)
    ELSE words(STATIC::wds) FI
                

  FUN argDec : box -> box -> seq[box]
  DEF argDec(ac)(a) == %(ac,OBJ,BLANK,a)

  FUN return : box
  DEF return == words(%(RETURN,cResult,SEMI))

  FUN traceOpt : denotation ** bool ** box -> box
  DEF traceOpt(sym,trace?,b) ==
    IF trace? THEN
        words(%(proc(ENTER,cString(sym)),b,proc(EXIT,cString(sym))))
    ELSE b FI

DEF cTailProc(sym,trace?,extern?,p,as,rn,b) ==
    lines(%(header(sym,extern?,p,as,REGISTER,rtype),
            cBlock(%(rdec),%(traceOpt(sym,trace?,loop),return))))
    WHERE
      loop  == block(ind,words(%(FOREVER,BEGIN)),END,lines(%(b,BREAK)))
      rdec  == cDec(rtype,cResult)
      rtype == IF rn > 1:nat THEN words(%(TUP,word(rn))) ELSE OBJ FI

DEF cTmcProc(sym,trace?,extern?,p,as,rn,b) ==
    lines(%(header(sym,extern?,p,as,REGISTER,rtype),
            cBlock(rdecs,%(traceOpt(sym,trace?,loop),return))))
    WHERE
      loop    == block(ind,words(%(FOREVER,BEGIN)),END,lines(%(b,BREAK)))
      rdecs   == cDec(rtype,cResult)::tmcDecs
      tmcDecs == IF rn > 1:nat THEN tmcDecTup * ((1 .. rn)(\\X.X))
                               ELSE
             %(words(%(cPtrType(some),BLANK,cTmc(1),BECOMES,ADR,cResult,SEMI)))
                               FI
      rtype   == IF rn > 1:nat THEN words(%(TUP,word(rn))) ELSE OBJ FI

    FUN tmcDecTup : nat -> box
    DEF tmcDecTup(n) ==
        words(%(cPtrType(some),BLANK,cTmc(n),BECOMES,ADR,
                cTupField(cResult,n),SEMI))

    
DEF cMacroDef(m,is,os,e) ==
    lines(%(
      words(%(IFNDEF,m)),
      words(DEFINE::(m::(OPEN::(list(% : box -> seq[box],is++os,
                               CLOSE::(BLANK::(BEGIN::(call+%END)))))))),
      ENDIF
    ))
    WHERE
      call == IF on > 1 THEN 
                  cDec(cTupType(on),tmp)::(
                  cAssign(cCall(e,is,on),tmp)::
          zip(cAssign)((tmp cTupField _ ) * ((1 .. on)(\\X.X)),os))
                    WHERE tmp:box == cTmp(0)
              ELSE
                  %(cAssign(cCall(e,is,on),ft(os)))
              FI
      on == #(os)

DEF cAlias(l,r) ==
    words(%(DEFINE,l,BLANK,r))

DEF cConstAuxDef(msym,i,b) ==
   lines(%(words(%(STATIC, VOID, CONSTAUXCODE, word(msym), 
                   UNDERSCORE, word(#(i)), OPEN, CLOSE)),
           block(ind, BEGIN, END, b)))


-- %$modules$
-- %- ========================================================================

DEF cModInit(sym,usesSyms,init) ==
    lines(%(words(%(INITCODE,word(sym),OPEN,CLOSE)),
            block(ind,BEGIN,END,
                      lines(VISITED :: ((initCall * usesSyms) ++ init)))))

  FUN initCall : denotation -> box
  DEF initCall(sym) ==
    words(%(INITCODE,word(sym),OPEN,CLOSE,SEMI))

DEF cConstInitCall(sym) ==
    words(%(CONSTINITCODE,word(sym),OPEN,CLOSE,SEMI))

DEF cConstInit(sym,init) ==
    lines(%(words(%(STATIC,CONSTINITCODE,word(sym),OPEN,CLOSE)),
            block(ind,BEGIN,END,lines(init))))

DEF cHeader(sym,pos?) ==
    lines(%(source,include))
    WHERE source == IF pos? THEN
                        words(%(LINE,word("1"),BLANK,
                                   DQUOTE,word(sym),SOURCESUFFIX,DQUOTE))
                    ELSE
                        EMPTY
                    FI
          include == words(%(INCLUDE,DQUOTE,RTS,DQUOTE))

DEF cFooter(t) ==
    EMPTY

DEF cInclude(sym) ==
    words(%(INCLUDE,DQUOTE,word(sym),DQUOTE))

DEF cInterfaceHeader(sym) ==
    lines(%(words(%(IFNDEF,word(symbolMap(sym)),INCLUDEDCODE)),
            words(%(DEFINE,word(symbolMap(sym)),INCLUDEDCODE)))) 

DEF cInterfaceFooter(sym) ==
    lines(%(ENDIF,EMPTY))

    
-- %$$closures$

DEF cMethodName(r,m,n) ==
    words(%(word("_mt_"),word(r),word("_"),word(m),word("_"),word(n)))

DEF cExclClos(b) ==
    fun(word("EXCLS"),b)

DEF cDupClos(c,r) ==
    proc(word("DPCLS"),c,r)

DEF cClosField(c,n) ==
    fun(word("FLDCLS"),c,word(n))

DEF cIncrClos(c,m,n) ==
    proc(word("INCCLS"),c,word(m),word(n))

DEF cCallMethod(c,as,rn) ==
    words(word("(*")::(cast::(code::(word(")(")
                           ::list(% : box->seq[box],as,%(word(")")))))))
    WHERE
      code == words(%(word("ENTRY("),c,word(")")))
      cast == words(word("(")::(rt::(word("(*)")::
                   (word("(")::list(castParam,as,%(word("))")))))))
      rt   == IF rn > 1:nat THEN cTupType(rn) ELSE cType(some) FI


DEF cLazyMethod(c,r) ==
    words(%(word("LZYCLS("),c,word(","),r,word(");")))

DEF cLazySuffix ==
    word("_l")

DEF cInitMethod(R,M,N,Mth) ==
    proc(word("MTH"),word(R),word(M),word(N),Mth)

DEF cInitLazyMethod(R,M,N,Mth) ==
    proc(word("LZYMTH"),word(R),word(M),word(N),Mth)

