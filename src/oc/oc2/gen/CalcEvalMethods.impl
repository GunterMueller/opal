
IMPLEMENTATION CalcEvalMethods
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- subject: Calculate required closure evaluation methods of unit
-- project: acc
-- author:  wg

IMPORT  Nat             COMPLETELY
        Seq             COMPLETELY
        SeqMap          COMPLETELY
        SeqReduce       COMPLETELY
        Triple          COMPLETELY
        Set[triple[nat,nat,nat],orderMethod]
                        ONLY set {} incl in 
        SetConv[triple[nat,nat,nat],orderMethod]
                        ONLY asSeq -- explode
        Denotation      ONLY ++

IMPORT  SeqMapEnv       ONLY *

IMPORT  TypeAn          COMPLETELY
        OptimAn         ONLY optimAn bindingAn? hiddenAn? rank
        An              ONLY an optim:an->optimAn
        Ac              COMPLETELY
        AcFun           ONLY decs importedDecs
        TypeAnFun       ONLY typeOfDec typeDecAss structure
        PreparedOptions ONLY popts
        Builtin         ONLY BUILTIN

IMPORT  Format          COMPLETELY
        Ide             COMPLETELY
        ABORT ONLY ABORT

FUN calcEvalMethods : popts ** unit -> seq[triple[nat,nat,nat]]
DEF calcEvalMethods(_,Main) ==
    LET Given    == (calcGivenMethods(Main) / {})
                        (importedDecs(noBuiltin?(Main),Main))
        Required == (calcRequiredMethods(Main,Given) / {})
                                (decs(any,Main))
    IN
    asSeq(Required)

  FUN noBuiltin? : unit -> dec -> bool
  DEF noBuiltin?(_)(Dec) == ~(origin(ide(Dec)) = BUILTIN)

  FUN any : dec -> bool
  DEF any(_) == true

FUN calcGivenMethods : unit -> dec ** set -> set 
DEF calcGivenMethods(Main)(Dec,Methods) ==
    LET Rank == retrieveRank(Dec)
    IN
    IF (Rank |= max) and (Rank > 0) THEN
        -- rank is available; can assert some methods
        LET Type == structure(typeDecAss(Main))(typeOfDec(Dec))
        IN
        calcMethods(ide(Dec),Rank,Type,{},Methods)
    ELSE Methods FI

FUN calcRequiredMethods : unit ** set -> dec ** set -> set 
DEF calcRequiredMethods(Main,Given)(Dec,Methods) ==
    LET Rank == retrieveRank(Dec)
    IN
    IF (Rank |= max) and (Rank > 0) THEN
        -- declaration needs evaluation methods
        LET Type == structure(typeDecAss(Main))(typeOfDec(Dec))
        IN
        calcMethods(ide(Dec),Rank,Type,Given,Methods)
    ELSE Methods FI

FUN retrieveRank : dec -> nat
DEF retrieveRank(constructor(_,_,_,Order)) == Order
DEF retrieveRank(Dec) ==
    IF hiddenAn?(optim(an(Dec))) or bindingAn?(optim(an(Dec))) THEN
        rank(optim(an(Dec)))
    ELSE max:nat FI

FUN orderMethod : triple[nat,nat,nat] ** triple[nat,nat,nat] -> bool
DEF &(R1,M1,N1) orderMethod &(R2,M2,N2) ==
    IF R1 < R2 THEN true
    IF R1 > R2 THEN false
    OTHERWISE
    IF M1 < M2 THEN true
    IF M1 > M2 THEN false
    ELSE
      N1 < N2 
    FI
        
-- --------------------------------------------------------------------------

FUN calcMethods : ide ** nat ** type ** set ** set -> set
DEF calcMethods(Id,_,some,_,_) ==
    -- this should NOT happen ...
    ABORT("calcMethods'CalcEvalMethods: expected type information for "
          ++ pretty(format(Id),max))

DEF calcMethods(_,Rank,Type,Given,Methods) ==
    LET Thrunks == calcThrunks(Type)
                        -- calc the possible argument thrunks, e.g
                        -- <2,1,1> for a**b->c->d->e
    IN
    calc(0,Rank,Thrunks,Given,Methods)

  FUN calc: nat ** nat ** seq[nat] ** set ** set -> set
  DEF calc(Lev,Rank,Thrunks AS Ft::Rt,Given,Methods) ==
    IF Lev < Rank THEN
      LET -- (_,Sumup)  == *(\\S,T.(T+S,T+S))(0,Thrunks)
          (_,Sumup)  == (\\S,T.(T+S,T+S))*(0,Thrunks)
                    -- sum up argument thrunks, e.g.
                    -- <2,3,4> for <2,1,1>
          New    == ( (\\S,Es. LET E == &(Rank,Lev,S) IN
                               IF E in Given THEN Es ELSE incl(E,Es) FI )
                        / Methods )(Sumup)
      IN
      calc(Lev+Ft,Rank,Rt,Given,New)
    ELSE
      -- closure cannot hold more arguments than its rank; stop here
      Methods
    FI
  DEF calc(_,_,<>,_,Methods) == 
    Methods

  FUN calcThrunks : type -> seq[nat]
  DEF calcThrunks(fun(As,R)) == #(As) :: calcThrunks(R)
  DEF calcThrunks(_) == <>

