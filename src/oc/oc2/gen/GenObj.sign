SIGNATURE GenObj
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- subject: generate C code for IC objects
-- project: ac/gen
-- author:  wg 6-92

IMPORT	PreparedOptions	ONLY popts
	Ic		ONLY mod:SORT obj:SORT
	BoxedText	ONLY box:SORT
	Seq		[obj] ONLY seq
	Nat		ONLY nat
	Triple		[nat,nat,nat] ONLY triple
	Seq		[triple] ONLY seq
	Seq		[box] ONLY seq


FUN genDec : popts ** mod ** obj -> box
    /* Generate object declaration.
    */

FUN genExternDec : popts ** mod ** obj -> box
    /* Generate extern object declaration.
    */

FUN genInterfaceDec : popts ** mod ** obj -> box
    /* Generate object declaration and
       symbolic aliases for hand-coding interface.
    */

FUN genMacroDef : popts ** mod ** obj -> box
    /* Generate default macro definition for handcoding interface.
    */

FUN genProcCode : popts ** mod ** obj -> box
    /* Generate procedure code.
    */

FUN genConstCode : popts ** mod ** obj -> box
    /* Generate constant initialization code.
    */

FUN genConstAuxCode : popts ** mod ** obj -> box
    /* Generate any auxiliary code (functions) for constant initialization
       code.
    */

FUN genModCode : popts ** mod ** seq[triple[nat,nat,nat]] ** seq[box] -> box
    /* Generate module init code with initialization of denotations
       and closures and constants. 3rd argument gives the N-m-n closure 
       evaluation methods required by this module. 4th argument gives
       the additional initialization eventually included in the init
       code.
    */
    
FUN genConstInitCall : popts ** mod -> box
    /* Generate call to a function which initializes constants.
    */

FUN genConstInitFun : popts ** mod ** seq[box] -> box
    /* Generate initialization code for contants from (sorted) sequence.
    */

FUN genHeader genFooter genInterfaceHeader genInterfaceFooter 
						: popts ** mod -> box
    /* Generate footer/header.
    */

FUN genInterfaceImport : popts ** mod -> box
    /* Generate import of interface.
    */

FUN genHcInclude genHcInterfaceInclude
	: popts ** mod -> box
    /* Generate include of hand-coded parts of module / interface */

