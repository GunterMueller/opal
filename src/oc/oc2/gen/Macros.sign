
SIGNATURE Macros
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- subject: macros for C code generation
-- project: acc
-- author:  wg 6-92

IMPORT  Nat             ONLY nat <
        Seq[box]        ONLY seq
        Seq[denotation] ONLY seq
        Set[nat,<]      ONLY set
        Seq[store]      ONLY seq
        Ide             ONLY ide
        Store           ONLY store
        BoxedText       ONLY box: SORT
        SourceAn        ONLY pos:SORT


-- comments

FUN cComment    : box -> box


-- names

FUN cGlobal     : denotation ** ide -> box
FUN cEntry      : denotation ** ide -> box
FUN cMacro      : denotation ** ide -> box
FUN cClosEntry  : box -> box
FUN cGlobalSym  : denotation ** ide ** denotation -> box
FUN cEntrySym   : denotation ** ide ** denotation -> box
FUN cMacroSym   : denotation ** ide ** denotation -> box
FUN cResult     : box
FUN cLocal      : ide -> box
FUN cTmc        : nat -> box
FUN cTmp        : nat -> box
FUN cExclVar    : box -> box

-- types

FUN cType       : store -> box
FUN cTupType    : nat -> box
FUN cPtrType    : store -> box
FUN cFlagType   : box

-- declarations

FUN cDec        : box ** box -> box
FUN cInitDec    : box ** box ** box -> box
FUN cExternVarDec   : box ** box -> box
FUN cProcDec    : bool ** box ** seq[box] ** nat -> box

-- expressions

FUN cNil        : box

FUN cString     : denotation -> box

FUN cTupField   : box ** nat -> box
FUN cField      : box ** store ** nat -> box

FUN cTest       : box ** store -> box
FUN cTag        : box ** store -> box
FUN cTestTag    : box ** store ** set[nat,<] ** store -> box

FUN cExcl       : box ** nat -> box

FUN cRef        : box -> box
FUN cAdr        : box -> box

FUN cCall       : box ** seq[box] ** nat -> box
FUN cEval       : box ** seq[box] ** nat -> box

FUN cInlineDeno : box -> box

-- statements

FUN cPos        : pos -> box

FUN cNop        : box
FUN cHalt       : box -> box
FUN cWarn       : box -> box

FUN cDeno       : box ** box -> box

FUN cClos       : denotation ** box ** nat ** nat ** box -> box
FUN cClosLazy   : denotation ** box ** nat ** nat ** box -> box

FUN cAssign     : box ** box -> box

FUN cExpand     : box ** seq[box] ** seq[box] -> box

FUN cCons       : store ** box -> box
FUN cReuse      : box ** store ** store ** box -> box
FUN cFree       : box ** store ** nat -> box
FUN cCopy       : box ** store ** nat -> box
FUN cDispose    : box ** store -> box
FUN cDisposeFlat: box ** store -> box
FUN cDecr       : box ** store ** nat -> box

FUN cBlock      : seq[box] ** seq[box] -> box

FUN cIte        : box ** box ** box -> box

FUN cSwitch     : box ** seq[box] ** box -> box
FUN cCase       : set[nat,<] ** store ** box -> box

FUN cRestart    : box


FUN cConstAuxCall       : denotation ** ide -> box


FUN cDemand     : seq[store] -> box


-- definitions

FUN cVar        : denotation ** bool ** box ** box -> box
FUN cProc       : denotation ** bool ** bool ** box ** seq[box] ** nat ** box -> box
FUN cTailProc   : denotation ** bool ** bool ** box ** seq[box] ** nat ** box -> box
FUN cTmcProc    : denotation ** bool ** bool ** box ** seq[box] ** nat ** box -> box
FUN cMacroDef   : box ** seq[box] ** seq[box] ** box -> box
FUN cAlias      : box ** box -> box

FUN cConstAuxDef : denotation ** ide ** box -> box


-- modules

FUN cModInit    : denotation ** seq[denotation] ** seq[box] -> box

FUN cConstInit  : denotation ** seq[box] -> box
FUN cConstInitCall : denotation -> box

FUN cHeader     : denotation ** bool -> box
FUN cFooter     : denotation -> box

FUN cInterfaceHeader : denotation -> box
FUN cInterfaceFooter : denotation -> box

FUN cInclude    : denotation -> box
FUN cIncludeT   : denotation ** denotation -> box

-- closures

FUN cMethodName : nat ** nat ** nat -> box
FUN cExclClos   : box -> box
FUN cDupClos    : box ** box -> box
FUN cClosField  : box ** nat -> box
FUN cIncrClos   : box ** nat ** nat -> box
FUN cCallMethod : box ** seq[box] ** nat -> box
FUN cLazyMethod : box ** box -> box
FUN cLazySuffix : box
FUN cInitMethod : nat ** nat ** nat ** box -> box
FUN cInitLazyMethod : nat ** nat ** nat ** box -> box


