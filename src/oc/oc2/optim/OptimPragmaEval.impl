
IMPLEMENTATION OptimPragmaEval
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:48 $ ($Revision: 1.1.1.1 $)

-- subject: Evaluate optimization pragmas 
-- project: acc
-- author:  wg 1-92

IMPORT	Triple		COMPLETELY
	Seq		COMPLETELY
	SeqReduce	ONLY /
	SeqOfSeq	ONLY flat
	SeqMap		ONLY *
	Com		ONLY com yield okay
	Denotation	ONLY =
	Nat		ONLY nat 2 =
	Option		COMPLETELY

IMPORT	Ide		COMPLETELY
	IdeMap		COMPLETELY
	An		COMPLETELY
	OptimAn		COMPLETELY
	PragmaAn	COMPLETELY
	Ac		COMPLETELY
	PreparedOptions ONLY popts
	Error		ONLY err:SORT ok



DEF optimPragmaEval(Opts,unit(An,Sym,Orig,Uses,Decs)) ==
    LET (NewOpts, OptimAn)  == eval(Opts, pragma(An))
    IN
    yield(okay(&( unit(An set OptimAn, Sym, Orig, Uses, Decs),
		  NewOpts,
		  ok )))


FUN eval : popts ** pragmaAn -> popts ** optimAn
DEF eval(Opts, pragmas(Pragmas)) ==
    LET (NewOpts, Props, _) == parse(Opts, {}, flat(items*Pragmas))
    IN
    (NewOpts, unitAn(Props))
DEF eval(Opts, none) == (Opts, none)


FUN parse : popts ** ideMap[seq[prop]] ** seq[pragmaItem] ->
		popts ** ideMap[seq[prop]] ** seq[pragmaItem] 

-- currently only "inverse" and "unfold" implemented (brute-force)

DEF parse(Opts, Props, lexem(_, Value)::names(Pos, Names)::Items) ==
    IF Value = "inverse" THEN
 	IF #(Names) = 2 ANDIF val?(ft(Names)) ANDIF val?(ft(rt(Names))) THEN
	    LET Fun1 == ide(ft(Names))
	        Fun2 == ide(ft(rt(Names)))
	    IN
	    parse(Opts, add(Fun1, inverse(Fun2), 
			    add(Fun2, inverse(Fun1), Props)),
	         Items)
	ELSE parse(Opts, Props, Items) FI
    IF Value = "unfold" THEN
	LET NewProps == (\\N,Ps. add(ide(N), unfold, Ps), Props) / Names
	IN
	parse(Opts, NewProps, Items)
    IF Value = "primary" THEN
	LET NewProps == (\\N,Ps. add(ide(N), primary, Ps), Props) / Names
	IN
	parse(Opts, NewProps, Items)
    ELSE
	parse(Opts, Props, Items)
    FI
DEF parse(Opts, Props, lexem(_, Value)::(Rest AS lexem(_,Value1)::
					         names(_, Names)::Items)) ==
    IF Value = "experimental" THEN
	LET NewProps == (\\N,Ps. add(ide(N), experimental(Value1), Ps), Props) 
						/ Names
	IN
	parse(Opts, NewProps, Items)
    ELSE
	parse(Opts, Props, Rest)
    FI
DEF parse(Opts, Props, _) == (Opts, Props, <>)


FUN add : ide ** prop ** ideMap[seq[prop]] -> ideMap[seq[prop]]
DEF add(Ide, Prop, PropMap) ==
    LET Old? == PropMap !? Ide
    IN
    IF avail?(Old?) THEN def(Ide, Prop :: cont(Old?), PropMap)
		    ELSE def(Ide, %(Prop), PropMap) FI

