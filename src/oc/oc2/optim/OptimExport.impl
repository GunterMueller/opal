
IMPLEMENTATION OptimExport
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- subject: Finitialization phase of optimization
-- project: acc
-- author:  wg 1-92

IMPORT  Nat             ONLY nat = 0 1 > <= max:nat |=
        Seq             COMPLETELY
        SeqMap          ONLY * 
        SeqReduce       ONLY  /
        SeqCompare      ONLY eq?
        Pair            COMPLETELY
        Option          COMPLETELY
        Denotation      ONLY ++  =
        String          ONLY string
        Void            ONLY void nil
        Char            ONLY char
        Com             ONLY com ans:SORT yield data okay exit okay? error
        ComCompose      COMPLETELY
        ComSeqReduce    ONLY /

IMPORT  NatMap          ONLY natMap {} def ! !? 
        NatMapConv      ONLY asSeq
        NatMapReduce    ONLY /

IMPORT  OcVerbose         ONLY verb definition subphase
        OcOptions         ONLY options myOptFile
        Stream          ONLY output stdErr
        OcError           ONLY err:SORT ok

IMPORT  Ide             COMPLETELY
        IdeSet          ONLY ideSet {} incl in implode explode
        Ac              COMPLETELY
        AcIO            ONLY writeUnit readUnit
        TypeAn          COMPLETELY
        OptimAn         COMPLETELY
        SourceAn        COMPLETELY
        An              COMPLETELY
        PreparedOptions ONLY popts options exportOptim? maxExportComplexity
                             checkDiffExport?
        AcFun           ONLY decs dec setDec =
        AcDump          ONLY acDump
        TypeAnFun       ONLY typeDec
        OptimAnFun      ONLY props
        DumpToFile      ONLY dumpToFile
        
-- --------------------------------------------------------------------
-- Added due to missing localTime in new library

FUN localTime : com[denotation]
DEF localTime == yield(okay("Time missing"))

-- ------------------------------------------------------------------------

FUN optimExport : popts -> unit -> com[pair[unit,err]]
DEF optimExport(o)(T) ==
    localTime & (\\time.
    LET (T1,E)  == IF exportOptim?(o) THEN buildSimpleExport(o,T,time) 
                                      ELSE buildEmptyExport(o,T,time) FI
        fn      == myOptFile(options(o))
    IN
    dumpToFile(o,"OptimExport",\\U. acDump(options(o), U))(okay(E)) & (\\ _ .
    writeOptimExport(o,fn,E) & (\\ _ .
    yield(okay(T1 & ok))
    ))) 

-- ------------------------------------------------------------------------

FUN buildEmptyExport : popts ** unit ** denotation -> unit ** unit
DEF buildEmptyExport(_,U,time) ==
    (U,unit(none set version(time),symbol(U),origin(U),{},{}))

-- ------------------------------------------------------------------------

FUN buildSimpleExport : popts ** unit ** denotation -> unit ** unit
DEF buildSimpleExport(o,U,time) ==
    /* Simple export unit consists of all constructors, all bindings
       with complexity <= maxExportComplexity, and other bindings
       with rank > 0 (which are casted to hidden, however).
    */
    LET ds   == decs(simpleExport?(o,U),U)
        app  == applied(
                      def(#(target),
                          &(implode(ide:dec->ide * ds),{}'IdeSet),
                          {}[pair[ideSet,ideSet]]))
        all  == (decApplied(o,U)/app)(ds)
                    -- indirectly involved objects
    IN
    (updateMode(U,all),buildExport(o,U,time,all))

FUN simpleExport? : popts ** unit -> dec -> bool
DEF simpleExport?(_,_)(d) ==
    IF external?(mode(d)) THEN
        IF binding?(d) THEN
            -- everthing ranked > 0 in initial export
            rank(optim(an(d))) > 0
        ELSE
            constructor?(d)
        FI
    ELSE constructor?(d) FI

-- ------------------------------------------------------------------------

FUN buildExport : popts ** unit ** denotation ** applied -> unit
DEF buildExport(o,U,time,apps) ==
    /* According to apps,  build exported unit.
    */
    /(build(o,U), unit(none set version(time) set optim(an(U)),
                       symbol(U),origin(U),
                       {}[unit:SORT],{}[dec:SORT]), ides(apps))

FUN build : popts ** unit -> nat ** pair[ideSet,ideSet] ** unit -> unit
DEF build(o,U)(n,p,E) == LET vs==1st(p) ts==2nd(p) IN
    LET vds  == (defDec(o,U) / {})(explode(vs))
        tds  == (defTypeDec(U) / {})(explode(ts))
    IN
    IF n = #(target) THEN
        -- vals & types of target unit
        LET a == an(E) set typeDecs(tds)
        IN
        unit(a,symbol(E),origin(E),uses(E),vds)
    ELSE
        -- vals & types of imported unit
        LET I  == uses(U) ! n
            a  == (none set source(an(I))) set typeDecs(tds)
            I1 == unit(a,symbol(I),origin(I),{}[unit:SORT],vds)
        IN
        unit(an(E),symbol(E),origin(E),def(n,I1,uses(E)),decs(E))
    FI

FUN defDec : popts ** unit -> ide ** natMap[dec:SORT] -> natMap[dec:SORT]
DEF defDec(o,U)(i,M) ==
    LET d == dec(U,i)
    IN
    IF binding?(d) THEN
        LET oa == optim(an(d))
            hidden? == IF origin(i) = target THEN
                           -- target bindings are exported only
                           -- if complexity <= maxExportComplexity(o)
                           -- or unfolding annoted, and
                           -- and if they are implemented.
                           notImplemented?(def(d))
                              or ~(complexity(oa) <= maxExportComplexity(o)
                                   or exist?(unfold?, props(U,i)))
                       ELSE 
                           -- imported bindings are never exported
                           true 
                       FI

        IN
        IF hidden? THEN
            def(#(i),hidden(a,ide(d),external),M)
            WHERE a == IF bindingAn?(oa) THEN
                           set(an(d),hiddenAn(rank(oa)))
                       ELSE an(d) FI
        ELSE
            def(#(i),binding(an(d),ide(d),external,killAn(def(d))),M)
        FI
    IF constructor?(d) THEN
       def(#(i),constructor(an(d),ide(d),external,order(d)),M)
    IF hidden?(d) THEN
       def(#(i),hidden(an(d),ide(d),external),M)
    FI

    FUN notImplemented? : exp -> bool
    DEF notImplemented?(error(_)) == true
    DEF notImplemented?(lambda(_,_,error(_))) == true
    DEF notImplemented?(_) == false

FUN defTypeDec : unit -> ide ** natMap[typeDec:SORT] -> natMap[typeDec:SORT]
DEF defTypeDec(U)(i,M) ==
    def(#(i),typeDec(U,i),M)


-- ------------------------------------------------------------------------
-- Update mode of internal declarations becoming external

FUN updateMode : unit ** applied -> unit
DEF updateMode(T,a) == 
    LET ids == 1st(ides(a) ! #(target)) -- applied target value ides
    IN
    (updateMode / T)(explode(ids))

  FUN updateMode : ide ** unit -> unit
  DEF updateMode(i,T) ==
      LET d == dec(T,i)
      IN
      IF mode(d) internal? THEN
          LET new == IF binding?(d) THEN 
                        binding(an(d),ide(d),external,def(d))
                     IF constructor?(d) THEN
                        constructor(an(d),ide(d),external,order(d))
                     IF hidden?(d) THEN
                        hidden(an(d),ide(d),external)
                     FI
          IN
          setDec(T,i,new)
      ELSE T FI

-- ------------------------------------------------------------------------
-- Sampling (transiently) applied value and type ides in AC objects

DATA applied == 
        applied(ides: natMap[pair[ideSet,ideSet]])
                -- per origin; 1st are values, 2nd types

        SORT applied
        FUN applied: natMap[pair[ideSet,ideSet]]->applied
        FUN applied?:applied->bool
        FUN ides : applied->natMap[pair[ideSet,ideSet]]


-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FUN expApplied : popts ** unit -> exp ** applied -> applied

DEF expApplied(opts,U)(ide(a,i),S) ==
    LET S1 == anApplied(opts,U)(type(a),S)
    IN
    IF global?(i) THEN 
        LET p? == ides(S1) !? #(origin(i))
            p  == IF avail?(p?) THEN cont(p?) 
                                ELSE &({}'IdeSet,{}'IdeSet) FI
        IN
        IF ~(i in 1st(p)) THEN
            -- declaration of i not visited until know
            LET p1  == &(incl(i,1st(p)),2nd(p))
                S2  == applied(def(#(origin(i)),p1,ides(S1)))
            IN
            decApplied(opts,U)(dec(U,i),S2)
        ELSE
            S1
        FI
    ELSE
        S1
    FI

DEF expApplied(opts,U)(apply(a,f,as),S) == 
    anApplied(opts,U)(type(a),(expApplied(opts,U) / expApplied(opts,U)(f,S))(as))

DEF expApplied(opts,U)(lambda(a,vs,s),S) == 
    anApplied(opts,U)(type(a),(decApplied(opts,U) / expApplied(opts,U)(s,S))(vs))

DEF expApplied(opts,U)(block(a,bs,s),S) == 
    anApplied(opts,U)(type(a),(decApplied(opts,U) / expApplied(opts,U)(s,S))(bs))

DEF expApplied(opts,U)(case(a,t,ms,d),S) == 
    anApplied(opts,U)(type(a),
             (matchApplied(opts,U) / expApplied(opts,U)(t,expApplied(opts,U)(d,S)))(ms))

DEF expApplied(opts,U)(e,S) ==
    anApplied(opts,U)(type(an(e)),S)

FUN matchApplied : popts ** unit -> match ** applied -> applied
DEF matchApplied(opts,U)(match(c,_,s),S) == 
    expApplied(opts,U)(ide(none:an,c),expApplied(opts,U)(s,S))

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FUN anApplied : popts ** unit -> typeAn ** applied -> applied

DEF anApplied(opts,U)(typing(t),S) ==
    typeApplied(opts,U)(t,S)

DEF anApplied(opts,U)(spec(ts),S) ==
    (typeApplied(opts,U) / S)(ts)

DEF anApplied(opts,U)(typeDecs(ds),S) ==
    /(typeDecApplied(opts,U), S, ds)

DEF anApplied(_,_)(_,S) ==
    S

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FUN decApplied : popts ** unit -> dec ** applied -> applied

DEF decApplied(opts,U)(binding(a,id,_,e),S) ==
    LET hidden? == IF global?(id) THEN 
                       IF origin(id) = target THEN
                           ~(complexity(optim(a)) <= maxExportComplexity(opts)
                               or exist?(unfold?, props(U,id)))
                       ELSE true FI
                   ELSE false FI
    IN
    IF hidden? THEN
        anApplied(opts,U)(type(a),S)
    ELSE 
        anApplied(opts,U)(type(a),expApplied(opts,U)(e,S))
    FI

 DEF decApplied(opts,U)(d,S) ==
    anApplied(opts,U)(type(an(d)),S)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FUN typeApplied : popts ** unit -> type ** applied -> applied

DEF typeApplied(opts,U)(ide(i),S) ==
    IF global?(i) THEN 
        LET p? == ides(S) !? #(origin(i))
            p  == IF avail?(p?) THEN cont(p?) 
                                ELSE &({}'IdeSet,{}'IdeSet) FI
        IN
        IF ~(i in 2nd(p)) THEN
            -- declaration of i not visited until know
            LET p1  == &(1st(p),incl(i,2nd(p)))
                S1  == applied(def(#(origin(i)),p1,ides(S)))
            IN
            typeDecApplied(opts,U)(typeDec(U,i),S1)
        ELSE
            S
        FI
    ELSE
        S
    FI

DEF typeApplied(opts,U)(fun(as,r),S) ==
    (typeApplied(opts,U) / typeApplied(opts,U)(r,S))(as)

DEF typeApplied(opts,U)(tup(ts),S) ==
    (typeApplied(opts,U) / S)(ts)

DEF typeApplied(opts,U)(prod(c,ts),S) ==
    (typeApplied(opts,U) / expApplied(opts,U)(ide(none:an,c),S))(ts)

DEF typeApplied(opts,U)(sum(ts),S) ==
    (typeApplied(opts,U) / S)(ts)

DEF typeApplied(opts,U)(spec(g,ts),S) ==
    (typeApplied(opts,U) / typeApplied(opts,U)(g,S))(ts)

DEF typeApplied(opts,U)(gen(_,s),S) ==
    typeApplied(opts,U)(s,S)

DEF typeApplied(_,_)(_,S) ==
    S

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FUN typeDecApplied : popts ** unit -> typeDec ** applied -> applied

DEF typeDecApplied(opts,U)(binding(_,t),S) ==
    typeApplied(opts,U)(t,S)

DEF typeDecApplied(_,_)(_,S) ==
    S

-- ------------------------------------------------------------------------
-- Killing annotations 

FUN killAn : exp -> exp
DEF killAn(e) ==
    IF ide?(e)    THEN ide(minAn(an(e)),ide(e))
    IF apply?(e)  THEN apply(minAn(an(e)),killAn(fun(e)),killAn*args(e))
    IF lambda?(e) THEN lambda(minAn(an(e)),
                                killDecAn*vars(e),killAn(scope(e)))
    IF block?(e)  THEN block(minAn(an(e)),
                                killDecAn*binds(e),killAn(scope(e)))
    IF case?(e)   THEN case(minAn(an(e)),killAn(discr(e)),
                                killMatchAn*matches(e),killAn(default(e)))
                  ELSE e FI

FUN killDecAn : dec -> dec
DEF killDecAn(d) ==
    IF variable?(d) THEN variable(minAn(an(d)),ide(d))
    IF binding?(d)  THEN binding(minAn(an(d)),ide(d),mode(d),killAn(def(d)))
    IF hidden?(d)   THEN hidden(minAn(an(d)),ide(d),mode(d))
                    FI

FUN killMatchAn : match -> match
DEF killMatchAn(m) ==
    match(cons(m),killDecAn*vars(m),killAn(scope(m)))
    
FUN minAn : an -> an
DEF minAn(a) ==
    IF none?(type(a)) THEN none:an ELSE set(none:an,type(a)) FI
        


-- -------------------------------------------------------------------------
-- write optimization export
-- if according option enabled, check for differnces between new and
-- old export before writing it


FUN writeOptimExport : popts ** denotation ** unit -> com[void]
DEF writeOptimExport(Opts,Fn,Export) ==
    IF ~(checkDiffExport?(Opts)) THEN
        writeUnit(options(Opts),Fn)(Export) 
    ELSE
        readUnit(options(Opts),Fn) & (\\OldExport? .
        IF nil?(OldExport?) THEN
            writeUnit(options(Opts),Fn)(Export)
        OTHERWISE
        IF diff?(cont(OldExport?),Export) THEN
                writeUnit(options(Opts),Fn)(Export)
        ELSE yield(okay(nil)) FI
        )
    FI

FUN diff? : unit ** unit -> bool
DEF diff?(U1,U2) ==
    IF diffUses?(asSeq(uses(U1)),asSeq(uses(U2))) THEN true
    OTHERWISE
    IF diffAn?(an(U1),an(U2)) THEN true
    ELSE diffDecs?(asSeq(decs(U1)),asSeq(decs(U2))) FI

FUN diffUses? : seq[pair[nat,unit]] ** seq[pair[nat,unit]] -> bool
DEF diffUses?((No1 & unit(An1,Sym1,_,_,_)) :: Rest1,
              (No2 & unit(An2,Sym2,_,_,_)) :: Rest2) ==
    IF (No1 = No2) and (Sym1 = Sym2) THEN
        IF version?(source(An1) ) and version?(source(An2)) THEN
            IF version(source(An1)) = version(source(An2)) THEN
                diffUses?(Rest1,Rest2)
            ELSE true FI
        ELSE true FI
    ELSE true FI
DEF diffUses?(<>,_) == true
DEF diffUses?(_,<>) == true
DEF diffUses?(<>,<>) == false

FUN diffDecs? : seq[pair[nat,dec]] ** seq[pair[nat,dec]] -> bool
DEF diffDecs?((No1 & hidden(An1,_,_)) :: Rest1,
              (No2 & hidden(An2,_,_)) :: Rest2) ==
    IF (No1 |= No2) or diffAn?(An1,An2) THEN
        true
    ELSE diffDecs?(Rest1,Rest2) FI
DEF diffDecs?((No1 & constructor(An1,_,_,Ord1)) :: Rest1,
              (No2 & constructor(An2,_,_,Ord2)) :: Rest2) ==
    IF (No1 |= No2) or ((Ord1 |= Ord2) or diffAn?(An1,An2)) THEN true
    ELSE diffDecs?(Rest1,Rest2) FI
DEF diffDecs?((No1 & binding(An1,_,_,Exp1)) :: Rest1,
              (No2 & binding(An2,_,_,Exp2)) :: Rest2) ==
    IF (No1 |= No2) or (diffAn?(An1,An2) or diffExp?(Exp1,Exp2)) THEN true
    ELSE diffDecs?(Rest1,Rest2) FI
DEF diffDecs?(_,_)  == true
DEF diffDecs?(<>,<>) == false

FUN diffAn? : an ** an -> bool
DEF diffAn?(An1,An2) == diffTypeAn?(type(An1),type(An2))
                                or diffOptimAn?(optim(An1),optim(An2))

FUN diffTypeAn? : typeAn ** typeAn -> bool
DEF diffTypeAn?(none,none) == false
DEF diffTypeAn?(typeDecs(Decs1),typeDecs(Decs2)) ==
    diffTypeDecs?(asSeq(Decs1),asSeq(Decs2))
DEF diffTypeAn?(typing(Type1),typing(Type2)) == diffType?(Type1,Type2)
DEF diffTypeAn?(_,_) == true


FUN diffTypeDecs? : seq[pair[nat,typeDec]] ** seq[pair[nat,typeDec]] -> bool
DEF diffTypeDecs?((No1 & hidden(_)) :: Rest1,
                  (No2 & hidden(_)) :: Rest2) == 
    IF (No1 |= No2) THEN true
    ELSE diffTypeDecs?(Rest1,Rest2) FI
DEF diffTypeDecs?((No1 & binding(_,Def1)) :: Rest1,
                  (No2 & binding(_,Def2)) :: Rest2) ==
    IF (No1 |= No2) or diffType?(Def1,Def2) THEN true
    ELSE diffTypeDecs?(Rest1,Rest2) FI
DEF diffTypeDecs?(_,_) == true
DEF diffTypeDecs?(<>,<>) == false

FUN diffType? : type ** type -> bool
DEF diffType?(_,_) == true
DEF diffType?(some,some) == false
DEF diffType?(ide(Id1),ide(Id2)) == ~(Id1 = Id2)
DEF diffType?(tup(Comps1),tup(Comps2)) == diffTypes?(Comps1,Comps2)
DEF diffType?(fun(Args1,Res1),fun(Args2,Res2)) ==
    diffType?(Res1,Res2) or diffTypes?(Args1,Args2)
DEF diffType?(prod(Cons1,Comps1),prod(Cons2,Comps2)) ==
    ~(Cons1 = Cons2) or diffTypes?(Comps1,Comps2)
DEF diffType?(sum(Mems1),sum(Mems2)) == diffTypes?(Mems1,Mems2)
DEF diffType?(spec(Gen1,Subs1),spec(Gen2,Subs2)) ==
    diffType?(Gen1,Gen2) or diffTypes?(Subs1,Subs2)
DEF diffType?(gen(Vars1,Scope1),gen(Vars2,Scope2)) ==
    ~(eq?(=)(Vars1,Vars2)) or diffType?(Scope1,Scope2)

FUN diffTypes? : seq[type] ** seq[type] -> bool
DEF diffTypes?(Type1 :: Types1,Type2 :: Types2) ==
    diffType?(Type1,Type2) or diffTypes?(Types1,Types2)
DEF diffTypes?(_,<>) == true
DEF diffTypes?(<>,_) == true
DEF diffTypes?(<>,<>) == false

FUN diffOptimAn? : optimAn ** optimAn -> bool
DEF diffOptimAn?(none,none) == false
DEF diffOptimAn?(bindingAn(Comp1,Rank1,MaxIde1),
                 bindingAn(Comp2,Rank2,MaxIde2)) ==
    (Comp1 |= Comp2) or ((Rank1 |= Rank2) or (MaxIde1 |= MaxIde2))
DEF diffOptimAn?(hiddenAn(Rank1),hiddenAn(Rank2)) ==
    Rank1 |= Rank2
DEF diffOptimAn?(_,_) == true

FUN diffExp? : exp ** exp -> bool
DEF diffExp?(Exp1,Exp2) ==
    ~(Exp1 = Exp2)
    -- this ignores annotations and is only OK unless
    -- we have no other annotated informations as types.

