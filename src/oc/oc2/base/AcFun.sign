SIGNATURE AcFun
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- subject: miscelleanous functions on Ac objects
-- author:  wg 

IMPORT	Seq	[dec] ONLY seq
	Ide	ONLY ide origin:SORT

IMPORT	Format	ONLY format:SORT

IMPORT	Ide	ONLY ide 
	TypeAn	ONLY typeDec:SORT
	An	ONLY an
	Ac	ONLY exp:SORT dec:SORT unit:SORT match:SORT
	PreparedOptions ONLY popts

-- expressions

FUN = : exp ** exp -> bool
    /* syntactic equality, ignoring annotations.
    */

FUN atomic? : exp -> bool
    /* one of error, deno, ide. */

FUN flat? : exp -> bool
    /* atomic or apply where each subexpression is atomic.
    */

FUN sequential? : exp -> bool
    /* atomic or flat or case (where discrim is atomic & scope
       of match is sequential) or let (where def is sequential & 
       scope is sequential) or lambda (where scope is sequential).
    */

FUN local? global? : exp -> bool
    /* local?(e) == ide?(e) andthen local?(ide(e))
       global?(e) == ide?(e) andthen global?(ide(e))
    */

FUN ide : ide -> exp
    /* ide(id) == ide(none:an,id)
    */

FUN set : exp ** an -> exp
    /* set annotation of any expression.
    */

FUN neverReached? : popts ** exp -> bool
    /* check if expression is a "never-reached" error.
       this is true for errorKind "never" and for "optional"
       if weakError?(popts) is set.
    */


-- units and declarations

FUN dec	: unit ** ide -> dec
    /* Get declaration of identifier.
    */

FUN setDec : unit ** ide ** dec -> unit
    /* Set declaration of identifier.
    */

FUN updateDec : unit ** ide ** (dec -> dec) -> unit
    /* Update declaration of identifier.
    */

FUN newIde : unit -> ide
    /* Returns a disjunct target identifier relative to all
       declared ides in target. (not for type ides!.)
    */

FUN decs : (dec -> bool) ** unit -> seq[dec]
    /* Get all target declarations which fulfill some predicate.
    */

FUN importedDecs : (dec -> bool) ** unit -> seq[dec]
    /* Get all imported declarations which fulfill predicate.
    */

FUN symbol : unit ** origin -> denotation
    /* Return symbol of unit of origin.
    */

FUN an : unit ** origin -> an
    /* Return annotation of unit of origin.
    */

FUN updateAn : unit ** origin ** (an -> an) -> unit
    /* Update annotation of unit of origin.
    */

-- dumping

FUN format : (ide->format)**(an->format)->exp->format
FUN format : (ide->format)**(an->format)->match->format
FUN format : (ide->format)**(an->format)->dec->format
FUN format : (ide->format)**(an->format)->unit->format

FUN format : unit -> ide -> format

	-- see also AcDump
