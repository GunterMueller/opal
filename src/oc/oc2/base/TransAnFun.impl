
IMPLEMENTATION TransAnFun
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT	Nat	COMPLETELY
	Seq	ONLY seq
	Option	COMPLETELY

IMPORT	Format	COMPLETELY
	NatMap	ONLY natMap {} def !?	

IMPORT	Ide	ONLY ide:SORT origin:SORT origin:ide->origin # :ide->nat
	Store	ONLY store
	TransAn	COMPLETELY
	An	ONLY an trans set:an**transAn->an
	Ac	ONLY unit:SORT dec:SORT constructor an:dec->an ide:dec->ide
		     order:dec->nat
		     mode
	AcFun	ONLY an dec updateAn updateDec


-- --------------------------------------------------------------------------

DEF typeStore?(U,i) ==
    LET ta == trans(an(U,origin(i)))
    IN
    IF typeStores?(ta) THEN
	stores(ta) !? #(i)
    ELSE nil FI

DEF setTypeStore(U,i,s) ==
    updateAn(U,origin(i),newTypeStore(i,s))

    FUN newTypeStore : ide ** store -> an -> an
    DEF newTypeStore(i,s)(a) ==
	LET ta  == trans(a)
	    ta1 == IF typeStores?(ta) THEN 
			typeStores(def(#(i),s,stores(ta)))
		   ELSE typeStores(def(#(i),s,{}[store:SORT])) 
				      FI
	IN
	set(a,ta1)

-- --------------------------------------------------------------------------

DEF constructorStore(U,i) ==
    store(trans(an(dec(U,i))))

DEF setConstructorStore(U,i,s) ==
    updateDec(U,i,newConsStore(s))

    FUN newConsStore : store -> dec -> dec
    DEF newConsStore(s)(d) ==
	LET newAn == set(an(d),constructorAn(s))
	IN
	constructor(newAn,ide(d),mode(d),order(d))


-- --------------------------------------------------------------------------

DEF format(_) ==
    str("")


