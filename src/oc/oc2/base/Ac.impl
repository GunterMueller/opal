
IMPLEMENTATION Ac
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT  Nat         ONLY nat
        Seq         [exp] ONLY seq
        Seq         [dec] ONLY seq
        Seq         [match] ONLY seq

IMPORT  NatMap      [dec] ONLY natMap
        NatMap      [unit] ONLY natMap
                
IMPORT  Ide         ONLY ide origin
        An          ONLY an

DATA exp ==
        error   (an: an)
--        warn    (an: an)
        deno    (an: an, repr: denotation)
        ide     (an: an, ide: ide) 
        apply   (an: an, fun: exp, args: seq[exp])
        lambda  (an: an, vars: seq[dec], scope: exp)
        block   (an: an, binds: seq[dec], scope: exp)
        case    (an: an, discr: exp, matches: seq[match], default: exp)

DATA match ==
        match   (cons: ide, vars: seq[dec], scope: exp)
        
DATA dec ==
        variable    (an: an, ide: ide)
        hidden      (an: an, ide: ide, mode: mode)
        binding     (an: an, ide: ide, mode: mode, def: exp)
        constructor (an: an, ide: ide, mode: mode, order: nat)

DATA mode ==
        external
        internal
        local
        
DATA unit ==
        unit    (an: an, symbol: denotation, origin: origin, 
                 uses: natMap[unit], decs: natMap[dec])

