
SIGNATURE TypeAnFun
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- subject: miscelleanous functions w.r.t. types
-- author:  wg 

IMPORT	Nat		ONLY nat
	Seq		[typeDec] ONLY seq

IMPORT	Format		ONLY format:SORT

IMPORT	Ide		ONLY ide:SORT
	TypeAn		ONLY type:SORT typeDec:SORT typeAn:SORT
	IdeMap[type]	ONLY ideMap
	Ac		ONLY exp:SORT dec:SORT unit:SORT


FUN typeDec : unit ** ide -> typeDec
    /* Get type declaration of identifier.
       Returns hidden if no declaration present.
    */

FUN typeDecs : (typeDec -> bool) ** unit -> seq[typeDec]
    /* Get type declarations of target which fulfill predicate.
    */

FUN importedTypeDecs : (typeDec -> bool) ** unit -> seq[typeDec]
    /* Get type declarations of imported units which fulfill predicate.
    */

	 
FUN typeOfDec : dec -> type
    /* Examines annoted typing of declaration and
       returns it, if there is any. Returns any'TypeAn otherwise.
    */

FUN typeOfExp : (ide -> type) ** (ide -> typeDec) -> exp -> type
    /* 	t == typeOfExp(V,T)(e)

       	calculate "best" type of expression 

       	V is a type assignment for value ides. V must be total,
       	but may return any'TypeAn. V will be refined 
	when passing local declarations.

       	T is a type definition assignment for type ides and must
	be total. T is passed to reduce (see below). 
	
       	Annotated typings at expressions overwrite all 
	other type information. 

	Annotated instantiations freely construct new types.
	Reduction of types to weak head normal form is performed 
	only when the calculation of the result type of an
	application requires insight in the functions type.
	
	No unification tooks place. All type specializations have to be
	annotated appropriate. The type of a case is the type of the
	else (the least upper bound of the typings of all pathes have
	to be annotated if necessary). TypeAn errors result in any'TypeAn.

    */


FUN reduce : (ide -> typeDec) -> type -> type
    /* 	Reduces a type expression to weak head normal form. Performs
	unfolding of type ides if necessary.
    */

FUN unfold : (ide -> typeDec) -> type -> type
    /* Unfold global type identifier (or yield original type
       if not global type identifier).
    */

FUN structure : (ide -> typeDec) -> type -> type
    /* Give structure of type, skiping gens, reducing specs, &
       unfolding type ides.
    */

FUN typeDecAss : unit -> ide -> typeDec
    /* For convenience : typeDecAss(U)(i) == typeDec(U,i)
    */

FUN subs : ideMap[type] -> type -> type
    /* Perform substitution of type variables, considering
       nested genericitys.
    */
    
FUN order : type -> nat
    /* Give order of type.
    */


FUN format : typeAn -> format
    format : type -> format
    format : typeDec -> format
    /* Format types.
    */

