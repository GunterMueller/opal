
IMPLEMENTATION OptimLazySel
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- subject: Selection optimization on AC 
-- author:  wg 6-93

IMPORT  Nat             COMPLETELY
        Seq             COMPLETELY
        SeqIndex        ONLY !
        SeqFilter       ONLY |
        SeqMap          COMPLETELY
        SeqReduce       COMPLETELY
        Pair            COMPLETELY
        Option          COMPLETELY
        Void            COMPLETELY

IMPORT  SeqMapEnv       ONLY *
        NatMap          COMPLETELY

IMPORT  Ide             ONLY ide local local? = : ide ** ide -> bool
        IdeMap          ONLY ideMap {} def def? undef ! !? extend dom
        IdeSet          ONLY ideSet {} incl excl * explode implode - +
        An              ONLY an none source set:an**sourceAn->an
                             optim set:an**optimAn->an
        SourceAn        ONLY sourceAn pos:SORT noPos
                             error error? kind errorKind never never?
        OptimAn         ONLY optimAn bindingAn? bindingAn complexity rank
                             maxIdeNo
        PreparedOptions ONLY popts
        Ac              COMPLETELY
        AcFun           ONLY =
        AcAnaScheme     COMPLETELY

-- ==========================================================================
-- Data Type to represent strict-sets of local ides
-- ==========================================================================

DATA sset == all        -- all is the strictness info for error
             some(set: ideSet)

FUN * : sset ** sset -> sset
DEF all * all == all
DEF all * S == S
DEF S * all == S
DEF some(S1) * some(S2) == some(S1 * S2)

FUN + : sset ** sset -> sset
DEF all + all == all
DEF all + S == S
DEF S + all == S
DEF some(S1) + some(S2) == some(S1 + S2)

FUN \ : sset ** sset -> sset
DEF all \ _ == some({}) -- this is counter-intuitive, but serves well
                        -- for our application
DEF some(_) \ all == some({})
DEF some(S1) \ some(S2) == some(S1 - S2)

FUN incl : ide ** sset -> sset
DEF incl(_,all) == all
DEF incl(Ide,some(S)) == IF local?(Ide) THEN some(incl(Ide,S)) ELSE some(S) FI

FUN explode : sset -> seq[ide]
DEF explode(all) == <>
DEF explode(some(S)) == explode(S)

-- ==========================================================================
-- 1st Path: compute the strict applications of locals
-- of each evaluation path bottom up
-- ==========================================================================

FUN sa : void ** natMap[sset] ** exp ** sset 
                                        -> natMap[sset] ** sset
DEF sa == anaScheme
                   [void,natMap[sset],sset,
                    leaf,
                    enterBlock,returBlock,exitBlock,
                    enterBind,exitBind,
                    enterCase,returCase,exitCase,
                    enterMatch,exitMatch,
                    enterDefault,exitDefault]


-- some annoying signatures ...

FUN leaf : void ** natMap[sset] ** nat ** exp ** sset 
                                -> natMap[sset] ** sset

FUN enterBlock: void ** natMap[sset] ** nat ** an -> void ** natMap[sset] 
    returBlock: void ** natMap[sset] ** an -> natMap[sset] 
    exitBlock : void ** natMap[sset] ** nat ** an ** sset 
                                           -> natMap[sset] ** sset
FUN enterBind: void ** natMap[sset] ** nat ** an ** ide -> void ** natMap[sset]
    exitBind : void ** natMap[sset] ** nat ** an ** ide ** sset 
                                        -> natMap[sset] ** sset

FUN enterCase: void ** natMap[sset] ** nat ** an ** exp -> void ** natMap[sset]
    returCase: void ** natMap[sset] ** an ** exp -> natMap[sset]
    exitCase : void ** natMap[sset] ** nat ** an ** exp 
                        ** seq[sset] ** sset -> natMap[sset] ** sset

FUN enterMatch: void ** natMap[sset] ** nat ** exp ** ide ** seq[dec] 
                                                -> void ** natMap[sset]
    exitMatch : void ** natMap[sset] ** nat ** exp ** ide ** seq[dec] ** sset 
                                                -> natMap[sset] ** sset

FUN enterDefault: void ** natMap[sset] ** nat ** exp  -> void ** natMap[sset]
    exitDefault : void ** natMap[sset] ** nat ** exp ** sset 
                                                -> natMap[sset] ** sset


-- leaf expressions


DEF leaf(_,Map,_,apply(_,Fun,Args),Strict) ==
    LET NewStrict ==
         ((\\E,S. incl(ide(E),S)) / incl(ide(Fun),Strict))(Args)
    IN
    (Map,NewStrict)

DEF leaf(_,Map,_,ide(_,Ide),Strict) ==
    LET NewStrict == incl(Ide,Strict)
    IN
    (Map,NewStrict)

DEF leaf(_,Map,_,error(_),_) ==
    (Map,all)

DEF leaf(_ : void,Map,_,_,Strict) ==
    (Map,Strict)


-- blocks


DEF enterBlock(X : void,Map,_,_) == (X,Map)
DEF returBlock(_ : void,Map,_) == Map
DEF exitBlock(_ : void,Map,_,_,Strict) == (Map,Strict)



DEF enterBind(X : void,Map,_,_,_) == (X,Map)
DEF exitBind(_ : void,Map,_,_,_,Strict) == (Map,Strict)


-- cases


DEF enterCase(X : void,Map,_,_,_) == (X,Map)
DEF returCase(_ : void,Map,_,_) == Map
DEF exitCase(_ : void,Map,_,_,Discr,MatchesStrict,DefaultStrict) ==
    (Map, incl(ide(Discr),(* / DefaultStrict)(MatchesStrict)))


DEF enterMatch(X : void,Map,_,_,_,_) == (X,Map)
DEF exitMatch(_ : void,Map,Node,_,_,_,Strict) ==
    -- Store strictness info of this path in Map
    (def(Node,Strict,Map),Strict)
    
DEF enterDefault(X : void,Map,_,_) == (X,Map)
DEF exitDefault(_,Map,Node,_,Strict) ==
    -- Store strictness info of this path in Map
    (def(Node,Strict,Map),Strict)


-- ==========================================================================
-- 2nd Path: move lazy selections into their strict context
-- ==========================================================================

FUN ml : inh ** thr ** exp ** void -> thr ** void


DEF ml == anaScheme
                   [inh,thr,void,
                    leaf,
                    enterBlock,returBlock,exitBlock,
                    enterBind,exitBind,
                    enterCase,returCase,exitCase,
                    enterMatch,exitMatch,
                    enterDefault,exitDefault]


DATA inh == inh(map: natMap[sset], strict: sset, sels: ideMap[sel],
                subs: ideMap[ide], lazySels: seq[sel])
DATA sel == sel(discr: exp, cons: ide, vars: seq[dec])
DATA thr == thr(stack:seq[exp], free:nat)

FUN leaf : inh ** thr ** nat ** exp ** void -> thr ** void

FUN enterBlock: inh ** thr ** nat ** an -> inh ** thr 
    returBlock: inh ** thr ** an -> thr 
    exitBlock : inh ** thr ** nat ** an ** void -> thr ** void

FUN enterBind: inh ** thr ** nat ** an ** ide -> inh ** thr
    exitBind : inh ** thr ** nat ** an ** ide ** void -> thr ** void

FUN enterCase: inh ** thr ** nat ** an ** exp -> inh ** thr
    returCase: inh ** thr ** an ** exp -> thr
    exitCase : inh ** thr ** nat ** an ** exp ** seq[void] ** void 
                                        -> thr ** void

FUN enterMatch: inh ** thr ** nat ** exp ** ide ** seq[dec] -> inh ** thr
    exitMatch : inh ** thr ** nat ** exp ** ide ** seq[dec] ** void 
                                                -> thr ** void

FUN enterDefault: inh ** thr ** nat ** exp  -> inh ** thr
    exitDefault : inh ** thr ** nat ** exp ** void -> thr ** void


-- leafs

DEF leaf(I,thr(Rest,Free),_,apply(An,Fun,Args),S) ==
    LET NewApply == apply(An,substitute(subs(I))(Fun),
                             substitute(subs(I)) * Args)
    IN
    (thr(NewApply :: Rest,Free),S)

DEF leaf(I,thr(Rest,Free),_,Ide AS ide(_,_),S) ==
    LET NewIde == substitute(subs(I))(Ide)
    IN
    (thr(NewIde :: Rest, Free),S)

DEF leaf(_,thr(Stack,Free),_,Exp,S) ==
    (thr(Exp :: Stack,Free),S)

-- blocks

DEF enterBlock(I:inh,T,_,_) == (I,T)

DEF returBlock(_,thr(Scope :: Rest,Free),An) ==
    thr(block(An,<>,Scope) :: Rest,Free)

DEF exitBlock(_ :inh,T,_,_,S) == (T,S)

DEF enterBind(I:inh,T,_,_,_) == (I,T)

DEF exitBind(_,thr(Rhs::(block(BlkAn,Binds,Scope)::Rest),Free),_,An,Lhs,S) ==
    (thr(block(BlkAn,binding(An,Lhs,local,Rhs) :: Binds,Scope) :: Rest,Free),
     S)

-- cases

DEF enterCase(I:inh,T,_,_,_) == (I,T)

DEF returCase(I,thr(Default :: Rest,Free),An,Discr) ==
    thr(case(An,substitute(subs(I))(Discr),<>,Default) :: Rest,Free)

DEF exitCase(_,T,_,_,_,_,_) == (T,nil)

DEF enterMatch(inh(Map,Strict,Sels,Subs,_),thr(Stack,Free),
                                        Node,Discr,Cons,Vars) ==
    LET (NewStrict,NewFree,LazySels,NewSubs) ==
                calcLazySels(Map!Node,Strict,Free,Sels,Subs)
        Sel == sel(Discr,Cons,Vars)
        NewSels == ( (\\Var,S. def(ide(Var),Sel,S)) / Sels )(Vars)
    IN
    (inh(Map,NewStrict,NewSels,NewSubs,LazySels),thr(Stack,NewFree))

DEF exitMatch(inh(_,_,_,Subs,LazySels),
              thr(Scope :: (case(An,Discr,Matches,Default) :: Rest),Free),
              _,_,Cons,Vars,S) ==
    LET NewScope == (genLazySel(Subs) / Scope)(LazySels)
    IN
    (thr(case(An,Discr,match(Cons,Vars,NewScope) :: Matches,Default) :: Rest,
         Free),
     S)

DEF enterDefault(inh(Map,Strict,Sels,Subs,_),thr(Stack,Free),
                                        Node,_) ==
    LET (NewStrict,NewFree,LazySels,NewSubs) ==
                calcLazySels(Map!Node,Strict,Free,Sels,Subs)
    IN
    (inh(Map,NewStrict,Sels,NewSubs,LazySels),thr(Stack,NewFree))

DEF exitDefault(inh(_,_,_,Subs,LazySels),
                thr(Default ::  Rest,Free),_,_,S) ==
    LET NewDefault == (genLazySel(Subs) / Default)(LazySels)
    IN
    (thr(NewDefault :: Rest,Free),S)


  FUN calcLazySels : sset ** sset ** nat ** ideMap[sel] ** ideMap[ide] ->
                                sset ** nat ** seq[sel] ** ideMap[ide]
  DEF calcLazySels(PathStrict,Strict,Free,Sels,Subs) ==
    LET NewStrict == Strict + PathStrict
        Snapped   == NewStrict \ Strict
        LazyIdes  == explode(some(implode(dom(Sels))) * Snapped)
        (NewFree,LazySels,NewSubs) == mergeLazySels(Sels,Free,<>,Subs,LazyIdes)
    IN
    (NewStrict,NewFree,LazySels,NewSubs)


  FUN mergeLazySels : ideMap[sel] ** nat ** seq[sel] ** ideMap[ide] ** seq[ide]
                                -> nat ** seq[sel] ** ideMap[ide]
  DEF mergeLazySels(Sels,Free,CurrSels,Subs,Ide::Ides) ==
    LET Sel         == Sels!Ide
        SameMatch   == (\\S. (discr(S) = discr(Sel)) and (cons(S) = cons(Sel)))
                                | CurrSels
                -- see if their is already a selection based on same
                -- match and constructor
    IN
    IF ::?(SameMatch) THEN
        LET NewIde == ide(vars(ft(SameMatch)) ! pos(Ide,vars(Sel)))
        IN
        mergeLazySels(Sels,Free,CurrSels,def(Ide,NewIde,Subs),Ides)
    ELSE
        -- construct selection with fresh variables
        LET (NewFree,NewVars) ==
                (\\F,V. (succ(F),variable(an(V),local(F))))*(Free,vars(Sel))
            NewSel == sel(discr(Sel),cons(Sel),NewVars)
            NewIde == ide(NewVars ! pos(Ide,vars(Sel)))
        IN
        mergeLazySels(Sels,NewFree,NewSel::CurrSels,def(Ide,NewIde,Subs),Ides)
    FI
  DEF mergeLazySels(_,Free,CurrSels,Subs,<>) ==
    (Free,CurrSels,Subs)

  FUN genLazySel : ideMap[ide] -> sel ** exp -> exp
  DEF genLazySel(Subs)(Sel,Exp) ==
    case(an(Exp),substitute(Subs)(discr(Sel)),
         %(match(cons(Sel),vars(Sel),Exp)),neverReached)


        
-- ==========================================================================
-- Entry Point
-- ==========================================================================

FUN optimLazySel : popts ** unit ** dec -> dec
DEF optimLazySel(_,_,Dec) == Dec
DEF optimLazySel(_,_,Dec AS binding(An,Lhs,Mode,Rhs)) ==
    IF deno?(Rhs) THEN Dec
    OTHERWISE
    IF ~(bindingAn?(optim(An))) THEN
        -- require maxIdeNo for this optimization
        Dec
    ELSE
        LET Exp == IF lambda?(Rhs) THEN scope(Rhs) ELSE Rhs FI
            (Map,Strict) == sa(nil,{},Exp,some({}))
            I == inh(Map,Strict,{},{},<>)
            T == thr(<>,succ(maxIdeNo(optim(An))))
            (T1,_) == ml(I,T,Exp,nil)
            NewRhs ==
                IF lambda?(Rhs) THEN
                    lambda(an(Rhs),vars(Rhs),ft(stack(T1)))
                ELSE ft(stack(T1)) FI
            NewMaxIdeNo == pred(free(T1))
            NewAn ==
                An set bindingAn(complexity(optim(An)),rank(optim(An)),
                                 NewMaxIdeNo)
        IN
        binding(NewAn,Lhs,Mode,NewRhs)
    FI

-- ==========================================================================
-- Auxiliary Functions
-- ==========================================================================

FUN pos : ide ** seq[dec] -> nat
DEF pos(Ide,variable(_,VarIde)::Vars) ==
    IF Ide = VarIde THEN 0 ELSE succ(pos(Ide,Vars)) FI

-- to be moved to AcFun

FUN neverReached: exp
DEF neverReached ==
    error(none set error(noPos,"",never))

FUN neverReached? : exp -> bool
DEF neverReached?(error(a)) ==
    IF error?(source(a)) THEN never?(kind(source(a))) ELSE false FI
DEF neverReached?(_) == false

FUN substitute: ideMap[ide] -> exp -> exp
DEF substitute(Subs)(case(An,Discr,Matches,Default)) ==
    case(An,substitute(Subs)(Discr),
            SubsMatch * Matches,
            substitute(Subs)(Default))
     WHERE SubsMatch == 
        \\Match.
          (LET NewSubs == ( (\\Var,S. undef(ide(Var),S)) / Subs)(vars(Match))
           IN match(cons(Match),vars(Match),substitute(NewSubs)(scope(Match))))
DEF substitute(Subs)(block(An,Binds,Scope)) ==
    block(An,SubsBind * Binds,substitute(NewSubs)(Scope))
      WHERE SubsBind == \\Bind.binding(an(Bind),ide(Bind),mode(Bind),
                                       substitute(Subs)(def(Bind)))
            NewSubs == ( (\\Bind,S. undef(ide(Bind),S)) / Subs )(Binds)
DEF substitute(Subs)(apply(An,Fun,Args)) ==
    apply(An,substitute(Subs)(Fun),substitute(Subs) * Args)
DEF substitute(Subs)(ide(An,Ide)) ==
    LET NewIde? == Subs !? Ide
    IN
    IF avail?(NewIde?) THEN ide(An,cont(NewIde?)) ELSE ide(An,Ide) FI
DEF substitute(_)(Exp) == 
    Exp
    
