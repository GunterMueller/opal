IMPLEMENTATION Translate
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-08 10:34:38 $ ($Revision: 1.2 $)

-- subject: driver of the translation phase
-- project: acc
-- author:  wg

IMPORT  Nat             COMPLETELY
        Denotation      ONLY = ++
	String 		ONLY string
        Seq             COMPLETELY
        Com             ONLY com ans:SORT okay yield data
        ComCompose      COMPLETELY
	ComSeqReduce	COMPLETELY
        Void            ONLY void
	Compose		COMPLETELY
	Predicate	ONLY or
	Pair		COMPLETELY

IMPORT  Options         ONLY options cop?
        Verbose         COMPLETELY
	Error		ONLY err:SORT ok

IMPORT	NatMap		ONLY natMap {} def {}?
	NatMapReduce    ONLY /
			
IMPORT	Ide		COMPLETELY
	IdeSet		ONLY ideSet {} in +
	Store		ONLY store:SORT
	An		ONLY an source
	SourceAn	ONLY sourceAn symbol:sourceAn->denotation
						errorKind:SORT pos:SORT
	TypeAn		ONLY type:SORT
	TypeAnFun	ONLY typeOfDec
	Ac		COMPLETELY
	AcFun		ONLY decs setDec
	AcDump		ONLY dump
	Ic		COMPLETELY
	IcFun		ONLY objs setObj dump
	PreparedOptions ONLY popts options reuseOpt? aliasOpt? selOpt?
				mergeMatchOpt? foreignTemplate?
	Builtin		ONLY BUILTIN
	DumpToFile	ONLY dumpToFile

IMPORT  TransType	ONLY transTypes type2Store
	TransDec      	ONLY transDec transImportDec
	OptimReuse	ONLY optimReuse
	OptimLazySel	ONLY optimLazySel
	OptimMergeMatch	ONLY optimMergeMatch


-- ------------------------------------------------------------------------
FUN translate : popts -> unit -> com[pair[mod,err]]
DEF translate(Opts)(Unit) ==
    verb(options(Opts),phase,"translating to imperative code ...") 
					& (\\ _ .
    preopt(Opts,Unit) 			& (\\OptUnit.
    trans(Opts,OptUnit) 		& (\\Mod.
    postopt(Opts,Mod)			& (\\OptMod.
    yield(okay(OptMod & ok))
    ))))


-- ------------------------------------------------------------------------

FUN preopt : popts ** unit -> com[unit]
DEF preopt(Opts,Unit) == 
    IF selOpt?(Opts) THEN
	verb(options(Opts),subphase,"optimizing selections ...") & (\\ _ .
	( ( SelOpt /& Unit ) (decs(binding?,Unit))
	  WHERE SelOpt == 
		\\Dec,U.
		    verb(options(Opts),definition,symbol(source(an(Dec))))
								& (\\ _ .
		    LET NewDec == optimLazySel(Opts,U,Dec)
		    IN
		    yield(okay(setDec(U,ide(NewDec),NewDec)))
		    )
	) & (\\ OptUnit.
	(yield(okay(OptUnit)) ; dumpToFile(Opts,"OptimSel",\\U.dump(U)()))
	))
    ELSE yield(okay(Unit)) FI

FUN anyDec : dec -> bool
DEF anyDec(_) == true

-- ------------------------------------------------------------------------

FUN trans : popts ** unit -> com[mod]
DEF trans(Opts,Unit) ==
    verb(options(Opts),subphase,"analyzing types ...") & (\\ _ .
    LET StoreAnnotatedUnit == transTypes(Opts,Unit)
    IN
    verb(options(Opts),subphase,"translating functions ...") & (\\ _ .
    ( ( transOne /& &({},{}) )(decs(anyDec,StoreAnnotatedUnit))
      WHERE transOne == \\Dec,ObsAndUsed.
		verb(options(Opts),definition,symbol(source(an(Dec))))
							    & (\\ _ .
		LET (Ob,Used) == transDec(Opts,StoreAnnotatedUnit)(Dec)
		    (Obs,UsedBefore) == (1st(ObsAndUsed),2nd(ObsAndUsed))
		    NewObs == def(#(ide(Dec)),Ob,Obs)
		    NewUsed == Used + UsedBefore
		IN
		yield(okay(&(NewObs,NewUsed)))
		)
    ) & (\\ObsAndUsed.
    LET Imports == /(transImport(Opts,StoreAnnotatedUnit,2nd(ObsAndUsed)),
			{}, uses(StoreAnnotatedUnit))
	Kind    == IF foreignTemplate?(Opts) THEN foreign ELSE normal FI
    IN
    yield(okay(mod(symbol(StoreAnnotatedUnit),
		   origin(StoreAnnotatedUnit),
		   Kind,
		   Imports,1st(ObsAndUsed))
	 ))
    )))


-- old stuff 

FUN transImport : popts ** unit ** ideSet -> unit ** natMap[mod] 
					  -> natMap[mod]
DEF transImport(o,U,used)(I,IS) ==
    LET obs == /(transImportDec(o,U,used), {}, decs(I))
    IN
    IF /* {}?(obs) */ false THEN
	IS
    ELSE
	def(#(origin(I)),
    	    mod(symbol(I),origin(I),kind,{}[mod:SORT],obs),IS)
	WHERE kind == 
		IF origin(I) = BUILTIN THEN 
		    builtin
		OTHERWISE
		IF cop?(("gForeign:")++symbol(I),options(o)) THEN
		    foreign
		ELSE 
		    normal 
		FI
    FI

FUN transImportDec : popts ** unit ** ideSet -> dec ** natMap[obj:SORT]
					      -> natMap[obj:SORT]
DEF transImportDec(o,U,used)(d,obs) ==
    IF ide(d) in used THEN def(#(ide(d)),transImportDec(o,U)(d),obs)
		      ELSE obs FI


-- ------------------------------------------------------------------------
FUN postopt : popts ** mod -> com[mod]
DEF postopt(o,M) == 
    IF reuseOpt?(o) or aliasOpt?(o) or mergeMatchOpt?(o) THEN
        (verb(options(o),subphase,"optimizing procedures ...");
         (optim(o) / okay(M))(objs(procedure? or constant?,M)));
	dump(o,"TransOpt")
    ELSE
	yield(okay(M))
    FI

FUN optim : popts -> obj ** ans[mod:SORT] -> com[mod:SORT]
DEF optim(o)(proc,aM) == LET M == data(aM) IN
    verb(options(o),definition,symbol(proc));
    dOptim(o,M,proc)

FUN dOptim : popts ** mod ** obj -> ans[void] -> com[mod:SORT]
DEF dOptim(o,M,obj)(_) == 
    LET inter   == IF mergeMatchOpt?(o) THEN optimMergeMatch(o,M)(obj)
				        ELSE obj FI
	new     == IF procedure?(inter) 
			and (reuseOpt?(o) or aliasOpt?(o))
					THEN optimReuse(o,M)(inter)
					ELSE inter FI
	newM    == setObj(M,ide(new),new)
    IN
    yield(okay(newM))

-- ------------------------------------------------------------------------

FUN dump : popts ** denotation -> ans[mod:SORT] -> com[mod:SORT]
DEF dump(o,t) == dumpToFile(o,t,dumpMod)

FUN dumpMod : mod -> string
DEF dumpMod(M) == dump(M)()
