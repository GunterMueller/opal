
IMPLEMENTATION OptimMergeMatch
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- subject: Merging of simular matches of Ic cases
-- project: acc
-- author:  wg

IMPORT  Nat             ONLY nat < = 0 
        Denotation      ONLY =
        Seq             COMPLETELY
        SeqMap          COMPLETELY
        SeqCompare      ONLY eq?
        Set[nat,<]      ONLY set + = <=
        Option          COMPLETELY
        Char            ONLY char
        PrintableChar   ONLY T
        String          ONLY string

IMPORT  Ide             ONLY ide = :ide**ide->bool local? local
        IdeMap          ONLY ideMap {} def <+ !? 
        Ic              COMPLETELY
        SourceAn        COMPLETELY
        Store           COMPLETELY
        PreparedOptions ONLY popts options weakError?
        OcOptions         ONLY options optimKind?
        

/* this optimization should have been performed on the level of Ac.
   it is performed here because of a bug appearent in the 
   design of Ac: the lack of "multi-matches" of the kind

        case e of c1(x,y)|c2(x,y,_,_) => E[x,y] ....

*/   


-- ============================================================================
-- Environments
-- ============================================================================

DATA inh ==
    inh (
        popts:          popts                   -- compilation options
    )

-- ============================================================================
-- Entry
-- ============================================================================

FUN optimMergeMatch : popts ** mod -> obj -> obj

DEF optimMergeMatch(_,_)(O) == O 
DEF optimMergeMatch(o,_)(procedure(i,st,md,sy,is,os,s)) == 
    procedure(i,st,md,sy,is,os,merge(inh(o))(s))

DEF optimMergeMatch(o,_)(constant(i,st,md,sy,s)) == 
    constant(i,st,md,sy,merge(inh(o))(s))


-- ============================================================================
-- Innermost-out transformation
-- ============================================================================

FUN merge : inh -> stm -> stm

DEF merge(C)(case(Discr,Store,Matches,Default)) ==
    LET NewDefault == merge(C)(Default)
        NewMatches == mergeMatches(C,Discr,merge(C) * Matches)
    IN
    case(Discr,Store,NewMatches,NewDefault)

    FUN merge: inh -> match -> match
    DEF merge(C)(match(Tags,Store,Sels,Stms)) == match(Tags,Store,Sels,
                                                    merge(C) * Stms)

DEF merge(C)(block(Decs,Stms)) == block(Decs,merge(C) * Stms)

DEF merge(_)(Stm:stm) == Stm


-- ============================================================================
-- Merging of matches
-- ============================================================================

FUN mergeMatches: inh ** ide ** seq[match] -> seq[match]

DEF mergeMatches(C,Discr,Cand::Rest) ==
    LET (Merged,NotMerged) == mergeMatch(C,Discr,Cand,Rest)
    IN
    Merged::mergeMatches(C,Discr,NotMerged)
DEF mergeMatches(_,_,<>) == <>

FUN mergeMatch : inh ** ide ** match ** seq[match] ->
                               match ** seq[match]
DEF mergeMatch(C,Discr,Merge AS match(Tags,Store,Sels,Stms),
              (Cand AS match(CandTags,CandStore,CandSels,CandStms))::Rest) ==
    IF CandTags <= Tags THEN
        -- forget unreachable match
        mergeMatch(C,Discr,Merge,Rest)
    ELSE
    LET MergedStore? == mergeStores(Store,CandStore)
    IN
    IF avail?(MergedStore?) THEN
        -- stores are compatible
        LET Subst? == mergeSels(Sels,CandSels)
        IN
        IF avail?(Subst?) THEN
            -- selections are compatible. cont(Subst?) tells now
            -- which selected ides from Cand shall be substitued
            -- by those of the merged match
            LET MergedPath? == mergePathes(C,Discr,
                                             cont(MergedStore?),
                                             cont(Subst?),
                                             Stms,CandStms)
            IN
            IF avail?(MergedPath?) THEN
                -- merging finally sucessfull
                mergeMatch(C,Discr,
                  match(Tags + CandTags,cont(MergedStore?),
                        Sels,cont(MergedPath?)),
                  Rest)
            ELSE
                LET (Merged,NotMerged) == mergeMatch(C,Discr,Merge,Rest)
                IN
                (Merged,Cand::NotMerged)
            FI
        ELSE
            LET (Merged,NotMerged) == mergeMatch(C,Discr,Merge,Rest)
            IN
            (Merged,Cand::NotMerged)
        FI
    ELSE
        LET (Merged,NotMerged) == mergeMatch(C,Discr,Merge,Rest)
        IN
        (Merged,Cand::NotMerged)
    FI
    FI
DEF mergeMatch(_,_,Merge,<>) == (Merge,<>)

FUN mergeStores : store ** store -> option[store]
DEF mergeStores(Store,CandStore) ==
    IF isPrim?(Store) and isPrim?(CandStore) THEN avail(somePrim)
    IF isProd?(Store) and isProd?(CandStore) THEN avail(someProd)
                                             ELSE nil FI

FUN mergeSels : seq[sel] ** seq[sel] -> option[ideMap[ide]]
    -- we do not compare any store or times information
    -- here. those must be consistent if mergePathes succeeds.
DEF mergeSels(dead(_,_)::Sels,dead(_,_)::CandSels) ==
    mergeSels(Sels,CandSels)
DEF mergeSels(plain(Id,_,_)::Sels,plain(CandId,_,_)::CandSels) ==
    LET Subst? == mergeSels(Sels,CandSels)
    IN
    IF avail?(Subst?) THEN avail(def(CandId,Id,cont(Subst?)))
                      ELSE Subst? FI
DEF mergeSels(borrow(Id,_,_)::Sels,borrow(CandId,_,_)::CandSels) ==
    -- this function itself shall be subject of our optimization ...
    LET Subst? == mergeSels(Sels,CandSels)
    IN
    IF avail?(Subst?) THEN avail(def(CandId,Id,cont(Subst?)))
                      ELSE Subst? FI
DEF mergeSels(Sels,CandSels) == 
    IF forall?(dead?,Sels) and forall?(dead?,CandSels) THEN avail({}) 
                                                       ELSE nil FI


FUN mergePathes : inh ** ide ** store ** ideMap[ide] ** seq[stm] ** seq[stm] 
                                -> option[seq[stm]]

DEF mergePathes(C,Discr,DiscrStore,Subst,
                nop :: Stms, nop :: CandStms) ==
    nop ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    
DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS pos(_)) :: Stms, pos(_) :: CandStms) ==
    -- maybe we should ignore second pos only with a specific option enabled?
    -- but anyway, we are compiling with -o
    Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    
DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS halt(Msg,Kind)) :: Stms, 
                        halt(CandMsg,CandKind) :: CandStms) ==
    IF Msg = CandMsg and Kind = CandKind THEN
        Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    ELSE nil FI

    FUN = : errorKind ** errorKind -> bool
    DEF never = never == true
    DEF optional = optional == true
    DEF always = always == true
    DEF _ = _ == false

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS ass(Ins,Outs)) :: Stms, 
                        ass(CandIns,CandOuts) :: CandStms) ==
    IF eq?(=)(Ins,subst(Subst) * CandIns) 
                        and eq?(=)(Outs,subst(Subst) * CandOuts) THEN
        Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS call(Proc,Ins,Outs)) :: Stms, 
                        call(CandProc,CandIns,CandOuts) :: CandStms) ==
    IF Proc = CandProc 
                and eq?(=)(Ins,subst(Subst) * CandIns) 
                and eq?(=)(Outs,subst(Subst) * CandOuts) THEN
        Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS eval(Clos,Ins,Outs)) :: Stms, 
                        eval(CandClos,CandIns,CandOuts) :: CandStms) ==
    IF Clos = subst(Subst)(CandClos) 
                and eq?(=)(Ins,subst(Subst) * CandIns) 
                and eq?(=)(Outs,subst(Subst) * CandOuts) THEN
        Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS copy(Id,_,Times)) :: Stms, 
                        copy(CandId,_,CandTimes) :: CandStms) ==
    IF Id = subst(Subst)(CandId) and Times = CandTimes THEN
        IF Id = Discr THEN
            -- store of discrimantor attached to this copy is not 
            -- longer valid. fallback to merged store.
            copy(Id,DiscrStore,Times) ?:: 
                mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
        ELSE
            Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
        FI
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS free(Id,_,Times)) :: Stms, 
                        free(CandId,_,CandTimes) :: CandStms) ==
    IF Id = subst(Subst)(CandId) and Times = CandTimes THEN
        IF Id = Discr THEN
            free(Id,DiscrStore,Times) ?:: 
                mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
        ELSE
            Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
        FI
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (Stm AS cons(Store,Ins,Out)) :: Stms, 
                        cons(CandStore,CandIns,CandOut) :: CandStms) ==
    IF eq?(=)(Ins,subst(Subst) * CandIns) 
                and Out = subst(Subst)(CandOut) 
                and Store = CandStore THEN
        Stm ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
    ELSE nil FI

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (block(Decs,InnerStms)) :: Stms, 
                        block(CandDecs,CandInnerStms) :: CandStms) ==
    LET DecsSubst? == mergeDecs(Decs,CandDecs)
    IN
    IF avail?(DecsSubst?) THEN
        LET MergedPathes? == mergePathes(C,Discr,DiscrStore,
                                         Subst <+ cont(DecsSubst?),
                                         InnerStms,CandInnerStms)
        IN
        IF avail?(MergedPathes?) THEN
            block(Decs,cont(MergedPathes?)) ?::
                mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
        ELSE nil FI
    ELSE nil FI

    FUN mergeDecs : seq[obj] ** seq[obj] -> option[ideMap[ide]]
    DEF mergeDecs(variable(Id,_)::Decs,variable(CandId,_)::CandDecs) ==
        LET Subst? == mergeDecs(Decs,CandDecs)
        IN
        IF avail?(Subst?) THEN avail(def(CandId,Id,cont(Subst?)))
                          ELSE nil FI
    DEF mergeDecs(_,_) == avail({})

DEF mergePathes(C,Discr,DiscrStore,Subst,
                (case(Ide,Store,Matches,Default)) :: Stms, 
                        case(CandIde,_,CandMatches,CandDefault) :: CandStms) ==
    -- we walk only over cases if time consuming optimizations are
    -- enabled ...
    IF optimKind?(T,options(popts(C))) THEN
        IF Ide = subst(Subst)(CandIde) THEN
            LET (InhDiscr,ActStore) == 
                        IF Ide = Discr THEN
                            -- ActStore to be build in merged match
                            -- falls back to DiscrStore. On the other
                            -- hand, Discr becomes newly examinied,
                            -- so dont inherit it to mergeMatches
                            (local(0),DiscrStore)
                        ELSE (Discr,Store) FI
                MergedMatches? == mergeMatches(C,InhDiscr,DiscrStore,Subst,
                                               Matches,CandMatches)
            IN
            IF avail?(MergedMatches?) THEN
                LET MergedDefault? == mergePathes(C,Discr,DiscrStore,Subst,
                                                  Default%,CandDefault%)
                IN
                IF avail?(MergedDefault?) THEN
                    case(Ide,ActStore,cont(MergedMatches?),
                                  ft(cont(MergedDefault?)))
                        ?:: mergePathes(C,Discr,DiscrStore,Subst,Stms,CandStms)
                ELSE nil FI
            ELSE nil FI
        ELSE nil FI
    ELSE nil FI

DEF mergePathes(_,_,_,_,_,_) == nil
DEF mergePathes(_,_,_,_,<>,<>) == avail(<>)


FUN mergeMatches : inh ** ide ** store ** ideMap[ide] 
                ** seq[match] ** seq[match] -> option[seq[match]]

DEF mergeMatches(C,Discr,DiscrStore,Subst,
                 match(Tags,Store,Sels,MatchStms) :: Matches,
                 match(CandTags,_,CandSels,CandMatchStms) :: CandMatches) ==
    -- tries for unifying matches have already been performed innermost-out;
    -- hence we check only syntactic equalitys here. But we extend our
    -- substitution using mergeSels.
    IF Tags = CandTags THEN
        LET NewSubst? == mergeSels(Sels,CandSels)
        IN
        IF avail?(NewSubst?) THEN
            LET MergedMatchStms? == mergePathes(C,Discr,DiscrStore,
                                                Subst <+ cont(NewSubst?),
                                                MatchStms,CandMatchStms)
            IN
            IF avail?(MergedMatchStms?) THEN
                match(Tags,Store,Sels,cont(MergedMatchStms?))
                        ?:: mergeMatches(C,Discr,DiscrStore,Subst,
                                         Matches,CandMatches)
            ELSE nil FI
        ELSE nil FI
    ELSE nil FI

DEF mergeMatches(_,_,_,_,_,_) == nil
DEF mergeMatches(_,_,_,_,<>,<>) == avail(<>)


FUN ?:: : stm ** option[seq[stm]] -> option[seq[stm]]
DEF _ ?:: nil == nil[seq[stm]]
DEF Stm ?:: avail(Stms) == avail[seq[stm]](Stm::Stms)

FUN ?:: : match ** option[seq[match]] -> option[seq[match]]
DEF _ ?:: nil == nil[seq[match]]
DEF Match ?:: avail(Matches) == avail[seq[match]](Match::Matches)


FUN subst: ideMap[ide] -> ide -> ide
DEF subst(Subst)(Id) == IF local?(Id) ANDIF avail?(Subst!?Id) THEN
                            cont(Subst!?Id)
                        ELSE Id FI
