-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (context analysis)
-- Purpose:     additional library functions
--		higher order functions on sequences
-- ============================================================================
-- ============================================================================

SIGNATURE MySeqFun1[a]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

SORT a

IMPORT	Nat		ONLY nat
	Seq[a]		ONLY seq
	Seq[seq[a]]	ONLY seq

-- ---------------------------------------------------------------------------

-- existMap kann geloescht werden (wg. existMap'MySeqFun2)
FUN existMap : (a -> bool ** a) -> seq[a] -> bool ** seq[a]
	-- Mapping der Sequenz, solange die Funktion true liefert.

TYPE rel == = < > |=

FUN || : (a ** a -> bool) ** seq[a] -> seq[a]
  -- 'set'-Bildung bzgl. einer Aquivalenz
FUN ||| : (a ** a -> rel) ** seq[a] -> seq[a]
  -- 'set'-Bildung bzgl. rel
  -- n1 = n2	=> n1 oder n2 entfernen
  -- n1 < n2	=> n1 entfernen
  -- n1 > n2	=> n2 entfernen
  -- n1 |= n2	=> beide bleiben drin

FUN uniqueSort: (a ** a -> bool) -> seq[a] -> seq[a]
  -- sortiert Sequenzen und schmeisst doppelte raus ('set'-Bildung)
  --   bzgl. einer gegebenen totalen, irreflexiven Ordnung

FUN cmp : (a ** a -> rel) -> seq[a] ** seq[a] -> rel
  -- PRE: #(S1)=#(S2)
  -- Produktordnung (Lifting von der Funktion auf Sequenzen
  -- Ai:(S1.i = S2.i)				=> S1 = S2
  -- (Ai:(S1.i < S2.i)	or (S1.i = S2.i))	
  --  and Ei:(S1.i < S2.i)			=> S1 < S2
  -- (Ai:(S1.i > S2.i)	or (S1.i = S2.i))	
  --  and Ei:(S1.i > S2.i)			=> S1 > S2
  -- ELSE					=> S1 |= S2

FUN - : (a ** a -> bool) -> seq[a] ** seq[a] -> seq[a]
  -- Subtraktion der Elemente der 2.Sequenz von der ersten.

FUN combine : seq[seq[a]] -> seq[seq[a]]
  -- Bilden aller Kombinationen der Elemente der verschiedenen inneren
  -- Sequenzen.

FUN insert : (a -> bool) ** (a -> seq[a]) -> seq[a] -> seq[a]
  -- UBERFLUESSIG !!!!!!
  -- Aufsplitten der Sequenz an der Stelle, an der die erste Funktion true
  -- liefert und Einfuegen des Ergebnisses der zweiten an Stelle des gefunden
  -- Objekts, das der zweiten funktion als Argument uebergeben wird.

FUN pos : (a -> bool) ** seq[a] -> nat
  -- Position des ersten Auftretens eines Elements in einer Sequenz

FUN union : (a ** a -> a) ** (a ** a -> bool) -> seq[a] ** seq[a] -> seq[a]
  -- Mengenbildung mit gleichzeitiger Verknuepfung von Elementen mit 
  -- gleichem Schluessel

