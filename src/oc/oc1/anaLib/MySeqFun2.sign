-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (context analysis)
-- Purpose:     additional library functions
--		higher order functions on sequences
-- ============================================================================
-- ============================================================================

SIGNATURE MySeqFun2[a,b]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

SORT a b

IMPORT	Nat		ONLY nat
	Seq[a]		ONLY seq
	Seq[b]		ONLY seq
	Pair[b,bool]	ONLY pair
	Com[b]		ONLY com
	Com[pair]	ONLY com
	Com[seq[b]]	ONLY com

-- ---------------------------------------------------------------------------

FUN existMap : (a -> bool ** b) -> seq[a] -> bool ** seq[b]
	-- Mapping der Sequenz, solange die Funktion true liefert.

FUN * : (a -> b) -> seq[a] -> seq[b]
	-- gecurrite Version

FUN * : (nat ** a -> b) -> seq[a] -> seq[b]

FUN * : (a -> com[b]) -> seq[a] -> com[seq[b]]
  -- als Kommando

FUN // : (b ** a -> com[pair[b,bool]]) ** pair[b,bool]
	-> seq[a] -> com[pair[b,bool]]
FUN / : (b ** a -> com[b]) ** b -> seq[a] -> com[b]
	-- Reduce der Sequenz und update des Environments als Kommando

FUN / : (a -> com[b])  -> seq[a] -> com[b]
	-- Reduce der Sequenz als Kommando

FUN ||| : (b ** a ** a -> b ** bool) ** seq[a] ** b -> seq[a] ** b
  -- set-Bildung mit Env-Aenderung

FUN cmp : (a ** b -> bool) -> seq[a] ** seq[b] -> bool
	-- Vergleich zweier Sequenzen

FUN notDisjoint : (a ** b -> bool) -> seq[a] ** seq[b] -> bool

FUN in : (a ** b -> bool) ** seq[a] -> b -> bool
FUN in : (a ** b -> bool) ** b -> seq[a] -> bool
  -- ist das Element b in der Sequenz ?

