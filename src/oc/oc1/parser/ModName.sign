/* %
Modifiers are used to construct the abstract syntax.
Usually two abstract syntax terms resulting from parsing have to be 
combined into one .
All Modifiers are implemented partial.

@samp{mk@dots{}} rules are used to transform one result into another absy;
sometimes new errors are encountered.
*/

-- %- LAST EDIT: Thu Jun  3 19:21:27 1993 by Carola Gerke (kassandra!carola) 

SIGNATURE  ModName
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- %- author: cg
-- %- purpose: parsing Opal1 and property language

IMPORT    -- pars
          PTypes                ONLY pRes:SORT 
          Token                 ONLY token:SORT 
          ModBase               ONLY modifier:SORT mod1st mod2nd 
IMPORT    -- absy
          Absy                  ONLY absy:SORT
IMPORT    Seq[token]            ONLY seq


-- %$Special modifiers for Opal$

FUN mkIde    : modifier
FUN mkLazy : modifier
FUN mkOrigin : modifier         -- transform Name into an Origin
FUN mkKindSort: modifier        -- Name to Fct, must be SORT
FUN mkKindLaw: modifier         -- check Name for LAW

-- %- ---------------------------------------------------------------------
-- %$enrichment of Names and Name Sequences$
-- %- ---------------------------------------------------------------------
-- FUN modSort : modifier

FUN modPNSeq : modifier
    -- constructing a partname sequence 

FUN modFunFct modProdFct : modifier
    -- construction of functionalities or sort functionality

FUN modPragma modOrigin modParams modKind: modifier
    -- enrich of Origin, Params or Kind to a PartName



