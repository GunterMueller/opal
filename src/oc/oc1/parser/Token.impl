-- %- LAST EDIT: Fri Dec 11 15:37:33 1992 by Carola Gerke (kassandra!carola) 

IMPLEMENTATION Token
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- %- author: cg
-- %- purpose: parsing Opal1 and property language
IMPORT  -- lib
        Denotation      COMPLETELY
        Char            ONLY char newline tab
        CharConv        ONLY `
        Seq             COMPLETELY
        SeqReduce       COMPLETELY
        SeqMap          COMPLETELY
        Pair            ONLY pair & 
        NatConv         ONLY `
IMPORT  -- admin
        OcPos             ONLY pos = ` firstPos
        OcOptions         ONLY options:SORT
IMPORT  -- 
        ZOpts           COMPLETELY
        Terminal        ONLY terminal ` = eqSep import
        Rep             ONLY rep:SORT = ` ord nilRep import
        RepTab          ONLY ` 

DATA token == token(terminal:terminal,lexem:rep,pos:pos)


DEF = (Tok1,Tok2) == 
        ((terminal(Tok1) = terminal(Tok2)) and (lexem(Tok1) = lexem(Tok2)))
        and (pos(Tok1) = pos(Tok2))


DEF = (Tok:token,Term:terminal) == terminal(Tok) = Term
DEF = (Term:terminal,Tok:token) == terminal(Tok) = Term

-- %- ------------------------------------------------------------------------
-- %$generated token$
-- %- ------------------------------------------------------------------------

DEF impTok(P)    == token(import,import,P)
DEF eqSepTok(P)  == token(eqSep,nilRep,P)

-- %- ------------------------------------------------------------------------
-- %$Conversion$ 
-- %- ------------------------------------------------------------------------

FUN ` : token -> denotation
DEF ` (T) == `(terminal(T)) ++ `(tab) ++ `(lexem(T))
             ++ `(tab) ++ `(pos(T)) ++ `(newline)

FUN dump : token -> denotation
DEF dump (T) == 
    `(terminal(T)) ++ `(tab) ++ `(lexem(T)) 
    ++ (`(tab) ++ `(ord(lexem(T))) ++ `(tab) ++ `(pos(T)) ++ `(newline))

DEF printToken(tS & rT) == 
    "TOKEN SEQ" ++ `(newline) ++ TokStr ++ `(newline) ++ RT
        WHERE TokStr == (++ / "")(`'Token * tS)
              RT     == IF traceScan? THEN rT ` ELSE "" FI

DEF printRepToken(tS & rT) == 
    "TOKEN SEQ" ++ `(newline) ++ TokStr ++ `(newline) ++ RT
        WHERE TokStr == (++ / "")(dump * tS)
              RT     == IF traceScan? THEN rT ` ELSE "" FI

DEF printTS(TS) == 
    IF TS <>? THEN "TokenSeq <>" 
    ELSE "TokenSeq " ++ `(newline) ++ (( ++ / "")(` * TS))
    FI


