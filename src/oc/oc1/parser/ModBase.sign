--  LAST EDIT: Thu Jun  3 19:20:10 1993 by Carola Gerke (kassandra!carola) 
SIGNATURE  ModBase
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:40 $ ($Revision: 1.1.1.1 $)

-- author: cg
-- purpose: parsing Opal1 and property language

IMPORT	  -- pars
	  PTypes		ONLY pRes:SORT 
IMPORT	  -- absy
	  Absy			ONLY absy:SORT
IMPORT	  -- lib
	  Com[pRes]		ONLY com:SORT

-- ------------------------------------------------------------------------
-- Modifiers are used to construct the abstract syntax
-- usually two abstract syntax terms resulting from parsing have to be 
-- combined into one ..
-- mk.. rules are used to transform one Result into another absy
-- sometimes new errors are encountered
-- ------------------------------------------------------------------------

TYPE modifier == mod(rep: absy ** absy -> absy)
		 mkMod(rep: pRes -> pRes)

FUN modify : pRes ** modifier -> pRes
	   -- modify one Result, res and fail depends on Modifier

FUN modify : pRes ** pRes ** modifier -> pRes     
FUN modify : pRes ** pRes ** modifier -> com[pRes] 
	   -- M(R1 res?, R2 res?)  => res
	   -- M(R1 res?, R2 fail?) => res
	   -- M(R1 fail?, R2 res?) => fail
	   -- M(R1 fail?, R2 fail?) => fail only errors of R1 are propagated
FUN modBoth : pRes ** pRes ** modifier -> pRes     
	   -- M(R1 res?, R2 res?)  => res
	   -- M(R1 res?, R2 fail?) => res
	   -- M(R1 fail?, R2 res?) => fail
   -- M(R1 fail?, R2 fail?) => fail BOTH errors of R1 and R2 are propageted

FUN mod1st mod2nd : modifier
	   -- Projektion either 1st res or 2nd result


