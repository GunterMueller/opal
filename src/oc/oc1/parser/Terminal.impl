-- LAST EDIT: Fri Dec 11 23:39:04 1992 by Carola Gerke (kassandra!carola) 

IMPLEMENTATION Terminal
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-02-03 13:24:19 $ ($Revision: 1.3 $)

-- author: cg
-- purpose: parsing Opal1 and property language

IMPORT 	-- lib
	Nat		COMPLETELY
	NatConv		ONLY `	
	Set		COMPLETELY
IMPORT 	
	Rep		COMPLETELY	

IMPORT  Denotation	COMPLETELY
	Char		COMPLETELY
	CharConv	ONLY `
       Map ONLY map {} def !
       SetReduce ONLY /

DATA terminal == abs(toNat:nat)
-- 'toNat' should be termed 'rep' but this is confusing with SORT rep'Rep

-- %- -------------------------------------------------------------------------
-- %$Relations$
-- %- -------------------------------------------------------------------------

FUN  =	< > |= : terminal ** terminal -> bool
DEF  T1 = T2  == toNat(T1) = toNat(T2)
DEF  T1 < T2  == toNat(T1) < toNat(T2)
DEF  T1 > T2  == toNat(T1) > toNat(T2)
DEF  T1 |= T2 == toNat(T1) |= toNat(T2)

-- %- -------------------------------------------------------------------------
-- %$Conversions$
-- %- -------------------------------------------------------------------------

FUN ideOrKeyToTerminal : rep -> terminal
DEF ideOrKeyToTerminal (R) == 
    IF R <= lastKeyword THEN toTerm(ord(R))
    IF R generated?	THEN ignPat
    ELSE ide
    FI

FUN printRep : rep -> () -> denotation
DEF printRep(Rep)() == `(ord(Rep)) ++ `(tab) ++ lexem(Rep)

FUN ` : terminal -> denotation
DEF ` (Terminal) ==
    IF (Terminal toNat) <= ord(lastKeyword)  THEN `` (Terminal toNat)
    IF (Terminal toNat) = (ide toNat)	     THEN "Ide" 
    IF (Terminal toNat) = (ignPat toNat)     THEN " _ " 
    IF (Terminal toNat) = (denotation toNat) THEN "Denotation" 
    IF (Terminal toNat) = (pragma toNat)     THEN "Pragma" 
    IF (Terminal toNat) = (eqSep toNat)      THEN "end of equation" 
    IF (Terminal toNat) = (eof toNat)        THEN "Eof" 
    ELSE "Unknown Terminal"
    FI

DEF termSet == 
    incl(spc, incl(pre, incl(post,
    incl(theory, incl(assert, incl(assume,                              
    incl(proof, incl(turnstile, incl(prop, incl(jstf, 
    incl(andelse,incl(orelse, incl(as, incl(completely, incl(data, 
    incl(def, incl(else, incl(fi,
    incl(fun, incl(if, incl(implementation, incl(import, incl(in, incl(let,
    incl(only, incl(otherwise, incl(signature, incl(sort, incl(then, 
    incl(type, incl(where, incl(equation, incl(arrow, incl(product, 
    incl(colon, incl(lambda, incl(dot, incl( prBeg, incl(prEnd,
    incl(openBr, incl(closeBr, 
    incl(comma, incl(apo, incl(openSqBr, incl(closeSqBr, incl(ide, incl(ignPat,
    incl(denotation, incl(pragma, incl(all, incl(and, incl(dfd, incl(ex, 
    incl(external, incl(internal, incl(not, incl(law, incl(or, 
    incl( properties, incl( equal, incl( implies, incl(  eqv, incl(ineq,
    incl(eof,incl(eqSep,error%)))
    ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

-- %- ------------------------------------------------------------------------
-- %$Primitive Conversion terminal -> nat$
--	     and (a partial) nat -> terminal 
-- %- ------------------------------------------------------------------------

DEF error      		== abs(ord(error))
DEF openBr		== abs(ord(openBr))
DEF closeBr		== abs(ord(closeBr))
DEF comma		== abs(ord(comma))
DEF openSqBr		== abs(ord(openSqBr))
DEF closeSqBr		== abs(ord(closeSqBr))
DEF apo			== abs(ord(apo))
DEF as			== abs(ord(as))
DEF completely		== abs(ord(completely))
DEF data		== abs(ord(data))
DEF def			== abs(ord(def))
DEF else		== abs(ord(else))
DEF fi			== abs(ord(fi))
DEF fun			== abs(ord(fun))
DEF if			== abs(ord(if))
DEF implementation	== abs(ord(implementation))
DEF import		== abs(ord(import))
DEF in			== abs(ord(in))
DEF let			== abs(ord(let))
DEF only		== abs(ord(only))
DEF otherwise		== abs(ord(otherwise))
DEF sort		== abs(ord(sort))
DEF signature		== abs(ord(signature))
DEF then		== abs(ord(then))
DEF type		== abs(ord(type))
DEF where		== abs(ord(where))
DEF equation		== abs(ord(equation))
DEF arrow		== abs(ord(arrow))
DEF colon		== abs(ord(colon))
DEF product		== abs(ord(product))
DEF lambda		== abs(ord(lambda))
DEF dot			== abs(ord(dot))
DEF prBeg		== abs(ord(prBeg))
DEF prEnd		== abs(ord(prEnd))

DEF all			== abs(ord(all))
DEF and			== abs(ord(and))
DEF dfd			== abs(ord(dfd))
DEF ex			== abs(ord(ex))
DEF external		== abs(ord(external))
DEF internal		== abs(ord(internal))
DEF law			== abs(ord(law))
DEF not			== abs(ord(not))
DEF or			== abs(ord(or))
DEF properties		== abs(ord(properties))
DEF equal		== abs(ord(equal))
DEF implies		== abs(ord(implies))
DEF eqv			== abs(ord(eqv))
DEF ineq		== abs(ord(ineq))

DEF andelse		== abs(ord(andelse))
DEF orelse		== abs(ord(orelse))

DEF proof  == abs(ord(proof))
DEF turnstile == abs(ord(turnstile))
DEF prop == abs(ord(prop))
DEF jstf == abs(ord(jstf))
DEF spc == abs(ord(spc))
DEF pre == abs(ord(pre))
DEF post == abs(ord(post))
DEF theory == abs(ord(theory))
DEF assert == abs(ord(assert))
DEF assume == abs(ord(assume))

DEF ignPat		== abs(ord(assume) + 1)  
/* %- vorher abs(ord(lastKeyword) + 1), aber das fuehrte zu Verwechslungen
      mit dem Schluesselwort PROOF, was wiederum den Praeparser veranlasste,
      die Token-Liste vor ignPat zu trennen! (kd) */
DEF ide			== abs(toNat(ignPat) +1)
DEF denotation		== abs(toNat(ide) + 1)
DEF pragma		== abs(toNat(denotation) + 1)
DEF eof			== abs(toNat(pragma) + 1)
DEF eqSep		== abs(toNat(eof) + 1)

-- %- ------------------------------------------------------------------------

DEF error?(T) 		== T = error
DEF openBr?(T)		== T = openBr
DEF closeBr?(T)		== T = closeBr
DEF comma?(T)		== T = comma
DEF openSqBr?(T)	== T = openSqBr
DEF closeSqBr?(T)	== T = closeSqBr
DEF apo?(T)		== T = apo
DEF as?(T)		== T = as
DEF completely?(T)	== T = completely
DEF data?(T)		== T = data
DEF def?(T)		== T = def
DEF else?(T)		== T = else
DEF fi?(T)		== T = fi
DEF fun?(T)		== T = fun
DEF if?(T)		== T = if
DEF implementation?(T)	== T = implementation
DEF import?(T)		== T = import
DEF in?(T)		== T = in
DEF let?(T)		== T = let
DEF only?(T)		== T = only
DEF otherwise?(T)	== T = otherwise
DEF sort?(T)		== T = sort
DEF signature?(T)	== T = signature
DEF then?(T)		== T = then
DEF type?(T)		== T = type
DEF where?(T)		== T = where
DEF equation?(T)	== T = equation
DEF arrow?(T)		== T = arrow
DEF colon?(T)		== T = colon
DEF product?(T)		== T = product
DEF lambda?(T)		== T = lambda
DEF dot?(T)		== T = dot
DEF prBeg?(T)		== T = prBeg
DEF prEnd?(T)		== T = prEnd

DEF all?(T)		== T = all
DEF and?(T)		== T = and
DEF dfd?(T)		== T = dfd
DEF ex?(T)		== T = ex
DEF external?(T)	== T = external
DEF internal?(T)	== T = internal
DEF law?(T)		== T = law
DEF not?(T)		== T = not
DEF or?(T)		== T = or
DEF properties?(T)	== T = properties
DEF equal?(T)		== T = equal
DEF implies?(T)		== T = implies
DEF eqv?(T)		== T = eqv
DEF ineq?(T)		== T = ineq

DEF andelse?(T)		== T = andelse
DEF orelse?(T)		== T = orelse

DEF proof?(T) == T = proof
DEF turnstile?(T) == T = turnstile
DEF prop?(T) == T = prop
DEF jstf?(T) == T = jstf
DEF spc?(T) == T = spc
DEF pre?(T) == T = pre
DEF post?(T) == T = post
DEF theory?(T) == T = theory
DEF assert?(T) == T = assert
DEF assume?(T) == T = assume

DEF ignPat?(T)		== T = ignPat
DEF ide?(T)		== T = ide
DEF denotation?(T)	== T = denotation
DEF pragma?(T)		== T = pragma
DEF eof?(T)		== T = eof
DEF eqSep?(T)		== T = eqSep

-- %- ------------------------------------------------------------------------

FUN toTerm : nat -> terminal
DEF toTerm(N) == 

/* lookUpMap ! N

FUN lookUpMap: map[nat, <, terminal]
DEF lookUpMap == ((\\t, M. (toNat(t), t) def M), {}) / termSet

*/


	IF N = toNat(openBr) 		THEN openBr
	IF N = toNat(closeBr)		THEN closeBr
	IF N = toNat(comma)		THEN comma
	IF N = toNat(openSqBr)		THEN openSqBr
	IF N = toNat(closeSqBr)		THEN closeSqBr
	IF N = toNat(apo)		THEN apo
	IF N = toNat(as)		THEN as 
	IF N = toNat(completely) 	THEN completely
	IF N = toNat(data)		THEN data
	IF N = toNat(def)		THEN def
	IF N = toNat(else)		THEN else
	IF N = toNat(fi)		THEN fi
	IF N = toNat(fun)		THEN fun
	IF N = toNat(if)		THEN if
	IF N = toNat(implementation)	THEN implementation
	IF N = toNat(import)		THEN import
	IF N = toNat(in)		THEN in
	IF N = toNat(let)		THEN let
	IF N = toNat(only)		THEN only
	IF N = toNat(otherwise)		THEN otherwise
	IF N = toNat(sort)		THEN sort
	IF N = toNat(signature)		THEN signature
	IF N = toNat(then)		THEN then
	IF N = toNat(type)		THEN type
	IF N = toNat(where)		THEN where
	IF N = toNat(equation)		THEN equation
	IF N = toNat(arrow)		THEN arrow
	IF N = toNat(product)		THEN product
	IF N = toNat(colon)		THEN colon
	IF N = toNat(lambda)		THEN lambda
	IF N = toNat(dot)		THEN dot
	IF N = toNat(prBeg)		THEN prBeg
	IF N = toNat(prEnd)		THEN prEnd
	IF N = toNat(all)		THEN all
	IF N = toNat(and)		THEN and
	IF N = toNat(dfd)		THEN dfd 
	IF N = toNat(ex)		THEN ex
	IF N = toNat(external)		THEN external
	IF N = toNat(internal)		THEN internal
	IF N = toNat(law)		THEN law
	IF N = toNat(not)		THEN not
	IF N = toNat(or)		THEN or
	IF N = toNat(properties)	THEN properties
	IF N = toNat(equal)		THEN equal
	IF N = toNat(implies)		THEN implies
	IF N = toNat(eqv)		THEN eqv
	IF N = toNat(ineq)		THEN ineq
	IF N = toNat(andelse)		THEN andelse
	IF N = toNat(orelse)		THEN orelse
    IF N = toNat(proof) THEN proof
    IF N = toNat(turnstile) THEN turnstile
    IF N = toNat(prop) THEN prop
    IF N = toNat(jstf) THEN jstf
    IF N = toNat(spc) THEN spc
    IF N = toNat(pre) THEN pre
    IF N = toNat(post) THEN post
    IF N = toNat(theory) THEN theory
    IF N = toNat(assume) THEN assume
    IF N = toNat(assert) THEN assert
	FI
