-- LAST EDIT: Tue Jun 15 18:30:52 1993 by Andreas Fett (paris!fetti) 
-- ============================================================================
-- Autor:	af
-- Projekt:	OPAL1-Compiler
-- Zweck:	Speicherung von Wissen ueber die "Lokalitaet" aller
--		Bezeichner (lokal,lokal oder Konstruktor,global).
-- Changes:	af, Jun 15 1993: added functions for storing type of locals
--				   and for getting identifiers of locals
-- ============================================================================

SIGNATURE Knowledge
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:45 $ ($Revision: 1.1.1.1 $)

IMPORT	Nat	       ONLY nat
	Pair[fct,bool] ONLY pair
	Seq[pair]      ONLY seq
	Seq[rep]       ONLY seq

	Rep	       ONLY rep

	Fct[name]      ONLY fct

	Name	       ONLY name


SORT knowl

FUN empty: knowl
-- alle Bezeichner stehen fuer globale Namen

FUN defAsLocal defAsLocalOrConstr: rep**nat**knowl -> knowl
-- der Bezeichner steht fuer einen lokalen Namen bzw.
--   evtl. fuer einen lokalen Namen mit eindeutiger Nummer

FUN isLocal? isLocalOrConstr? isGlobal?
    canBeLocal? canBeGlobal?: rep**knowl -> bool
-- Test auf die Art des durch den Bezeichner referenzierten Namen

FUN no: rep**knowl -> nat
-- Nummer des Bezeichners eines (moeglicherweise) lokalen Namens

FUN locals: knowl -> seq[rep]
-- Sequenz aller (moeglichen) Bezeichner von lokalen Namen

FUN setFcts: rep**seq[pair[fct,bool]]**knowl -> knowl
-- setzt die moeglichen Typen (variablenfrei oder nicht) eines lokalen Namens

FUN knownFcts: rep**knowl -> seq[pair[fct[name],bool]]
-- moegliche Typen (variablenfrei oder nicht) eines lokalen Namens
