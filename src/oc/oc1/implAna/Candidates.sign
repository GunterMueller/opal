/* %-
-- LAST EDIT: Sun Nov  7 13:58:45 1993 by Andreas Fett (paris!fetti) 
-- ============================================================================
-- Autor:	af
-- Projekt:	OPAL1-Compiler
-- Zweck:	Speicherung der Zuordnungsfunktionen (und abgeleiteter
--		Information), die Kandidaten fuer die Identifizierungs-
--		funktion sind;
--		nur sinnvoll mit einem zugeordneten Ausdruck
-- Changes:	af, May 13 1993: added lazy combines (fixes Bug oc1.28)
--				 added positions to empty/single
--				 added eval and arguments to hide
--		af, Jun 15 1993: added extractLocalFcts
--		af, Jun 27 1993: added handling of mix expressions
-- ============================================================================
*/

SIGNATURE Candidates
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:45 $ ($Revision: 1.1.1.1 $)

IMPORT	Nat		ONLY nat
	Pair[fct,bool]	ONLY pair
	Seq[nat]	ONLY seq
	Seq[rep]	ONLY seq
	Seq[subst]	ONLY seq
	Seq[reason]	ONLY seq
	Seq[cands]	ONLY seq
	Seq[idName]	ONLY seq
	Seq[idFct]	ONLY seq
	Seq[pair]	ONLY seq

	Pos		ONLY pos
	Error		ONLY err:SORT

	Rep		ONLY rep
	Fct[name]	ONLY fct

	AnalyzedGlobSig	ONLY globSig name

	Reason		ONLY reason
	Substitution	ONLY subst
    PrioTab ONLY prio:SORT rule:SORT

TYPE idName == idName (name:name,rep:rep,fct:fct,subst:subst)

TYPE idFct == idFct (fct:fct,subst:subst)

SORT cands
-- Menge von Zuordnungsfunktionen

FUN none: err -> cands
-- leere Menge von Zuordnungsfunktionen (mit Grund)

FUN empty: seq[idFct]**pos -> cands
-- mehrelementige Menge von leeren Zuordnungsfunktionen

FUN single: seq[idName]**pos -> cands
-- Menge von 'einstelligen' Zuordnungsfunktionen

SORT mode
-- Art der Bildung von Kombinationen

FUN eager	   -- can be custumized by -zlazyCands to behave Lazy
    lazy: mode	   -- can be custumized by -zeagerCands to behave Eager

FUN combine: mode -> globSig**pos**nat ->
             (fct**fct**subst**nat->fct**seq[subst]**nat**seq[reason]) ->
             cands**cands -> cands**nat
-- Kombination zweier Mengen von Zuordnungsfunktion
-- Argument ist eine Funktion zur Kombination der Funktionalitaeten,
--   die entweder
--   - die Resultatsfunktionalitaet, alle moeglichen Substitutionen,
--       die erste unbenutzte Variable und eine leere Liste von Gruenden, oder
--   - eine Funktionalitaet, eine Fehlersubstitution, die erste unbenutzte
--       Variable und die Liste der Gruende, die zum Scheitern der
--       Kombination fuehrten,
--   liefert

FUN combineSeq: mode -> globSig**pos**nat ->
                (fct**fct**subst**nat->fct**seq[subst]**nat**seq[reason]) ->
                seq[cands] -> cands**nat
-- Kombination einer (nicht leeren!) Sequenz von Mengen von
--   Zuordnungsfunktionen
-- Die als Argument angegebene Funktion zur Kombination zweier
--   Funktionalitaeten (s.o.) muss assoziativ sein!

FUN hide: globSig**nat -> seq[rep] -> cands -> cands**nat
-- macht lokale Namen unsichtbar

FUN eval: globSig**nat -> cands -> cands**nat
-- wertet alle verzoegerten Kandidatenmengen aus

FUN extractLocalFcts: globSig**nat -> cands -> rep
		      -> seq[pair[fct,bool]]**cands**nat
-- identifizierte Funktionalitaeten eines lokalen Namens mit dem angegebenen
--   Bezeichner
-- dabei wird u.U. eine verzoegerte Kandidatenmenge ausgewertet

-- ----------------------------------------------------------------------------
-- die folgenden Funktionen duerfen nicht mit verzoegerten Kandidatenmengen
--   aufgerufen werden!

FUN none?: cands -> bool
    errors: cands -> err
-- Test auf die leere Menge von Zuordnungsfunktionen und
-- Selektion der Fehlermenge fuer eine leere Menge von Zuordnungsfunktionen

FUN extract: globSig -> cands -> seq[idName]
-- identifizierte Namen aus einer (nicht leeren) Menge von
--   einstelligen Zuordnungsfunktionen

FUN split: cands -> cands**cands
-- Aufteilen einer (nicht leeren) Menge von Zuordnungsfunktionen, die
--   durch combine aufgebaut wurde.

FUN splitSeq: nat -> cands -> seq[cands]
-- Aufteilen einer (nicht leeren) Menge von Zuordnungsfunktionen, die
--   durch combineSeq aus n Mengen von Zuordnungsfunktionen aufgebaut wurde.

FUN bestOf: (name**name->bool) -> cands -> cands
-- Reduzieren einer (nicht leeren!) Menge von Zuordnungsfunktionen auf die
--   Zuordnungsfunktionen, die in ihrem linken Teil maximal
--   bzgl. einer partiellen Ordnung auf Namen sind

-- ----------------------------------------------------------------------------
-- Funktionen zur Bearbeitung von mix-Ausdruecken

FUN combineMix: bool
		-> mode
		-> globSig**pos**nat
		-> (fct[name]**fct[name]**subst**nat
		    ->fct[name]**seq[subst]**nat**seq[reason])
		 **(fct[name]**fct[name]**subst**nat
		    ->fct[name]**seq[subst]**nat**seq[reason])
		-> cands**cands**cands**nat
		-> cands**nat
-- Kombination dreier Mengen von Zuordnungsfunktionen

/* %- nun - ergänzt - in PrioTab 
TYPE prio == left right both

TYPE rule == none assumedLAssoc assumedRAssoc
*/

FUN uniteMix: seq[cands]**pos -> cands
-- vereinigt Kandidatenmengen

FUN bestMix: (prio**fct[name]**name**fct[name]**name**fct[name]**subst
	      -> prio**rule)
	     ** (fct[name]->fct[name]**fct[name])
	     -> cands -> cands
-- entfernt Kandidaten, fuer die bessere existieren

FUN unmix: (prio**fct[name]**name**fct[name]**name**fct[name]**subst
	    -> prio**rule)
	   ** (fct[name]->fct[name]**fct[name])
	   -> cands
	   -> cands**cands**cands**seq[nat]**rule
-- entfernt Kandidaten, fuer die bessere existieren
-- teilt restliche (mit combineMix aufgebaute) Kandidaten auf,
-- liefert (falls eindeutig) die Regel, nach der die Kandidaten ausgewaehlt
--   wurden, sonst 'none'
