-- LAST EDIT: Mon Sep  4 18:36:09 1995 by Christian Maeder (troilos!maeder) 
-- ============================================================================
-- Autor:       af
-- Projekt:     OPAL1-Compiler
-- ============================================================================

IMPLEMENTATION RepSet
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT  Pair            COMPLETELY
        Triple          COMPLETELY
        Seq             COMPLETELY
        SeqReduce       ONLY /
        SeqMap          ONLY *
        SetReduce       ONLY /
        NatMap          COMPLETELY
        NatMapConv      COMPLETELY

IMPORT  Compose         ONLY o
        Rep             ONLY rep ord 
        OcPos           ONLY pos

DATA repSet == repSet(map:natMap[pair[rep,pos]])

DEF {} == repSet({})

DEF (rep,pos)% == repSet((ord(rep), &(rep,pos)) def {})

DEF (rep,pos) incl repSet(map) == repSet((ord(rep), &(rep,pos)) def map)

DEF repSet(map1)+repSet(map2) == repSet(map1<+map2)

DEF repSet(map1)-repSet(map2) == 
repSet(/(\\N,M. undef(N, M), map1, dom(map2)))

DEF map1 disjoint map2 == map((map1*map2)){}?

DEF rep in repSet(map) == ord(rep) def? map

DEF pos(rep,repSet(map)) == 2nd(map!ord(rep))

FUN * : repSet ** repSet -> repSet
DEF repSet(map1)*repSet(map2) ==
repSet(/(\\N,M. IF N def? map1 THEN M ELSE undef(N, M) FI,
                map2, dom(map2)))

FUN * : repSet**repSet -> seq[triple[rep,pos,pos]]
DEF repSet(map1)*repSet(map2) == 
/(\\P,S. IF 1st(P) def? map1 THEN 
        &(1st(2nd(P)), 2nd(map2!1st(P)), 2nd(2nd(P))) :: S
        ELSE S FI,
                <>, asSeq(map2))

DEF toSeq(repSet(map)) == 1st * codom(map)

