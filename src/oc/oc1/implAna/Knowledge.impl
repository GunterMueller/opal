-- LAST EDIT: Tue Jun 15 18:34:01 1993 by Andreas Fett (paris!fetti) 
-- ============================================================================
-- Autor:	af
-- Projekt:	OPAL1-Compiler
-- Changes:	af, May 18 1993: added functions for storing type of locals
-- ============================================================================

IMPLEMENTATION Knowledge
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT	Nat	     ONLY nat
	Seq	     COMPLETELY
	SeqReduce    COMPLETELY
	SeqMap       COMPLETELY
	Option	     COMPLETELY
	Pair	     COMPLETELY
	Triple	     COMPLETELY

	Map[rep,<,triple[bool,nat,seq[pair[fct,bool]]]] COMPLETELY
	MapConv[rep,<,triple[bool,nat,seq[pair[fct,bool]]]] ONLY asSeq

IMPORT	Fct[name] ONLY fct

IMPORT	Rep	ONLY rep <

IMPORT	Name	ONLY name

DATA knowl == knowl(map:map)

DEF empty == knowl({})

DEF defAsLocal(r,no,knowl(map)) == knowl(def(r,&(true,no,<>),map))

DEF defAsLocalOrConstr(r,no,knowl(map)) == knowl(def(r,&(false,no,<>),map))

DEF isLocal?(r,knowl(map)) ==
  LET ans == map !? r IN
  IF ans nil?   THEN false
  IF ans avail? THEN 1st(cont(ans))
  FI

DEF isLocalOrConstr?(r,knowl(map)) ==
  LET ans == map !? r IN
  IF ans nil?   THEN false
  IF ans avail? THEN ~(1st(cont(ans)))
  FI

DEF isGlobal?(r,knowl(map)) == ~(def?(r,map))

DEF canBeLocal?(r,knowl(map)) == def?(r,map)

DEF canBeGlobal?(r,knowl(map)) ==
  LET ans == map !? r IN
  IF ans nil?   THEN true
  IF ans avail? THEN ~(1st(cont(ans)))
  FI

DEF no(r,knowl(map)) == 2nd(map!r)

FUN locals: knowl -> seq[rep]
-- Sequenz aller (moeglichen) Bezeichner von lokalen Namen

DEF locals(knowl(map)) == 1st * asSeq(map)

DEF setFcts(r,fcts,knowl(map)) ==
  LET ans == map ! r
  IN knowl(def(r,&(1st(ans),2nd(ans),fcts),map))

DEF knownFcts(r,knowl(map)) == 3rd(map!r)
