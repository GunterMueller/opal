-- LAST EDIT: Fri Jul  2 12:14:19 1993 by Andreas Fett (paris!fetti) 
-- ============================================================================
-- Autor:       af
-- Projekt:     OPAL1-Compiler
-- ============================================================================

IMPLEMENTATION LawAnalysis
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT  Nat             ONLY nat 0

        OcPos             ONLY pos `
        OcError           ONLY err ok errKind error ok? +
                             string

        Rep             ONLY rep `

        PartName        COMPLETELY
        Impl[rep]       COMPLETELY
        Impl[partName]  COMPLETELY
        Impl[name]      COMPLETELY

        AnalyzedGlobSig ONLY globSig name locSig defLaw law

        Knowledge       ONLY knowl empty
        RepSet          ONLY repSet
        Candidates      ONLY cands errors none?:cands->bool eval
        TypeIndepFormAnalysis ONLY rearrange
        TypeDepFormAnalysis   ONLY analyze substitute

FUN target: law[partName] -> rep

DEF target(law(ide,_,_)) == ide

FUN analyzeLaw: law[partName]**globSig -> globSig**err

DEF analyzeLaw(law0,sig) ==
  LET law == extendPos(tPos)(law0)
      (rearrForm,usedReps,scopeErr) == typeIndepAna(law)
  IN IF ~(scopeErr ok?) THEN (sig,scopeErr)
     ELSE LET cands == typeDepAna(rearrForm,sig)
          IN IF cands none? THEN (sig,scopeErr+errors(cands))
             ELSE LET (newForm,extSig,partSig,ambigErr) ==
                                substitute(rearrForm,cands,sig,usedReps)
                  IN IF ~(ambigErr ok?) THEN (extSig,scopeErr+ambigErr)
                     ELSE LET (newSig,implErr) ==
                                include(extSig,ide(law),newForm,partSig)
                          IN (newSig,(scopeErr+ambigErr)+implErr)
                     FI
             FI
     FI

FUN typeIndepAna: law[partName] -> law[partName]**repSet**err

DEF typeIndepAna(law(ide,form,pos)) ==
  LET (rearrForm,_,usedReps,scopeErrHints) == rearrange(form)
  IN (law(ide,rearrForm,pos),
      usedReps,
      scopeErrHints)

FUN typeDepAna: law[partName]**globSig -> cands

DEF typeDepAna(law(ide,form,pos),sig) ==
  LET (cands,_,interVar) == analyze(form,sig,empty,0,0)
      (finalCands,_) == eval(sig,interVar)(cands)
  IN finalCands

FUN substitute: law[partName]**cands**globSig**repSet
                -> law[name]**globSig**locSig**err

DEF substitute(law(ide,form,pos),cands,sig,usedReps) ==
  LET (newForm,newSig,locSig,ambigErr) == substitute(form,cands,sig,0)
  IN (law(ide,newForm,pos),newSig,locSig,ambigErr)

FUN include: globSig**rep**law[name]**locSig -> globSig**err

DEF include(sig,rep,l AS law(ide,form,p),lSig) ==
  LET (newSig,ok?) == defLaw(sig,rep,l,lSig)
  IN IF ok? THEN (newSig,ok)
     ELSE LET (prevLaw,_) == law(sig,rep)
              prevLawPos == pos(prevLaw)
          IN (newSig,err(error,duplicateLaw,rep`,prevLawPos`,p))
     FI

FUN duplicateLaw: denotation

DEF duplicateLaw == "duplicate law %s: already defined at %s"
