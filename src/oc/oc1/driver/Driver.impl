IMPLEMENTATION Driver
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Void            COMPLETELY
        Pair            COMPLETELY
        Triple          COMPLETELY
        Seq             ONLY seq
        Com             COMPLETELY
        ComCompose      COMPLETELY
        Stream          COMPLETELY

        OcVerbose         COMPLETELY
        OcOptions         ONLY options sign? impl? extp? intp? cop? 
        OcExit          ONLY exit languageError
        OcSetup         COMPLETELY

        Rep             ONLY repTab
        Token           ONLY token:SORT
        Struct          ONLY struct imports

        Scanner         ONLY scan
        Parser          ONLY parseSign parseImpl parseIntp parseExtp
        AbsyIO          ONLY readAbsy writeAbsy

        GlobSig         ONLY globSig

        AbsyPrep                ONLY dumpDeps import
        SigAna                  ONLY sigAna
        ImplementationAnalysis  ONLY implAna
        PatternAnalysis         ONLY pattAna
        InterOpalGeneration     ONLY dumpInterOpal

-- ---------------------------------------------------------------------------

FUN oc1: com[void]

DEF oc1 ==
  init(oc1) ;
  (\\a.IF a fail? THEN -- yield(fail(error(a))) ; exit(a)
                        exit(fail(error(a)))
       IF a okay? THEN
         LET options == data(a) IN compile(options) ; finit(options)
       FI)

-- ---------------------------------------------------------------------------

FUN compile: options -> com[void]

DEF compile(options) ==
  IF sign?(options) THEN compileSign(options)
  IF impl?(options) THEN compileImpl(options)
  IF extp?(options) THEN compileExtp(options)
  IF intp?(options) THEN compileIntp(options)
  FI

-- ---------------------------------------------------------------------------
FUN onlyParse?: options -> bool
DEF onlyParse?(o) == cop?("onlyParse",o)

FUN doNotParse?: options -> bool
DEF doNotParse?(o) == cop?("doNotParse",o)

FUN compileSign: options -> com[void]

DEF compileSign(options) ==
  IF onlyParse? (options) THEN 
        syntaxAnaSign(options) & (\\StructRep.
        dumpDeps(options, imports(1st(StructRep))) & (\\ _ .
        writeAbsy(options)(StructRep)))
  IF doNotParse?(options) THEN readAbsy     (options) & contextAnaSign(options)
  ELSE                         syntaxAnaSign(options) & contextAnaSign(options)
  FI

-- ---------------------------------------------------------------------------

FUN compileImpl: options -> com[void]

DEF compileImpl(options) ==
  IF onlyParse? (options) THEN
        syntaxAnaImpl(options) & (\\StructRep.
        dumpDeps(options, imports(1st(StructRep))) & (\\ _ .
        writeAbsy(options)(StructRep)))
  IF doNotParse?(options) THEN
       (readAbsy     (options) & contextAnaImpl(options)) & acTrans(options)
  ELSE (syntaxAnaImpl(options) & contextAnaImpl(options)) & acTrans(options)
  FI
   

-- ---------------------------------------------------------------------------

FUN compileExtp: options -> com[void]
DEF compileExtp(options) ==
  IF onlyParse? (options) THEN 
        syntaxAnaExtp(options) & (\\StructRep.
        dumpDeps(options, imports(1st(StructRep))) & (\\ _ .
        writeAbsy(options)(StructRep)))
  IF doNotParse?(options) THEN readAbsy     (options) & contextAnaExtp(options)
  ELSE                         syntaxAnaExtp(options) & contextAnaExtp(options)
  FI

-- ---------------------------------------------------------------------------

FUN compileIntp: options -> com[void]
DEF compileIntp(options) ==
  IF onlyParse? (options) THEN 
        syntaxAnaIntp(options) & (\\StructRep.
        dumpDeps(options, imports(1st(StructRep))) & (\\ _ .
        writeAbsy(options)(StructRep)))
  IF doNotParse?(options) THEN readAbsy     (options) & contextAnaIntp(options)
  ELSE                         syntaxAnaIntp(options) & contextAnaIntp(options)
  FI

-- ---------------------------------------------------------------------------

FUN syntaxAnaSign: options -> com[pair[struct,repTab]]

DEF syntaxAnaSign(options) ==
  verb(options,phase,syntaxAnaPhase) ;
  (\\ _ .scan(options) & parseSign(options))

-- ---------------------------------------------------------------------------

FUN syntaxAnaImpl: options -> com[pair[struct,repTab]]

DEF syntaxAnaImpl(options) ==
  verb(options,phase,syntaxAnaPhase) ;
  (\\ _ .scan(options) & parseImpl(options))

-- ---------------------------------------------------------------------------

FUN syntaxAnaExtp: options -> com[pair[struct,repTab]]
DEF syntaxAnaExtp(options) ==
  verb(options,phase,syntaxAnaPhase) ;
  (\\ _ .scan(options) & parseExtp(options))

-- ---------------------------------------------------------------------------

FUN syntaxAnaIntp: options -> com[pair[struct,repTab]]
DEF syntaxAnaIntp(options) ==
  verb(options,phase,syntaxAnaPhase) ;
  (\\ _ .scan(options) & parseIntp(options))

-- ---------------------------------------------------------------------------

FUN contextAnaSign: options -> pair[struct,repTab] -> com[void]

DEF contextAnaSign(options)(input AS struct&repTab) ==
  verb(options,phase,contextAnaPhase) ; (\\ _ .
  (sigAna(options)(input) & implAna(options,struct)) & pattAna(options) &
  dumpInterOpal(options))


-- ---------------------------------------------------------------------------

FUN contextAnaImpl: options -> pair[struct,repTab] -> com[globSig]

DEF contextAnaImpl(options)(input AS struct&repTab) ==
  verb(options,phase,contextAnaPhase) ;
  (\\ _ .
        sigAna(options)(input) & 
        implAna(options,struct) &
        pattAna(options) & (\\s.
        dumpInterOpal(options)(s) & (\\ _ .
        yield(okay(s)))
  ))


-- ---------------------------------------------------------------------------

FUN contextAnaExtp: options -> pair[struct,repTab] -> com[void]

DEF contextAnaExtp(options)(input AS struct&repTab) ==
  verb(options,phase,contextAnaPhase) ; (\\ _ .
  sigAna(options)(input) & implAna(options,struct) & pattAna(options) & 
  dumpInterOpal(options)
  )

-- ---------------------------------------------------------------------------

FUN contextAnaIntp: options -> pair[struct,repTab] -> com[void]

DEF contextAnaIntp(options)(input AS struct&repTab) ==
  verb(options,phase,contextAnaPhase) ;
  (\\ _ .((sigAna(options)(input) & implAna(options,struct)) &
           pattAna(options)) & dumpInterOpal(options))

-- ---------------------------------------------------------------------------

FUN acTrans: options -> globSig -> com[void]

DEF acTrans(_)(_) == succeed(nil)

-- ===========================================================================
-- Texte

FUN syntaxAnaPhase contextAnaPhase: denotation
DEF syntaxAnaPhase == "syntax checking ..."
DEF contextAnaPhase == "context checking ..."
