-- %- LAST EDIT: Thu Jun  3 11:26:51 1993 by Carola Gerke (kassandra!carola) 

SIGNATURE Absy
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- %- Autorin:     cg
-- %- Projekt:     OPAL1-Compiler (Scanner, Parser)
-- %- Zweck:       collecting the types of the abstract syntax into one type

IMPORT    -- absy
          Struct                ONLY struct:SORT origin:SORT import:SORT
                                     globPragma
          Impl[partName]        ONLY expr:SORT eq:SORT sortImpl:SORT 
                                     variant:SORT comp:SORT guard:SORT
                                     formula:SORT law:SORT spc:SORT
                                     proofHead:SORT proofBody:SORT
          Fct[partName]         ONLY fct:SORT
          PartName              ONLY kind:SORT partName:SORT
IMPORT    -- reps
          Pragma                ONLY pragma:SORT
IMPORT    -- admin
          OcPos                   ONLY pos:SORT
IMPORT    -- lib
          Seq[partName]         ONLY seq
          Seq[import]           ONLY seq
          Seq[sortImpl]         ONLY seq
          Seq[variant]          ONLY seq
          Seq[comp]             ONLY seq
          Seq[eq]               ONLY seq
          Seq[law]              ONLY seq
          Seq[expr]             ONLY seq
          Seq[guard]            ONLY seq
          Seq[globPragma]       ONLY seq
          Seq[proofHead]        ONLY seq
          Seq[proofBody]        ONLY seq
       Rep ONLY rep

-- %- ----------------------------------------------------------------------
-- %$General Abstract Syntax Type$
-- %- ----------------------------------------------------------------------

TYPE absy    == Struct  (struct:struct)
                Name    (pName:partName)
                NameSeq (nSeq:seq[partName])
                Kind    (kind:kind)
                Origin  (origin:origin)
                Fct     (what:fct)
                Import  (import:seq[import])
                Type    (type:seq[sortImpl])
                Data    (data:seq[sortImpl])
                Variants (variants:seq[variant])
                Comps   (comps:seq[comp])
                EqSeq   (eqs:seq[eq])
                Formula (f:formula)
                LawSeq  (ls:seq[law])
                Expr    (e:expr)
                Guards  (g:seq[guard])
                Pos     (p:pos)
                Pragma  (p:pragma)
                GPragma (pi:seq[globPragma])
                ProofHead(ph: proofHead)
                ProofBody(pb: proofBody)
                NameSpec (pName: partName, spc: spc)
                Spc(spc: spc)
                Relation (type: rep, import: seq[import])
                noAbsy

FUN structOf : absy -> struct


-- %- ----------------------------------------------------------------------
-- %$Conversion to Denotation$
-- %- ----------------------------------------------------------------------

FUN ` : absy -> denotation
