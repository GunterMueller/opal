-- LAST EDIT: Fri Dec  4 20:36:03 1992 by Carola Gerke (kassandra!carola) 

SIGNATURE Struct
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- AutorInnen:  mija + carola
-- Projekt:     OPAL1-Compiler + property language
-- Zweck:       Signatur der Typen struct,import und origin fuer die
--              abstrakte Syntax


IMPORT  -- absy
        PartName        ONLY partName:SORT kind
        Impl[partName]  ONLY eq sortImpl:SORT expr law:SORT proofHead:SORT
                             proofBody:SORT
        GlobPragma[partName]    ONLY pragmaItem globPragma
IMPORT  -- admin
        OcPos             ONLY pos
IMPORT  -- token
        Rep             ONLY rep : SORT <
        Pragma          ONLY pragma
IMPORT  -- lib
        Seq[partName]   ONLY seq
        Seq[import]     ONLY seq
        Seq[sortImpl]   ONLY seq
        Seq[eq]         ONLY seq
        Seq[law]        ONLY seq
        Seq[globPragma] ONLY seq
        Seq[pragmaItem] ONLY seq
       Seq[proofHead] ONLY seq
       Seq[proofBody] ONLY seq
       Pair[partName, law] ONLY pair
       Seq[pair[partName,law]] ONLY seq
       Map[rep, <, seq[import]] ONLY map
       Nat ONLY nat

TYPE part == signature implementation extProps intProps

TYPE struct ==  
        -- Compilations Einheit (Signatur- oder Implementationsteil)
                error
                  -- Syntaxfehler im Strukturkopf
                mkstruct(
                  head:origin,                  -- Kopf (Name,form.Parameter)
                  imports:seq[import],  -- explizite Importe (IMPORT)
                  signature:seq[partName], -- neue Sig. (SORT,FUN)
                  specsign:seq[pair[partName, law]],  -- spez. FUNs
                  sortImpls:seq[sortImpl], -- Sortenimpl. (DATADef)
                  funImpls:seq[eq],        -- Funktionsimpl. (DEFEq)
                  freeTypes:seq[sortImpl], -- frei aufbauende Typen (TYPEDecl)
                  laws:seq[law],                 -- Eigenschaften (LAWProp)
                  pragmas:seq[globPragma],      -- pragmas der Struktur
                  proofHeads: seq[proofHead],   -- proofHeads der Struktur
                  proofBodies: seq[proofBody],  -- proofBodies der Struktur
                  relations: map[rep, <, seq[import]],
                       -- Relationen zu anderen Strukturen, rep zur Info
                  pos:pos,                      -- Position des Schluesselworts
                  part:part)                    -- sign, impl, extp

TYPE import ==  
        -- explizite Importe (IMPORT)
                complete( origin:origin )
                  -- vollstaendiger Import (nur Strukturname und akt.Parameter)
                only( origin:origin, only:seq[partName] )
                  -- spezialisierter Import (mit Only-Namensapplikationen)

TYPE origin ==  
        -- Herkuenfte:Strukturname, aktuelle/formale Parameter, Strukturpragmas
                error
                origin( structIde : rep,        -- Strukturbezeichner
                        pos : pos,              -- Position des Apostrophs
                        paramS : seq[partName], -- Instanz
                        pragma : pragma )       -- Annotation an d. Strukt.



-- ---------------------------------------------------------------------------
-- Textkonversionen

FUN  `  : struct -> denotation
FUN  `  : import -> denotation
FUN  `  : origin -> denotation


