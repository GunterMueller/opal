/* % Autor:     mija@*
Projekt:        OPAL1-Compiler (Frontend) @*
Zweck:  Funktionalitäten in der abstrakten Syntax.@*

                Generische Funktionalitaten können durch die Variante
        nonCartVar oder var erzeugt werden, wobei erstere nur mit 
        Sorten oder Funktionsfunktionalitäten instantiiert werden 
        dürfen. Für reine Sortenvariablen gibt es eine entsprechende
        Variante bei der Instantiierungssorte für obj.
        Die generischen Fcts sind für die Bottom-Up-Analyse
        der Expressions per Indentifizierungsfunktionen gedacht. Sie
        sollen sowohl für korrekte Fcts als auch zur Fehlerbehandlung  
        statt error-Varianten benutzt werden. 
*/ 
-- %- LAST EDIT: Sun Jul 26 15:16:52 1992 by Carola Gerke (paris!carola) 

SIGNATURE Fct[obj]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)




SORT obj

IMPORT  Seq[fct]        ONLY seq
        Nat             ONLY nat

TYPE fct ==     sort( object : obj )            -- Sorte
                cart( elems : seq[fct] )        -- kartesisches Produkt
                funct( arg : fct, res : fct )   -- Funktionsfunktionalität
                nonCartVar( id : nat )          -- Sorten/Funktionsvariablen
                var( id : nat )                 -- beliebige Fct.(Variable)
                noFct

FUN  = : (obj ** obj -> bool) -> fct ** fct -> bool
        -- %strukturelle Gleichheit

FUN  < : (obj ** obj -> bool) -> fct ** fct -> bool
        -- %transitive, irreflexive Ordnung

FUN  `  : (obj -> denotation) -> fct -> denotation
        -- %Textkonversion

/* %Konstante für beliebige Funktionalität, z.Z. identisch
    mit @code{var(10000)} */
FUN anyFct: fct 

