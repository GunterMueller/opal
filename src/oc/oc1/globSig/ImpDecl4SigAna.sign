-- LAST EDIT: Sat Aug 10 19:49:37 1996 by Christian Maeder (andromache!maeder) 
-- ============================================================================
-- Autor:       mija
-- Projekt:     OPAL1-Compiler (Signaturanalyse)
-- ============================================================================

SIGNATURE ImpDecl4SigAna
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT  Objects         ONLY inst:SORT struct:SORT instPN:SORT impDecl:SORT
        GlobSig         ONLY globSig
        Maps4SigAna     ONLY onlyMap:SORT impDeclMap:SORT instMap:SORT
        PartNameEntry   ONLY pN:SORT
        Name            ONLY name:SORT
        ImpExpEntry     ONLY instAppl:SORT structE:SORT
        Attributes      ONLY attr:SORT
        -- absy/token
        Rep             ONLY rep
        OcPos             ONLY pos
        Pragma          ONLY pragma
        Fct[name]       ONLY fct
        -- lib
        Seq[name]       ONLY seq
        Seq[inst]       ONLY seq
        Seq[pN]         ONLY seq
        Seq[option[fct]]        ONLY seq
        Seq[pair[impDecl,pragma]] ONLY seq
        Seq[seq[name:SORT]]     ONLY seq
        Option[inst]    ONLY option
        Option[fct]     ONLY option
        Pair[rep,pos]   ONLY pair
        Pair[impDecl,pragma]    ONLY pair
        Pair[seq[pair[impDecl,pragma]],seq[option[fct]]]        ONLY pair
        Nat             ONLY nat

-- ---------------------------------------------------------------------------
-- Importe/Instantiierungen von Strukturen

FUN explInst? genericTransitive? genericTransitives? uninst?
    explUninst? transitive? identInst? doubleInst?
        : globSig ** struct ** inst -> bool
FUN isMarked? : globSig ** struct ** inst -> bool
FUN evaluated? : globSig ** struct ** inst -> bool
FUN getInstPNAndMark : globSig ** struct ** inst -> globSig ** instPN
  -- Funktionen zum Traversieren der expliziten Instanzen (Zyklus !)

FUN addOnlyMap : globSig ** struct ** onlyMap -> globSig
FUN addOnlyMap : globSig ** struct ** inst ** onlyMap -> globSig
FUN addOnlyMap : globSig ** struct ** inst ** onlyMap ** instPN **pos-> globSig
  -- die Position ist die des expliziten Imports

FUN pos : globSig ** instPN -> pos
FUN posI : globSig ** struct ** inst -> pos
  -- Position der Instanz

FUN addInstToUninst : globSig ** struct ** inst ** inst -> globSig
  -- Hinzufuegen einer aus einem Uninst-Entry erzeugten Instanz in dessen Liste
FUN addUnIdentifiedInst : globSig ** struct ** instPN -> globSig ** inst
  -- Erzeugen eines "undefinierten" explInst Eintrags. Wird nur in 
  -- checkFlatNameInstPN'GlobSigEval benutzt und koennte bei Aenderung der 
  -- Aufrufreihenfolge (setIdentifiedInst) weggeschmissen werden !!!!
FUN addIdentifiedInst : globSig ** struct ** seq[name] -> globSig ** inst
  -- Hinzufuegen einer schon identifizierten Instanz
FUN setIdentifiedInst : globSig ** struct ** inst ** seq[name] -> globSig
  -- Transformation in eine instE aus der Menge der identifizierten
FUN getInstPN : globSig ** struct ** inst -> instPN
FUN getInst : globSig ** struct ** inst -> seq[name]
  -- Holen der Namensmenge einer Instanz (ausser expl...)
FUN getOtherInstPNS : globSig ** struct ** inst -> seq[pN]
FUN getInsts : globSig ** struct ** inst -> seq[inst]
FUN setInsts : globSig ** struct ** inst ** seq[inst] -> globSig
FUN getOtherInst : globSig ** struct ** inst -> struct ** inst
  -- die 'restlichen' Daten eines genericTransitive Eintrags

FUN getDoubleInst : globSig ** struct ** inst -> inst
  -- die andere
FUN setDoubleInst : globSig ** struct ** inst ** inst -> globSig
  -- die erste inst wird zur double

FUN setInstUnused : globSig ** struct ** inst -> globSig
  -- die Instanz wird nicht mehr referenziert !!!

FUN duplicateInstAppl : globSig ** name ** inst -> globSig
  -- Hinzufuegen einer neuen Instanz zu einem Namen
  -- mit dem OnlyC der alten.

FUN findInst : globSig ** struct ** seq[name] -> option[inst]
  -- Sieht nach, ob es eine entsprechende Inst schon gibt.
  -- Alle Namen sind intName oder extName

FUN errInfo : globSig ** struct -> rep ** pos

-- ---------------------------------------------------------------------------
-- importierte Struktur

FUN addPreOwnSignImport : globSig ** struct ** rep -> globSig
FUN addPreImport : pair[rep,pos] ** globSig -> globSig
  -- Erzeugen eines neuen Eintrags
FUN updPreImport : globSig ** rep ** instMap -> globSig ** struct

FUN defImport : globSig ** struct ** impDeclMap ** seq[name]
                ** pair[seq[pair[impDecl,pragma]],seq[option[fct[name]]]] -> globSig
  -- Eintragen von ImpDecls ReExports und formalen Parametern
FUN defTransImport : globSig ** struct ** impDeclMap -> globSig
FUN mergeImpDecls : globSig ** struct ** impDeclMap -> globSig
FUN defTransImport : globSig ** struct ** instMap ** impDeclMap 
        ** pair[seq[pair[impDecl,pragma]],seq[option[fct[name]]]] -> globSig
  -- Erzeugen eines transitiven Imports
FUN defSignImport : globSig ** struct ** rep ** pair[seq[pair[impDecl,pragma]],seq[option[fct[name]]]]
                    ** instMap ** impDeclMap -> globSig
  -- Erzeugen eines voranalysieren Imports (eigener Signaturteil)

FUN getInstMap : globSig ** rep -> instMap
FUN getInstMap : globSig ** struct -> instMap

FUN getImpDeclMap : globSig ** struct -> impDeclMap

FUN getFormParams : globSig ** struct -> seq[option[fct[name]]]
FUN getFormParamImpDecls : globSig ** struct -> seq[name]

FUN updImport : globSig ** struct ** instMap ** impDeclMap -> globSig
  -- Update eines schon verhandenen Imports (Austausch der Mappings)
FUN getDelReExports : globSig ** struct -> globSig ** seq[name]
  -- Abliefern der Reexporte der Struktur und loeschen aus dem Import

FUN alreadyImported? : globSig ** struct -> bool
FUN directImported? : globSig ** struct -> bool
FUN notParametrized? : globSig ** struct -> bool
FUN notParametrized? : globSig ** structE -> bool
FUN parametrized? : globSig ** name -> bool

FUN structIde : globSig ** struct -> rep

FUN toInstSet : globSig ** struct -> inst -> seq[seq[name:SORT]]
FUN eqName : globSig -> name ** name -> bool
FUN eqInst : globSig ** struct ** inst ** inst -> bool
-- allgemeine Gleichheit auf Instanzen
FUN eqBaseA : name ** name -> bool

FUN updAttr : globSig ** name ** (attr -> attr) -> globSig

