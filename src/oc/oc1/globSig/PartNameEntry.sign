-- LAST EDIT: Wed Sep  9 16:01:21 1992 by Michael Jatzeck (trabi!michel) 
-- ============================================================================
-- Autor:       mija
-- Projekt:     OPAL1-Compiler (Signaturanalyse)
-- Zweck:       Die Struktur enthaelt die Repraesentation fuer partielle 
--              Namen der Kontextanalyse (pN) und die Zusammenfassungen 
--              zu "unabhaengigen" partiellen Namen.
--              Die nats an der zweiten Position der Paare (possS und insts)
--              dienen der Effizienzsteigerung und spielen folgendermassen 
--              zusammen: die Liste der erzeugten IPNs eines partName spiegelt
--              die moeglichen Strukturkontexte wider. Das zweite nat bei insts
--              ist ein Usage-Count, d.h. zaehlt, wie viele moegliche Namen die
--              IPN in possS erzeugt hat. Das nat in pos ist die Gegenreferenz
--              und zeigt auf den IPN, durch den die Moeglichkeit erzeugt ist.
--              Ein IPN wird geloescht, wenn der UsageCount null wird.
-- ============================================================================

SIGNATURE PartNameEntry
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Name            ONLY name
        Objects         ONLY instPN:SORT sortPN:SORT
        -- token
        Rep             ONLY rep
        PartName        ONLY partName:SORT
        -- err
        OcPos             ONLY pos
        -- lib
        Nat             ONLY nat
        Option[fct[name]]       ONLY option
        Option[fct[sortPN]]     ONLY option
        Fct[sortPN]     ONLY fct
        Fct[name]       ONLY fct        -- Varianten 2,3,5
        Seq[name]       ONLY seq
        Seq[instCand]   ONLY seq
        Seq[option[fct[name]]]  ONLY seq
        Seq[pN]         ONLY seq
        Seq[partName]   ONLY seq
        Seq[flatPnEle]  ONLY seq
        Seq[seq[flatPnEle]]     ONLY seq
        
-- ---------------------------------------------------------------------------
-- "unabhaengige" partielle Namen

TYPE sortPNE ==                 -- unabhaengige partielle SORTennamen
        sortPNE(syntax : partName,      -- zum Sortieren und Fehlerinfo
                pN  : pN )

FUN upd : pN -> sortPNE -> sortPNE


TYPE instPNE ==                 -- partielle Namen einer Instanzenliste
        deepInstPNE(                    -- 'tiefe' Repr mit Kontext explizit 
                pos : pos,                      -- eckige Klammer auf
                syntax : seq[partName], -- zum Gleichmachen
                context : seq[option[fct[name]]],
                deepInsts : seq[pN])
        flatInstPNE(                    -- 'flache' Form mit Kontext implizit
                pos : pos,
                context : seq[option[fct[name]]],
                flatInsts : seq[seq[flatPnEle]] ) -- Sequenz der Instanzen

FUN upd : seq[pN] -> instPNE -> instPNE
FUN upd : seq[seq[flatPnEle]] -> instPNE -> instPNE


TYPE onlyPNE == onlyPNE( pN : pN, errInfo:errInfo )

FUN upd : pN -> onlyPNE -> onlyPNE

-- ---------------------------------------------------------------------------
-- einfacher partieller Name (nur dynamische Info)

/* % Kandidaten aus einer Struktur mit einer Referenz auf partielle
   Instanz. Falls keine (korrekte) Instanz annotiert wurde ist
   no(instPN) = 0 also kein legaler Tabelleneintrag. */
   
TYPE instCand == &(cands : seq[name], instAn : instPN)

TYPE pN ==
        deepPN(                         -- tiefer partieller Name
                errInfo : errInfo,              -- Fehler, Sortieren nach <
                cands : seq[instCand],          -- Candidaten pro Struktur
                fct : option[fct[sortPN]] )     -- fuer Ops die Fct
        flatPN(                         -- 'flache partielle Namen
                errInfo : errInfo,              -- Fehler, Sortieren nach <
                flatPN : seq[flatPnEle] )

TYPE flatPnEle == 
        flatPnEle(
                name : name,
                inst : instPN,
                fct : option[fct[sortPN]],
                errInfo : errInfo)

-- ---------------------------------------------------------------------------
-- Fehlerinfo

TYPE errInfo == errInfo( ide:rep, pos:pos )

-- ---------------------------------------------------------------------------
-- Hilfsrelationen

FUN  < : sortPNE ** sortPNE -> bool
FUN  << : instPNE ** instPNE -> bool

-- ---------------------------------------------------------------------------
-- Dumps

FUN ` : sortPNE -> denotation
FUN ` : instPNE -> denotation
FUN ` : flatPnEle -> denotation
FUN ` : pN -> denotation
FUN ` : onlyPNE -> denotation

