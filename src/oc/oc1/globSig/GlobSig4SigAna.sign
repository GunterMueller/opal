-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (context analysis)
-- Purpose:     
-- Zweck:	Zugriffsfunktionen fuer die globale Signatur, die von den 
--		Massnahmen zur Effizienzsteigerung abstrahieren.
-- ============================================================================
/*
*/
-- ============================================================================

SIGNATURE GlobSig4SigAna
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT	GlobSig		ONLY globSig
	Name		ONLY name
	Objects		ONLY decl:SORT sortPN:SORT instPN:SORT struct inst
	PartNameEntry	ONLY onlyPNE:SORT
	ImpExpEntry	ONLY instE:SORT instAppl:SORT
	-- absy/token
	Rep	   	ONLY rep
	OcPos		ONLY pos
	Pragma	   	ONLY pragma
	Impl[name]	ONLY sortImpl:SORT
	Table[instE]	ONLY table
	-- lib
	Seq[name]	ONLY seq
	Seq[seq[name]]	ONLY seq
	Seq[decl]	ONLY seq
	Seq[sortImpl]	ONLY seq
	Seq[instAppl]	ONLY seq
	Seq[pair[onlyPNE,pragma]] 	ONLY seq
	Seq[pair[decl,pragma]] 		ONLY seq
	Pair[onlyPNE,pragma]		ONLY pair
	Pair[decl,pragma]		ONLY pair
	Pair[globSig,bool]		ONLY pair
	Option[rep]	ONLY option
	Com[pair[globSig,bool]]		ONLY com
	Nat		ONLY nat

-- ---------------------------------------------------------------------------
-- die globale Signatur selber

FUN {} : globSig		
  -- leere globale Signatur
FUN defStructHead : globSig ** rep ** pos ** pragma **
		  seq[pair[onlyPNE,pragma]]
		    -> globSig
  -- Eintragen einiger Strukturinformationen, insbesondere formale Parameter
FUN extStructHead : globSig ** seq[pair[onlyPNE,pragma]]
		    -> globSig
  -- formale Parameter von Implementierungen eintragen
FUN defPreDefs : globSig ** rep ** rep ** rep ** rep -> globSig
  -- Eintragen von bool,denotation,PREDEF_BOOL,DENOTATION 

FUN structPos : globSig -> pos

FUN formParamS : globSig -> seq[pair[onlyPNE,pragma]]
  -- Lesen der unanalysierten formalen Parameter
FUN defSignFormParams : globSig ** rep ** seq[pair[decl,pragma]] -> globSig
  -- Eintragen der analysierten formalen Parameter der Signaturanalyse
FUN getSignFormParams : globSig -> seq[pair[decl,pragma]]


FUN initAdmInfo : globSig ** nat -> globSig

FUN instsComplete : globSig -> globSig
FUN declsComplete : globSig -> globSig

FUN sortInstPNEOnlyComplete : globSig -> globSig
  -- turbo fuer partielle Namen, onlys und insts

FUN finitSigAna : globSig -> globSig
  -- Entfernen von Verwaltungsinfo, etc.

-- ---------------------------------------------------------------------------
-- Iterationsfunktionen

FUN treatSortPNS : (globSig ** sortPN -> globSig ** bool) 
		   ** globSig -> globSig ** bool
FUN treatInstPNS : (globSig ** instPN -> globSig ** bool) 
		   ** globSig -> globSig ** bool
FUN treatOnlyPNS : (globSig ** struct ** inst ** onlyPNE 
			-> globSig ** bool ** onlyPNE) 
		   ** globSig -> globSig ** bool
FUN treatParamPNS : (globSig ** onlyPNE -> globSig ** onlyPNE) ** globSig 
			-> globSig
  -- Iteration ueber die sortPN, instPN und (only-)pN. Dabei koennen auch
  -- andere Teile der globalen Signatur veraendert werden.
  -- Die einzelnen boolschen Ergebnisse werden verundet.

FUN treatDeclS : (globSig ** decl -> com[pair[globSig,bool]])
		 ** globSig ** bool -> com[pair[globSig,bool]]
FUN treatInstS : (globSig ** struct ** inst -> com[pair[globSig,bool]])
		 ** globSig ** bool -> com[pair[globSig,bool]]
FUN treatInstS : globSig ** 
		 (struct ** inst -> inst ** globSig -> globSig)
		-> globSig
FUN treatEachInst : globSig ** (struct ** inst ** globSig -> globSig)
		-> globSig

FUN treatOnlyS : (globSig ** struct ** inst ** onlyPNE 
			-> com[pair[globSig,bool]])
		 ** globSig ** bool -> com[pair[globSig,bool]]

FUN treatOpDeclS: (globSig ** seq[decl] -> globSig ** seq[decl]) 
		  ** globSig -> globSig
  -- Es werden alle internen Operationen desselben Namens behandelt.

FUN treatInstAppls : globSig ** 
	(table[instE] ** seq[instAppl] 
	  -> table[instE] ** seq[instAppl])
	-> globSig

-- ---------------------------------------------------------------------------
-- Match-Funktionen

FUN matchByIdeOrig 	: globSig ** rep ** option[rep] ** (instAppl -> bool)
		-> seq[seq[name]]
FUN matchSortByIdeOrig 	: globSig ** rep ** option[rep] ** (instAppl -> bool) -> seq[seq[name]]
FUN matchOpByIdeOrig 	: globSig ** rep ** option[rep] ** (instAppl -> bool) -> seq[seq[name]]
	-- POST: Sequenz der passenden Namen partitioniert nach Herkunft
	--       Die Namen sind von den Varianten intName oder extName

