-- LAST EDIT: Fri Sep  8 19:13:00 1995 by Christian Maeder (troilos!maeder) 
-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (context analysis)
-- Purpose:     
-- ============================================================================
/*
*/
-- ============================================================================

SIGNATURE Name4SigAna
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Name            ONLY name:SORT
        GlobSig         ONLY globSig
        PartNameEntry   ONLY pN:SORT flatPnEle:SORT errInfo:SORT instCand
        ImpExpEntry     ONLY instE:SORT instAppl:SORT
        Objects         ONLY sortPN:SORT instPN:SORT inst:SORT struct:SORT 
                                decl:SORT
        Attributes      ONLY attr:SORT
        -- absy/token
        PartName        ONLY partName:SORT
        Rep             ONLY rep
        OcPos             ONLY pos
        Pragma          ONLY pragma
        Impl[name]      ONLY sortImpl:SORT variant:SORT
        Fct[name]       ONLY fct
        Fct[sortPN]     ONLY fct
        -- lib
        Seq[variant]    ONLY seq
        Seq[instAppl]   ONLY seq
        Seq[inst]       ONLY seq
        Seq[instE]      ONLY seq
        Seq[name]       ONLY seq
        Seq[option]     ONLY seq
        Seq[pN]         ONLY seq
        Seq[partName]   ONLY seq
        Seq[flatPnEle]  ONLY seq
        Seq[seq[flatPnEle]]     ONLY seq
        Seq[instCand]   ONLY seq
        String          ONLY string
        Option[fct[name]]       ONLY option
        Table[instE]    ONLY table

-- ---------------------------------------------------------------------------
-- Applikationen

FUN getIde : globSig ** name -> rep
FUN getOrig : globSig ** name -> denotation
FUN getOrig : globSig ** name -> rep

FUN sort? : globSig ** name -> bool
  -- PRE name intName? or name extName?
FUN fct : globSig ** name -> fct[name]
  -- PRE (name intName? or name extName?) and ~(name sort?)

FUN onlyApplied : name ** globSig -> globSig
FUN onlyUnApplied : name ** globSig -> globSig

FUN explInst? : globSig ** name -> bool
FUN explUninst? : globSig ** name -> bool
FUN transitive? : globSig ** name -> bool
FUN identInst? identUninst?
    genericTransitive? : globSig ** name -> bool
    genericTransitives? : globSig ** name -> bool
    realInst : globSig ** name -> name
    realInst : globSig -> name -> name
  -- es wird nachgesehen, ob irgendwelche Verweise auf Doppelinstanzen raus-
  -- gegeben werden und diese ggf. ausgetauscht.    
    realInst2 : table[instE] -> inst -> inst
    realInst3 : globSig ** struct -> inst -> inst
    expandGenericTransitives : globSig -> name -> seq[name]
FUN getInstPN : globSig ** name -> instPN
  -- PRE: explInst?(gS,name)
FUN getInsts : globSig ** name -> seq[inst]
FUN getInst : globSig ** name -> seq[name]
FUN getOtherInst : globSig ** name -> seq[pN]

FUN getIde : globSig ** name -> denotation
FUN getAttr : globSig ** name -> attr

FUN isClosed? : globSig ** name -> bool
FUN isUnclosed? : globSig ** name -> bool
FUN closed : globSig ** name -> globSig
FUN unclosed : globSig ** name -> globSig

FUN setApplied : name ** globSig -> globSig
FUN getInstApplS : name ** globSig -> seq[instAppl]
FUN updVariants : globSig ** sortImpl ** seq[variant] -> globSig

-- ---------------------------------------------------------------------------
-- partielle Sortenapplikation

FUN addSortPN : globSig ** partName ** pN -> globSig ** sortPN
FUN delSortPN : sortPN ** globSig -> globSig
FUN getPN : globSig ** sortPN -> pN
FUN syntax : globSig ** sortPN -> partName
FUN updPN : globSig ** sortPN ** pN -> globSig
FUN getCands : globSig ** sortPN -> seq[instCand]
FUN updCands : globSig ** sortPN ** seq[instCand] -> globSig

-- ---------------------------------------------------------------------------
-- partielle Instantiierungsappliaktionen

FUN noInstPN? : instPN -> bool
FUN addInstPN : globSig ** pos ** seq[partName]
                ** seq[option[fct[name]]] ** seq[pN]
                -> globSig ** instPN
FUN delInstPN : instPN ** globSig -> globSig
        -- transitives Loeschen aller eingefuehrten Applikationen
FUN getCands : globSig ** instPN -> seq[pN]
FUN updCands : globSig ** instPN ** seq[pN] -> globSig
FUN context : globSig ** instPN -> seq[option[fct[name]]]
    syntax : globSig ** instPN -> seq[partName]
FUN flatInstPN? : globSig ** instPN -> bool
FUN toFlatCands : globSig ** instPN ** seq[seq[flatPnEle]] -> globSig
FUN getFlatCands : globSig ** instPN -> seq[seq[flatPnEle]]


-- ---------------------------------------------------------------------------
-- allgemeine Applikation

FUN defPN : partName ** seq[instCand] -> pN
FUN defPNOp : partName ** seq[instCand] ** fct[sortPN] -> pN
        -- instPN noInstPN? ==> keine Instanz angegeben
FUN pNOp? : pN -> bool
FUN getPNFct : pN -> fct[sortPN]
FUN getCands : pN -> seq[instCand]
FUN updCands : pN ** seq[instCand] -> pN

FUN toFlatPN : pN ** seq[flatPnEle] -> pN
FUN getFlatPN : pN -> seq[flatPnEle]

-- ---------------------------------------------------------------------------
-- ErrInfo

FUN errInfo : partName -> errInfo
    -- Extrahieren der Fehlerinfo aus einem partiellen Namen des Parsers

-- Decl4SigAna
FUN realDecl : globSig ** decl -> decl
