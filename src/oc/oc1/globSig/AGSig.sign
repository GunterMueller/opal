-- ============================================================================
-- Author:      ralfi
-- Project:     OPAL1-Compiler (context analysis)
-- Purpose:     
-- Zweck:       Uebersetzung der analysierten Quelle nach InterOpal

SIGNATURE AGSig
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-04-14 21:20:55 $ ($Revision: 1.3 $)

IMPORT	
	Seq[nat]	ONLY	seq
	Seq[pos]	ONLY	seq
	Seq[name]	ONLY	seq
	Seq[pair]	ONLY	seq
	Nat		ONLY	nat
	AnalyzedGlobSig	ONLY	globSig impl:SORT locSig:SORT
	Name		ONLY	name
	OcPos		ONLY	pos:SORT
	Fct[name]	ONLY	fct:SORT
	Impl[name]	ONLY	law:SORT
	Option[fct]	ONLY	option
        Pair[law,locSig]ONLY    pair
        
FUN getInternalNames: globSig -> seq[name]
FUN getExternalNames: globSig -> seq[name]
FUN getStructs: globSig -> seq[nat]

FUN getLaws: globSig -> seq[pair]

FUN paramNo : globSig ** name'Name -> nat
-- ist no'Name 

FUN structPos: globSig -> pos
-- Position des Strukturnamens
FUN importPos : globSig ** nat -> seq[pos]

FUN formalParams : globSig ** nat -> seq[name]
-- liefert die formalen Parameter aus der globSig fuer eine Struktur,
-- deren Nummer bekannt ist

FUN parameter? : globSig ** name'Name -> bool

FUN impl : globSig ** name'Name->impl

FUN fct : globSig ** name'Name -> fct'Fct[name] ** option[fct'Fct[name]]

FUN freeType : globSig ** name'Name->impl

FUN isApplied? : globSig ** name'Name -> bool

FUN uninst? : globSig ** name'Name -> bool

/* %@code{inPragma?(tag)(sig, n)} is true, iff
    a pragma @code{/$ tag [...,n,...] $/} exists. */
FUN inPragma?: denotation -> globSig ** name'Name -> bool