-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (signature analysis)
-- Purpose:     evaluation of parameters
-- ============================================================================

IMPLEMENTATION GlobSigEvalParam
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-04-14 21:20:57 $ ($Revision: 1.2 $)

IMPORT  AbsyFun2        ONLY    /
        Attributes      COMPLETELY
        ComCompose      ONLY    ;
        ComSeqReduce    ONLY    /&
        Com             COMPLETELY
        Decl4SigAna     ONLY    fct formParam? setFormParam
        DeclEntry       ONLY    attr declE
        ErrCom          COMPLETELY
        GlobSig         COMPLETELY
        GlobSig4SigAna  ONLY    defSignFormParams formParamS
        GlobSigEvalInst ONLY    eqFlatPN
        MySeqFun1       ONLY    ||
        MySeqFun2       ONLY    in
        MySeqFun3       ONLY    \*
        Name            COMPLETELY
        Name4SigAna     ONLY    getFlatPN getIde realDecl sort?
        Objects         COMPLETELY
        OcOptions         ONLY    options sign?
        Option          COMPLETELY
        Pair            COMPLETELY
        PartNameEntry   COMPLETELY
        Rep             ONLY    lexem 
        SeqFilter       ONLY    |
        SeqMapEnv       ONLY    *
        Seq             COMPLETELY
        Table           ONLY    ! table
        Triple          COMPLETELY

-- ---------------------------------------------------------------------------

--FUN evalParameters : options ** globSig ** bool -> com[pair[globSig,bool:SORT]]
  -- Auswertung der Identifizierung der formalen Parameter der Struktur
  -- Es kann nichts zusaetzlich erzeugt werden.
DEF evalParameters(options, gS, noPreviousErr?) ==
        LET FormParams == formParams(gS) IN
        IF FormParams <>? THEN  yield(okay(gS & noPreviousErr?))
        ELSE
                IF forall?(unIdentified?, FormParams) THEN     
          -- Feststellen, ob alle Applikationen eindeutig sind (Doppeldekls !)
          -- Dabei achten auf 'imported parameter'und'invisible parameter kind'
          (evalParameter(options) \* (gS & noPreviousErr?))(formParamS(gS)); 
          evalParameters2(options)
                ELSE /* check consistency between identified and
                        unidentified parameters. */
                /&(checkParameter(options),gS & noPreviousErr?, FormParams)
                FI
        FI

FUN checkParameter : options -> formParam ** pair[globSig,bool:SORT]
                    -> com[pair[globSig,bool:SORT]]

DEF checkParameter(options)(mkFormParam(nil,_,_), gSError) ==
                    yield(okay(gSError))
DEF checkParameter(options)(
        mkFormParam(avail(OPn), avail(Decl), _), gS & PrevError) ==
        LET
        PN == pN(OPn)
        (ideR,Pos) == (ide(errInfo(PN)),pos(errInfo(PN)))
        Ide == ideR lexem
        flatPNS == isIntName | getFlatPN(PN)
        (firstCom, Error) == 
          IF flatPNS <>? THEN
            (undefinedIdentification(options,Pos,Ide), true)
          IF exist?(\\N. decl(name(N)) = Decl, flatPNS) THEN
             (yield(okay(true)), false)
          ELSE (incompatibleParameter(options,Pos,Ide), true)
          FI
        NoError == IF Error THEN false ELSE PrevError FI
        IN
        firstCom; yield(okay(gS & NoError))

FUN evalParameters2 : options 
                      -> ans[pair[pair[globSig,bool:SORT],
                                  seq[triple[name:SORT,pos:SORT,pragma:SORT]]]]
                      -> com[pair[globSig,bool:SORT]]
        -- Test auf 'duplicate parameter'
DEF evalParameters2(options)(ans) ==
        IF 2nd(gSnoError) THEN
          -- PRE: #(formParams >0) and (name =|= error)
          checkParamErr(options, finGS, ft(formParams), rt(formParams));
          evalParameters3(finGS)
          WHERE 
          (gS, finFormPS) == *'SeqMapEnv(h8, 1st(gSnoError), formParams)
          finGS == defSignFormParams(gS, structIde(gS), finFormPS)
        ELSE yield(okay(1st(gSnoError) & false)) FI
        WHERE
        gSnoError == 1st(data(ans))
        formParams == 2nd(data(ans))

        FUN h8 : globSig ** triple[name:SORT,pos:SORT,pragma:SORT] 
                 -> globSig ** pair[decl:SORT,pragma:SORT]
        DEF h8(gS,p) == (setFormParam(Decl, gS), Decl & 3rd(p))
                WHERE Decl == decl(1st(p))


FUN evalParameters3 : globSig -> ans[bool:SORT] -> com[pair[globSig,bool:SORT]]
DEF evalParameters3(gS)(noErrorsA) == yield(okay(gS & data(noErrorsA)))



FUN evalParameter : options -> pair[globSig,bool:SORT] 
                    ** pair[onlyPNE:SORT,pragma:SORT] 
                    -> com[pair[pair[globSig,bool:SORT],
                                triple[name:SORT,pos:SORT,pragma:SORT]]]
  -- Feststellen, ob die Applikation eindeutig ist (Doppeldekls !)
  -- Dabei achten auf 'imported parameter' 
DEF evalParameter(options)(gSnoError, pNpragma) ==
        firstCom; yield(okay((gS & noError) & 
                             &(finName, Pos, 2nd(pNpragma))))
        WHERE
        noError == IF finName error? THEN false ELSE 2nd(gSnoError) FI
        (firstCom, finName) == 
          IF flatPNS <>? THEN
            (undefinedIdentification(options,Pos,Ide), error'Name)
          OTHERWISE
          IF rt(flatPNS) <>? THEN
            -- jetzt noch nach 'falschem' Parameter sehen
            LET Fname == name(ft(flatPNS)) IN
            IF Fname intName? THEN (yield(okay(true)), Fname)
            ELSE (importedParameter(options,Pos,Ide), error'Name) FI
          ELSE (ambiguousIdentification(options,Pos,Ide), error'Name)
          FI
        (ideR,Pos) == (ide(errInfo(PN)),pos(errInfo(PN)))
        Ide == ideR lexem
        gS == 1st(gSnoError)
        PN == pN(1st(pNpragma))
        flatPNS == IF options sign? THEN 
                     eqFlatPN(gS) || (isIntName | getFlatPN(PN))
                   ELSE filterParamS(gS) | getFlatPN(PN) FI

        FUN isIntName : flatPnEle -> bool
        DEF isIntName(fPN) == name(fPN) intName?

        FUN filterParamS : globSig -> flatPnEle -> bool
        DEF filterParamS(gS)(fPNE) == LET Name == name(fPNE) IN
                IF Name intName? THEN
                  attr(no(realDecl(gS, decl(Name))) ! decls(gS)) isParameter
                ELSE false FI


FUN checkParamErr : options ** globSig**triple[name:SORT,pos:SORT,pragma:SORT] 
                    ** seq[triple[name:SORT,pos:SORT,pragma:SORT]] 
                    -> com[bool:SORT]
  -- Test auf 'duplicate parameter' und 'invisible parameter kind'
  -- PRE: tripleS ::?, name intName?
DEF checkParamErr(options, gS, triple, tripleS) ==
        firstCom ;
        (IF tripleS <>? THEN yield(okay(invisible? ~))
        ELSE checkParamErr(options,gS, ft(tripleS),rt(tripleS)) FI)
        WHERE
        firstCom == 
          IF invisible? THEN 
            invisibleParameterKind(options, 2nd(triple), ide)
          ELSE
            IF in(h9, name)(tripleS) THEN
              duplicateParameter(options,2nd(triple),ide)
            ELSE yield(okay(true)) FI
          FI
        ide == getIde(gS, name)
        name == 1st(triple)
        invisible? == 
                IF sort?(gS,name) THEN false
                ELSE (h10(gS) / false)(fct(gS,decl(name))) FI
        
        FUN h9 : triple[name:SORT,pos:SORT,pragma:SORT] ** name -> bool
        DEF h9(triple, name) == name = 1st(triple)
        FUN h10: globSig -> name ** bool -> bool
        DEF h10(gS)(name,inv?) == 
                IF inv? THEN inv?
                OTHERWISE
                IF name intName? THEN ~(formParam?(gS, decl(name)))
                ELSE false FI

