-- LAST EDIT: Wed Jul 31 09:05:08 1996 by Christian Maeder (andromache!maeder) 
-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (signature analysis)
-- Purpose:     remove non-matching candidates in 'flat partial names'
-- Changes:     af, Jun 23 1993: adapted to new structuring of Rep/RepTab
-- ============================================================================
-- ============================================================================

IMPLEMENTATION MatchIdentFunFlat
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 2000-04-14 21:20:57 $ ($Revision: 1.2 $)

IMPORT  Objects         COMPLETELY
        Maps4SigAna     COMPLETELY
        ImpDecl4SigAna  COMPLETELY
        Name4SigAna     COMPLETELY
        PartNamePrep    COMPLETELY
        GlobSigImpl     ONLY impl:SORT data none
        ImpExpEntry     ONLY instAppl:SORT impDeclE:SORT instE:SORT
                             toInstAppl applied instOf applied?
        PartNameEntry   COMPLETELY
        Name            COMPLETELY
        Struct          COMPLETELY
        Table           COMPLETELY

        -- absy, etc.
        Rep             ONLY rep 
        OcPos             ONLY pos
        Fct             ONLY fct
        -- lib
        Compose         COMPLETELY
        Triple          COMPLETELY
        SeqMapEnv       ONLY *
        SeqReduce       COMPLETELY
        MySeqFun1       COMPLETELY
        MySeqFun2       COMPLETELY
        AbsyFun2        COMPLETELY
        Seq             COMPLETELY
        Option          COMPLETELY
        Pair            COMPLETELY

-- ---------------------------------------------------------------------------

--FUN matchIdentFunBySortPnFlat : globSig ** sortPN -> globSig ** bool
        -- Testen aller Kandidaten einer partiellen Sortenapplikation
        -- Es muss, falls vorhanden, geprueft werden, ob die Instanzen der
        -- Namen in der Kanditatenmenge mit den partiell applizierten
        -- Instanzen paarweise eine Schnittmenge bilden.
DEF matchIdentFunBySortPnFlat(gS,sortPN) == (gS, true)
/*      (updPN(1st(gSnotChanged), sortPN, finPN), 2nd(gSnotChanged)) 
        WHERE
        (gSnotChanged, finPN) == matchPNCand(gS & true, getPN(gS,sortPN))
*/
-- ---------------------------------------------------------------------------

--FUN matchIdentFunByInstPnFlat : globSig ** instPN -> globSig ** bool
        -- Testen aller Kandidaten einer partiellen Instanzenapplikation
        -- Jeder partielle Name wird fuer sich getestet.
DEF matchIdentFunByInstPnFlat(gS, instPN) == (gS, true)
/*      (updCands(finGS, instPN, finCands), notChanged)
        WHERE
        (finGSNotChanged, finCands) == 
           *'SeqMapEnv(matchPNCand, (gS & true), getCands(gS, instPN))
        finGS == 1st(finGSNotChanged)
        notChanged == 2nd(finGSNotChanged)
*/

-- ---------------------------------------------------------------------------

-- FUN matchIdentFunByOnlyPnFlat : globSig ** onlyPNE 
--              -> globSig ** bool ** onlyPNE
        -- Testen aller Kandidaten einer partiellen Onlyapplikation
        -- Die statischen Attribute sind getestet, d.h. insbesondere enthalten
        -- die Kandidatenmengen nur solche aus dem expliziten oder den 
        -- transitiven Importmengen.
DEF matchIdentFunByOnlyPnFlat(gS, struct, inst,  oPN) == (gS, true, oPN)
/*      (finGS, 2nd(fingSnotChanged), finOPN)
        WHERE 
        (fingSnotChanged, finPN) == matchPNCand((gS & true), onlyPN(oPN))
        finOPN == onlyPNE(finPN, errInfo(oPN))
        finGS == (onlyUnAppliedH / 1st(fingSnotChanged))(excludedNames)
        excludedNames == -(eqPnByInst)(getCands(onlyPN(oPN)),getCands(finPN))

FUN onlyUnAppliedH : pair[seq[name:SORT],instPN:SORT] ** globSig -> globSig
DEF onlyUnAppliedH(p,gS) == (onlyUnApplied / gS)(1st(p))
*/
-- ---------------------------------------------------------------------------
