-- ============================================================================
-- Author:      mija
-- Project:     OPAL1-Compiler (signature analysis)
-- Purpose:     commands for error messages
-- ============================================================================

IMPLEMENTATION ErrCom
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:44 $ ($Revision: 1.1.1.1 $)

IMPORT	
	SigAnaTexts	COMPLETELY
	PartNameEntry	ONLY pos:errInfo->pos ide
	Rep		ONLY rep lexem
	-- absy, etc.
	Pos		ONLY pos
	-- lib
	Denotation	ONLY ++
	Options		ONLY options
	Error		COMPLETELY

-- ---------------------------------------------------------------------------
-- speziell Instanzen/Importe

DEF emptyImport(opts, errInfo) == 
	errors(opts, err(error, text, lexem(ide(errInfo)), pos(errInfo)))
	WHERE text == "undefined application of %s in only list"

DEF cyclicImport(opts, pos) ==
	errors(opts, err(error, text, pos))
	WHERE text == "cyclic instantiated import"

DEF improperlyInstantiatedImport(opts, pos) == 
	errors(opts, err(error, text, pos))
	WHERE text == "improperly instantiated import"

DEF unclosedOnly(opts, pos, unclosedName, missing) ==
        errors(opts, err(error, finText, unclosedName, missing, pos))
        WHERE 
        finText == "import of %s needs import of %s"

-- ---------------------------------------------------------------------------
-- Applikationen allgemein

DEF undefinedIdentification(opts, pos, text) == 
	errors(opts, err(error, finText, pos))
	WHERE finText == "undefined identification of " ++ text

FUN ambiguousIdentification : options ** pos ** denotation -> com[bool]
DEF ambiguousIdentification(opts, pos:pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "ambiguous identification of " ++ text

DEF ambiguousInstance(opts, pos:pos) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "ambiguous identification of instantiation"

DEF ambiguousInstance(opts, pos:pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "ambiguous identification of instantiation" ++
                     ", cannot decide between\n      " ++ text

DEF ambiguousIdentification(opts, pos, text, den) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "ambiguous identification of " ++ text ++ 
			 ": " ++ den

DEF genericInstance(opts, errInfo:errInfo) ==
	errors(opts, err(error, finText, Pos))
	WHERE finText == "ambiguous identification of " ++ text ++ 
			 ": no instantiation"
	      (Pos,text) == (pos(errInfo), lexem(ide(errInfo)))

-- ---------------------------------------------------------------------------
-- formale Parameter

DEF duplicateParameter(opts, pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "duplicate formal parameter " ++ text

DEF importedParameter(opts, pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "formal parameter must not be imported " ++ text

DEF invisibleParameterKind(opts, pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == "formal parameter with invisible kind " ++ text

FUN incompatibleParameter : options ** pos ** denotation -> com[bool]
  -- Parameter der Implementierung entspricht nicht der Signatur
DEF incompatibleParameter(opts, pos, text) ==
	errors(opts, err(error, finText, pos))
	WHERE finText == 
        "formal parameter from signature must be identical to parameter " ++ text

-- ---------------------------------------------------------------------------
-- Sonstige Fehlermeldungstexte

DEF hintGottfriedsRule(opts, pos, text) ==
	errors(opts, err(hint, finText, text, pos))
WHERE finText == "the following names are imported (Gottfried's rule): %s"



