IMPLEMENTATION InterOpalModifier
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-22 13:43:08 $ ($Revision: 1.2 $)

IMPORT  Char    ONLY blank
        Compose ONLY o
		Denotation ONLY = ++
        Fct[name'Name]  COMPLETELY
        Impl[name'Name] COMPLETELY
        InterOpal       COMPLETELY
        InterOpalAccess COMPLETELY
        Map     COMPLETELY
        MapConv COMPLETELY
        MapReduce COMPLETELY
        Name    COMPLETELY
        Nat     COMPLETELY
        NatMap  COMPLETELY
        Objects COMPLETELY
        Option  COMPLETELY
        Pair    COMPLETELY
        Pos     COMPLETELY
        Seq     COMPLETELY
        SeqFilter       COMPLETELY
        SeqMap          COMPLETELY
        SeqOfSeq        COMPLETELY
        SeqReduce       COMPLETELY
        SeqSort         COMPLETELY
        SetConv         COMPLETELY

-- Accessing InterOpal

-- params are sorted according to their logical position!

FUN params : struct'InterOpal ** seq[object] -> seq[object]
DEF params(Struct, Objs) == msort(\\P1,P2. no(def(P1)) < no(def(P2)))   
                        (param?(Struct, _) | Objs)

FUN params : struct'InterOpal -> seq[object]
DEF params(Struct:struct) == params(Struct, objects(Struct))

FUN params : interOpal -> seq[object]
DEF params(Inter:interOpal) == params(mainStruct(Inter))

-- Symbols

FUN symbols : interOpal -> seq[denotation]
DEF symbols(Inter:interOpal) == flat(symbols * structs(Inter))

FUN symbols : struct'InterOpal -> seq[denotation]
DEF symbols(Struct:struct) == 
        / (\\O, S. symbol(O) :: S,
                %(symbol(Struct)), objs(Struct))

-- Instances

FUN insts : struct'InterOpal -> seq[pair[inst'InterOpal,seq[name'InterOpal]]]
DEF insts(Struct) == (inst? o 1st) | asSeq(insts(Struct))

FUN reverseOnlys : struct'InterOpal -> natMap[seq[inst'InterOpal]]
DEF reverseOnlys(Struct) ==
        LET Orig == origin(Struct)
            Insts == IF param?(Struct) THEN 1st * insts(Struct) ELSE
                                                   none% FI
            Onlys == onlys(Struct)
            Decls == asSeq(dom(objs(Struct)))
        IN \ (\\D, M. def(no(D), \ (\\I, S. 
                          LET Name == name(D, Orig, I)
                              ONames == Onlys !? I
                              Rest == IF ONames nil? THEN <>
                                      OTHERWISE
                                      IF exist?(Name = _, ONames cont) THEN
                                        %(I)
                                      ELSE 
                                        <> 
                                      FI
                          IN S ++ Rest, <>, Insts), M), {}, Decls)

FUN asInst : inst'InterOpal -> inst'Objects
DEF asInst(none) == unparam
DEF asInst(formal) == unparam
DEF asInst(inst(No)) == inst(succ(No))
-- inst(0) stands for uninst!

FUN asFct : (name'InterOpal -> name'Name) ** fct'InterOpal -> fct'Fct
DEF asFct(AsName, sort(N)) == sort(AsName(N))
DEF asFct(AsName, cart(S)) == cart(asFct(AsName, _) * S)
DEF asFct(AsName, funct(D, C)) == funct(asFct(AsName, D),asFct(AsName, C))

-- FUN asFct : fct'InterOpal -> fct'Fct
FUN asKind : (name'InterOpal -> name'Name) ** kind'InterOpal -> option[fct'Fct]
DEF asKind(_, sort) == nil
DEF asKind(AsName, fct(Fct)) == avail(asFct(AsName, Fct))
DEF asKind(_, other(d, _)) == IF d = "any" THEN avail(anyFct) ELSE nil FI

-- FUN asKind : kind'InterOpal -> option[fct'Fct]
                        -- maps main-Names to intNames
                        -- formal and none are mapped to 0 instances
                        -- make sure other inst-numbers are > 0

FUN asPos : pos'InterOpal -> pos'Pos
DEF asPos(pos(_, 0, 0)) == firstPos
DEF asPos(pos(P, 0, succ(N))) == nextPos(asPos(pos(P, 0, N)), blank)
DEF asPos(pos(P, succ(R), C)) == nextLine(asPos(pos(P, R, C)))
DEF asPos(region(P, R, C, eR, eC)) == asPos(pos(P, R, C))
-- DEF asPos(pos(_, Row, Col)) == pos(Row,Col)
DEF asPos(_) == firstPos

FUN asImpl : interOpal ** (name'InterOpal -> name'Name) ** property -> 
                        sortImpl[name'Name]
DEF asImpl(Inter, AsName, freeType(Pos,_,Sort,Variants, _)) ==
sortImpl(AsName(Sort), asVariant(Inter, AsName, _) * Variants, asPos(Pos))

FUN asVariant : interOpal ** (name'InterOpal -> name'Name) ** 
        variant'InterOpal -> variant'Impl
DEF asVariant(Inter, AsName, variant(Pos, Cons, Test, Comps)) ==
        variant(AsName(Cons), AsName(Test), 
                asComp(Inter, AsName, _) * Comps, asPos(Pos))

FUN asComp : interOpal ** (name'InterOpal -> name'Name) ** 
        comp'InterOpal -> comp'Impl
DEF asComp(Inter, AsName, comp(Pos, Sel)) == 
        LET Obj == object(Inter, Sel)
            Fct == asFct(AsName, fct(kind(Obj)))
        IN comp(AsName(Sel), Fct, asPos(Pos))


-- FUN asImpl : property -> sortImpl[name'Name]

-- FUN reverseOnlys : struct'InterOpal -> natMap[seq[inst'Objects]]

