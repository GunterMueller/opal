-- %- LAST EDIT: Thu Dec  3 18:55:39 1992 by Carola Gerke (kassandra!carola) 
SIGNATURE Lexem
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- %- Autorin:     cg
-- %- Projekt:     OPAL1-Compiler (Scanner, Parser)
-- %- Zweck:       Lexikalik fuer OPAL

-- %- -----------------------------------------------------------------------
-- %$lexeme in their abstract form$
-- %- -----------------------------------------------------------------------

TYPE lexem == lex(value:denotation)
 
FUN     as      completely      data    def     else    fi
        fun     if              implementation  import  in              
        let     only            otherwise       signature
        sort    then            type            where   
        equation                arrow           product 
        colon   lambda          dot                     -- keywords
        commLine    commStart   commEnd                 -- comments
        pragmaStart    pragmaEnd                        -- pragma
        openBr closeBr comma apo openSqBr closeSqBr     -- seperators
        error           : lexem                         -- technical stuff

-- %- ------------------------------------------------------------------------
-- %$lexeme of keywords for options -zprop and -I -E$
-- %- ------------------------------------------------------------------------

FUN      all    and  dfd    ex     external  internal   law    not    
         or     properties  equal  implies   eqv        ineq     : lexem

-- %- ------------------------------------------------------------------------
-- %$lexeme for option -zwildcard$
-- %- ------------------------------------------------------------------------

FUN   wildchar : lexem 
FUN   wildchar? : denotation -> bool

-- %- ------------------------------------------------------------------------
-- %$lexeme for option -zseqGuard$
-- %- ------------------------------------------------------------------------

FUN orelse andelse : lexem

-- %- ------------------------------------------------------------------------
-- %$lexeme for option -zunderline$
-- %- ------------------------------------------------------------------------

FUN underline : lexem

-- %- ------------------------------------------------------------------------
-- %$lexeme for option -zpchecker$
-- %- ------------------------------------------------------------------------

FUN proof turnstile : lexem
FUN PROOFSCRIPT proofscript : lexem
FUN spc pre post : lexem
FUN theory assert assume: lexem
FUN prop jstf justf lemma goal: lexem

-- %- ------------------------------------------------------------------------
-- %$predefined identifier$
-- %- ------------------------------------------------------------------------

FUN BOOL bool true false true? false? band bor bnot beq bneq
    DENOTATION denotation <| tl 
    ABORT : lexem

-- %- -----------------------------------------------------------------------
-- %$Relations and Conversion on lexem$
-- %- -----------------------------------------------------------------------

FUN = |= < > <= >= : lexem ** lexem -> bool

FUN ` : lexem -> denotation
