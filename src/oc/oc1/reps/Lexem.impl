-- LAST EDIT: Thu Dec  3 18:55:07 1992 by Carola Gerke (kassandra!carola) 

IMPLEMENTATION Lexem
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- Autorin:     cg
-- Projekt:     OPAL1-Compiler (Scanner, Parser)
-- Zweck:       Lexikalik fuer OPAL

IMPORT  Denotation      ONLY    ++ < <= >= > = |=
        Char            ONLY char newline blank
-- %- ------------------------------------------------------------------------
-- %$Type$
-- %- ------------------------------------------------------------------------

DATA lexem == lex(value:denotation)

-- %- ------------------------------------------------------------------------

FUN = |= < > <= >= : lexem ** lexem -> bool
DEF = (Lex1,Lex2) == value(Lex1) = value(Lex2)
DEF |= (Lex1,Lex2) == value(Lex1) = value(Lex2)
DEF < (Lex1,Lex2) == value(Lex1) < value(Lex2)
DEF > (Lex1,Lex2) == value(Lex1) > value(Lex2)
DEF >= (Lex1,Lex2) == value(Lex1) >= value(Lex2)
DEF <= (Lex1,Lex2) == value(Lex1) <= value(Lex2)

DEF wildchar? (S) == S = value(wildchar)

-- %- ------------------------------------------------------------------------
-- %$predefined identifier$
-- %- ------------------------------------------------------------------------

DEF BOOL        == lex("BOOL")
DEF bool        == lex("bool")
DEF true        == lex("true")
DEF false       == lex("false")
DEF true?       == lex("true?")
DEF false?      == lex("false?")
DEF band        == lex("and")
DEF bor         == lex("or")
DEF bnot        == lex("~")
DEF beq         == lex("=")
DEF bneq        == lex("|=")
DEF DENOTATION  == lex("DENOTATION")
DEF denotation  == lex("denotation")
DEF <|          == lex("<|")
DEF tl          == lex("tl")
DEF ABORT       == lex("ABORT")

DEF PROOFSCRIPT == lex("PROOFSCRIPT")
DEF proofscript == lex("proofscript")
-- %- ------------------------------------------------------------------------
-- %$Keywords$
-- %- ------------------------------------------------------------------------

DEF openBr      == lex("(")
DEF closeBr     == lex(")")
DEF comma       == lex(",")
DEF openSqBr    == lex("[")
DEF closeSqBr   == lex("]")
DEF apo         == lex("'")
DEF as          == lex("AS")
DEF completely  == lex("COM" ++ "PLETELY")
DEF data        == lex("DATA")
DEF def         == lex("DEF")
DEF else        == lex("ELSE")
DEF fi          == lex("FI")
DEF fun         == lex("FUN")
DEF if          == lex("IF")
DEF implementation      == lex("IMPLEMENTATION")
DEF import              == lex("IMPORT")
DEF in          == lex("IN")
DEF let         == lex("LET")
DEF only        == lex("ON" ++ "LY")
DEF otherwise   == lex("OTHERWISE")
DEF signature   == lex("SIGNATURE")
DEF sort        == lex("SORT")
DEF then        == lex("THEN")
DEF type        == lex("TYPE")
DEF where       == lex("WHERE")
DEF equation    == lex("==")
DEF arrow       == lex("->")
DEF product     == lex("**")
DEF colon       == lex(":")
DEF lambda      == lex("\\\\")
DEF dot         == lex(".")

DEF all         ==  lex( "ALL"  )
DEF and         ==  lex( "AND"  )
DEF dfd         ==  lex( "DFD"  )
DEF ex          ==  lex( "EX"  )
DEF external    ==  lex( "EXTERNAL"  )
DEF internal    ==  lex( "INTERNAL"  )
DEF law         ==  lex( "LAW"  )
DEF not         ==  lex( "NOT"  )
DEF or          ==  lex( "OR"  )
DEF properties  ==  lex( "PROPERTIES"  )
DEF equal       ==  lex( "==="  )
DEF implies     ==  lex( "==>"  )
DEF eqv         ==  lex( "<=>"  )
DEF ineq        ==  lex( "<<="  )

DEF wildchar    == lex( "_" )
DEF andelse     == lex( "ANDIF")
DEF orelse      == lex( "ORIF")
DEF underline   == lex( "_" )

DEF commLine    == lex("--")
DEF commStart   == lex("/*")
DEF commEnd     == lex("*/")
DEF pragmaStart == lex("/$")
DEF pragmaEnd   == lex("$/")

DEF proof       == lex("PROOF")
DEF turnstile   == lex("|-")
DEF spc         == lex("SPC")
DEF pre         == lex("PRE")
DEF post        == lex("POST")
DEF theory      == lex("THEORY")
DEF assert      == lex("ASSERT")
DEF assume      == lex("ASSUME")
DEF jstf        == lex("JSTF")
DEF justf       == lex("JUSTF")
DEF prop        == lex("PROP")
DEF lemma       == lex("LEMMA")
DEF goal        == lex("GOAL")

DEF error       == lex("%error")

-- %- ------------------------------------------------------------------------
-- %$conversion is the selector of lexem$
-- %- ------------------------------------------------------------------------

FUN ` : lexem -> denotation
DEF ` (Lex) == value(Lex)

