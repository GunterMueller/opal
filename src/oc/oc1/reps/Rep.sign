-- %Zweck:      representation of terminals 
-- %- LAST EDIT: Wed Jul 31 15:44:25 1996 by Christian Maeder (andromache!maeder) 
SIGNATURE Rep
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:38 $ ($Revision: 1.1.1.1 $)

-- %- Autor:    cg
-- %- Projekt:  OPAL1-Compiler (Scanner, Parser)

IMPORT  -- lib
        Nat             ONLY nat 
        Char            ONLY char 
        Seq[denotation] ONLY seq

IMPORT  -- reps
        Pragma          ONLY pragma  -- reexport
       Option[rep] ONLY option


-- %- ------------------------------------------------------------------------
-- %$map/table of representations$
-- %- ------------------------------------------------------------------------

SORT repTab 

-- %- ------------------------------------------------------------------------
-- %$accessing the map of representations$
-- %- ------------------------------------------------------------------------
FUN  getRep   : repTab ** denotation -> rep
-- PRE denotation must have been inserted before

-- %- ------------------------------------------------------------------------
-- %$constructor function on the map of representations$
-- %- ------------------------------------------------------------------------

FUN  initialTab : repTab
FUN  insert   : repTab ** denotation -> repTab ** rep
-- %insert generated denotation
FUN  insertGen   : repTab ** denotation -> repTab ** rep


FUN generate  : repTab ** denotation -> repTab ** denotation
FUN genAndIns : repTab ** denotation -> repTab ** rep

-- %- ------------------------------------------------------------------------
-- %$conversion$
FUN  # : repTab -> nat
FUN  dump : repTab -> denotation


-- %- ------------------------------------------------------------------------
-- %$representation$
-- %- ------------------------------------------------------------------------

SORT rep 
-- TYPE rep == mkRep(ord:nat,lexem:denotation,gen:bool)

FUN ord : rep -> nat 
FUN lexem : rep -> denotation 
-- %- ------------------------------------------------------------------------
-- %$representation of strings/ names$
-- %- ------------------------------------------------------------------------

FUN nilRep : rep
FUN nilRep? : rep -> bool 
-- %- ------------------------------------------------------------------------
-- %$for the wildcard option wildchars are generated reps$
-- %- ------------------------------------------------------------------------

FUN generated? : rep -> bool

-- %- ------------------------------------------------------------------------
-- %$for (de)coding laws as sorts$
-- %- ------------------------------------------------------------------------

FUN code: repTab ** rep -> repTab ** rep
FUN coded? coded?? : rep -> bool
FUN decode: repTab ** rep -> option[rep]

-- %- ------------------------------------------------------------------------
-- %$for (de)coding names of proofs$
-- %- ------------------------------------------------------------------------

FUN codeP: repTab ** rep -> repTab ** rep
FUN codedP? codedP?? : rep -> bool
FUN decodeP: repTab ** rep -> option[rep]

-- %- ------------------------------------------------------------------------
-- %$relations on representations$
-- %- ------------------------------------------------------------------------

FUN = |= > < <= >= : rep ** rep -> bool
FUN = |= > < <= >= : nat ** rep -> bool

-- %- ------------------------------------------------------------------------
-- %$representation of keywords$
-- %- ------------------------------------------------------------------------

FUN     as      completely      data    def     else    fi
        fun     if              implementation  import  in              
        let     only            otherwise       signature
        sort    then            type            where   
        equation                arrow           product 
        colon   lambda          dot             prBeg prEnd -- keywords
        openBr  closeBr comma apo openSqBr closeSqBr    -- seperators
        error           : rep                           -- technical stuff

-- %- ------------------------------------------------------------------------
-- %$representation of keywords for options -zprop$
-- %- ------------------------------------------------------------------------

FUN      all    and   dfd         ex     external  internal  not
         law    or    properties  equal  implies   eqv       ineq : rep

-- %- ------------------------------------------------------------------------
-- %$representation of keywords for options -zseqGuard$
-- %- ------------------------------------------------------------------------

FUN     andelse orelse : rep

-- %- ------------------------------------------------------------------------
-- %$representation of keywords for options -zpchecker$
-- %- ------------------------------------------------------------------------

FUN proof turnstile : rep

FUN spc pre post: rep
FUN theory assert assume: rep

-- %predefined identifier

FUN PROOFSCRIPT proofscript: rep

-- %- ------------------------------------------------------------------------
-- %$representation of predefined identifier$
-- %- ------------------------------------------------------------------------

FUN     BOOL bool true false true? false? bneq beq bnot bor band
        DENOTATION denotation <| tl ABORT: rep

-- %Predefined structure name? 
FUN predefinedStr? : rep -> bool

-- %- ------------------------------------------------------------------------
-- %$technical stuff$
-- %- ------------------------------------------------------------------------

FUN     lastKeyword : rep

-- %- ------------------------------------------------------------------------
-- %$conversion$
-- %- ------------------------------------------------------------------------

FUN  ` : rep -> denotation
FUN `` : nat -> denotation
