IMPLEMENTATION PostInterOpal
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT OcError ONLY ok err errKind errors + hint warning error
       ComAction ONLY done
       Map ONLY map def def? ! {} {}?
       InterOpal COMPLETELY
       Seq ONLY seq :: ft rt <> ++ #
       OcPos ONLY pos firstPos unknown mkPos mkReg unknownP part
       Denotation ONLY +/+ =
       ComCompose ONLY &
       SeqFilter ONLY |
       SeqMap ONLY *
       Com ONLY com break
       SeqReduce ONLY /
       Objects ONLY inst struct impDecl
       OcExit ONLY languageError
       InterOpalAccess ONLY transStructs objects laws
       Pair ONLY pair 1st 2nd &
       String ONLY string
       Char ONLY char
       Nat ONLY > 1 =
       Option ONLY nil avail


DEF checkInfoPragmas(Opts)(Io) ==
  LET diagMap == (addDiag, {}) / (++, <>) / pragmas * transStructs(Io)
  IN
  IF diagMap {}? THEN done
  ELSE
    LET obs == objects(Io)
        props == laws(Io)
    IN
    errors(Opts, (genErr(diagMap), ok) / obs + 
                 (genErr(diagMap), ok) / props)   & (\\ ok.
    IF ok THEN done
    ELSE break(languageError)
    FI)
  FI

/* %If pragma designates a diagnostic, add it to map */

FUN addDiag: pragma ** map[name, <, pair[errKind, denotation]] ->
              map[name, <, pair[errKind, denotation]]
DEF addDiag(pragma(pItems), M) ==
  IF (pItems #) > 1 THEN 
    IF (ft(pItems) token?) and (ft(rt(pItems)) objects?) 
      ANDIF #(objects(ft(rt(pItems)))) = 1 THEN
      LET n == clearInst(ft(objects(ft(rt(pItems)))))
          t == (+/+(" "), "") / text * token? | rt(rt(pItems))
          e == text(ft(pItems))
      IN
      IF e = "HINT" THEN (n, hint & t) def M
      IF e = "WARNING" THEN (n, warning & t) def M
      IF e = "ERROR" THEN (n, error & t) def M
      ELSE M        
      FI
    ELSE
      M
    FI
  ELSE
    M
  FI
            
FUN clearInst: name -> name
DEF clearInst(name(id, org, _)) == name(id, org, none)

FUN genErr: map[name, <, pair[errKind, denotation]] -> 
             object ** err -> err
DEF genErr(M)(ob, E) ==
  IF def(ob) def? THEN
    (genErr(M), E) / rhs * eqns(def(ob))
  ELSE
    ok
  FI

FUN genErr: map[name, <,pair[errKind, denotation]] -> 
             property ** err -> err 
DEF genErr(M)(p, E) ==
  IF p freeType? THEN E
  IF p law? THEN genErr(M)(formula(p), E)
  FI

FUN genErr: map[name, <,pair[errKind, denotation]] -> 
             formula ** err -> err 
DEF genErr(M)(dfd(_, e), E) == genErr(M)(e, E)
DEF genErr(M)(approx(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(cong(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(neg(_, f), E) == genErr(M)(f, E)
DEF genErr(M)(conj(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(disj(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(impl(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(equiv(_, l, r), E) == genErr(M)(l, genErr(M)(r, E))
DEF genErr(M)(forall(_, _, b), E) == genErr(M)(b, E)
DEF genErr(M)(exist(_, _, b), E) == genErr(M)(b, E)
DEF genErr(_)(informal(_, _), E) == E
DEF genErr(_)(other(_, _, _), E) == E

FUN genErr: map[name, <,pair[errKind, denotation]] -> 
             expr ** err -> err 
DEF genErr(M)(name(p, n), E) ==
  IF def?(clearInst(n), M) THEN
    E + err(1st(M!clearInst(n)), 2nd(M!clearInst(n)), back(p))
  ELSE
    E
  FI
DEF genErr(_)(den(_, _), E) == E
DEF genErr(M)(tuple(_, els), E) == (genErr(M), E) / els
DEF genErr(M)(apply(_,f, a), E) == genErr(M)(f, genErr(M)(a, E))
DEF genErr(M)(cases(_, gs, nil), E) == (genErr(M), E) / gs
DEF genErr(M)(cases(_, gs, avail(e)), E) == genErr(M)(e, (genErr(M), E) / gs)
DEF genErr(M)(lambda(_, _, b), E) == genErr(M)(b, E)
DEF genErr(M)(block(_, eqs, b), E) == genErr(M)(b, (genErr(M), E) / rhs * eqs)

FUN genErr: map[name, <,pair[errKind, denotation]] -> 
             guard ** err -> err
DEF genErr(M)(guard(_, t, e), E) == genErr(M)(e, genErr(M)(t, E))


/* %translate Interopal pos back to globSig pos */
FUN back: pos'InterOpal -> pos'OcPos
DEF back(unknown) == unknown
DEF back(part(_)) == unknown
DEF back(pos(_, r, c)) == mkPos(r, c)
DEF back(region(_, r1, c1, r2, c2)) == mkReg(unknownP, r1, c1, r2, c2)