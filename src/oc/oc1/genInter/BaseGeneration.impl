IMPLEMENTATION BaseGeneration
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
-- %- =========================================================================
-- %- Autor:       ralfi
-- %- Projekt:     OPAL1-Compiler
-- %- Zweck:       Uebersetzung der analysierten Quelle nach InterOpal
-- %- =========================================================================

IMPORT  AGSig           ONLY    structPos formalParams
        AnalyzedGlobSig ONLY    pos : globSig**name -> pos
        PREDEF_BOOL     ONLY    bool false true
        GlobSig         ONLY    globSig  structures
--      InterOpal       ONLY    < extProperties ident impl implementation inst intProperties interOpal kind name object origin part pos property signature struct unknown
        InterOpal       COMPLETELY
        Map             ONLY    def map def? {}
        Name            ONLY    name
        Nat             ONLY    1 = nat + 10000
        OcOptions         ONLY    extp? impl? intp? options sign?
        OcPos             COMPLETELY
        Rep             ONLY    ord rep
        Seq             ONLY    % ++ seq :: <>
        String          ONLY    string
        Table ONLY ! table
        ImpExpEntry ONLY unparam? param? structE

DEF globSig2Part (Opts) ==
        IF Opts sign? THEN signature
        IF Opts impl? THEN implementation
        IF Opts extp? THEN extProperties
        IF Opts intp? THEN intProperties
        FI


DEF rep2Ident(Rep) == ident(ord(Rep))
/* %eigentlich wäre der Offset von 10000 wohl nicht nötig, aber nun steht er
    schon an so vielen Stellen ... (kd) */
DEF rep2LawIdent(Rep) == ident(ord(Rep) + 10000)


DEF =(Name1:name)(Name2) == Name1 = Name2

DEF Name1:name = Name2 ==
        IF Name1 < Name2 THEN false
        IF Name2 < Name1 THEN false
        ELSE true
        FI

DEF Origin1:origin = Origin2 ==
        IF Origin1 < Origin2 THEN false
        IF Origin2 < Origin1 THEN false
        ELSE true
        FI

DEF updateStruct(Orig,Struct,interOpal(Part,Structs)) ==
        interOpal(Part,def(Orig,Struct,Structs))

DEF updateInst(Inst,SName,
               struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas)) ==
        struct(Pos,Origin,Symbol,def(Inst,SName,Insts),
               Onlys,Objs,Props,Pragmas)

DEF updateOnlys(Inst,SName,
                struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas))==
        struct(Pos,Origin,Symbol,Insts,def(Inst,SName,Onlys),
               Objs,Props,Pragmas)

DEF updateObject(Obj,
                 struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas)) ==
        struct(Pos,Origin,Symbol,Insts,Onlys,def(ident(Obj),Obj,Objs),
               Props,Pragmas)

DEF updateProp(Prop,
               struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas)) ==
        struct(Pos,Origin,Symbol,Insts,Onlys,Objs,
               def(ident(Prop),Prop,Props),Pragmas)

DEF updateObjPos(SPos,object(Pos,Ident,Symbol,Kind,Def,Props,Pragmas)) ==
        object(SPos++Pos,Ident,Symbol,Kind,Def,Props,Pragmas)

DEF updatePragmas(Pragmas,
               struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,_)) ==
               struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas)

DEF addPragma(Pragma,
              struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragmas)) ==
  struct(Pos,Origin,Symbol,Insts,Onlys,Objs,Props,Pragma::Pragmas)

FUN structPos: globSig ** part'InterOpal -> pos'InterOpal
-- Position des Strukturnamens
DEF structPos(Sig,Part) == pos(structPos(Sig),Part)

FUN importPos: globSig ** nat -> seq[pos'InterOpal]
DEF importPos(Sig,No) ==  
  LET sE == No!structures(Sig)
  IN
  IF unparam?(sE) or param?(sE) THEN pos(mkPos(10000,10000), signature)%
  ELSE pos(unknown, signature)%
  FI

FUN pos: pos'OcPos ** part'InterOpal -> pos'InterOpal
DEF pos(Pos,Part0) ==
  LET Part == IF signature?(Pos) THEN signature ELSE Part0 FI
  IN   
  IF unknown?(Pos) THEN unknown
  IF region?(Pos) THEN region(Part, lin(Pos), col(Pos),
                              eLin(Pos), eCol(Pos))
  ELSE pos(Part,lin(Pos),col(Pos))
  FI
       
FUN pos: globSig ** name'Name ** part'InterOpal -> seq[pos'InterOpal]
DEF pos(Sig,Name,Part) == 
   LET  Pos     == pos(Sig,Name)
   IN   pos(Pos,Part)%

FUN pos: interOpal -> pos'InterOpal
DEF pos(interOpal(Part,_)) == part(Part)


