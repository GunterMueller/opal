IMPLEMENTATION ReflectionConv

IMPORT Denotation COMPLETELY
       Reflection COMPLETELY
       Seq COMPLETELY
       SeqConv COMPLETELY


DEF name(identifier, kind, struct)` ==
  "name(" ++ identifier ++ ", " ++ (kind`) ++ ", " ++ (struct`) ++ ")"


DEF sort` == "SORT"
DEF value(type)` == type`

DEF sort(name)` == name`

DEF basic(sort)` == sort`
DEF product(<>)` == "()"
DEF product(factors)` ==
  LET print == \\ factor . IF factor basic? THEN factor`
			   ELSE "(" ++ (factor`) ++ ")"
			   FI
  IN `("", " ** ", "")(print)(factors)
DEF function(domain, codomain)` ==
  LET dom == IF domain function? THEN "(" ++ (domain`) ++ ")"
	     ELSE domain`
	     FI
  IN dom ++ " -> " ++ (codomain`)

DEF struct(identifier, instance)` ==
  "struct(" ++ identifier ++ ", " ++ `("[", ", ", "]")(`)(instance) ++ ")"
