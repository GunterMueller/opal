/* %- Rcs-Info (automatically generated)

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/U_REFLECTION_ocs.impl,v 1.1 2001-06-05 10:32:06 kd Exp $
  $Author: kd $
  $Date: 2001-06-05 10:32:06 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/10/08 19:25:58  kd
  neue Fassung von Baltasar

  Revision 1.5  1998/12/06 20:30:04  silver
  First version with compiler extentions.

  Revision 1.4  1998/11/12 13:20:10  silver
  Implementation of hashed sortReflections.

  Revision 1.3  1998/11/03 16:56:53  silver
  Wrote fast compare mechanism.

  Revision 1.2  1998/10/09 15:55:56  silver
  Defined sort comparison.

  Revision 1.1  1998/09/30 17:26:20  silver
  Initial revision

*/

IMPLEMENTATION REFLECTION

IMPORT Reflection COMPLETELY
       CAST ONLY cast
       Seq COMPLETELY


DATA instances == <>
		  :: (ft : coreReflection,
		      rt : instances)

DEF sort(Identifier, Struct, Instance) ==
  cast(sort(name(Identifier, sort, struct(Struct, cast(Instance)))))

DEF value(Identifier, Struct, Instance, Type) ==
  cast(name(Identifier, value(type(Type)), struct(Struct, cast(Instance))))


FUN type : coreType -> type

DEF type(basic(Sort)) == basic(cast(Sort))
DEF type(<>) == product(<>)
DEF type(ft :: rt) == product(type(ft) :: factors(type(rt)))
DEF type(function(domain, codomain)) == function(type(domain), type(codomain))


DATA coreType == basic(sort : coreReflection)
		 <>
		 ::(ft : coreType, rt : coreType)
		 function(domain : coreType, codomain : coreType)
