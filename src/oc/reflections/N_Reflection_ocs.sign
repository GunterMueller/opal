/* %- Rcs-Info 

  $Id$
  $Author: kd $
  $Date$
  $State: Exp $

  $Locker:  $
  $Revision$
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.3  1999/10/22 12:43:44  kd
  In Reflections die Dokumentation korrigiert;
  ebenso die Beispiele der Reflections;
  kleine Korrektur for pcexamples;
  Dateien aus oc/shared{base,extlib,interOpal} entfertn, die nicht
  mehr benötigt werden

  Revision 1.2  1999/10/09 16:43:38  kd
  *** empty log message ***

  Revision 1.1  1999/10/08 19:25:58  kd
  neue Fassung von Baltasar

  Revision 1.14  1999/02/23 14:45:07  schintke
  Implementation of codeReflection

  Revision 1.13  1999/02/22 13:50:57  schintke
  changed internally used type from void to obj'RUNTIME

  Revision 1.12  1998/12/06 20:30:04  silver
  First version with compiler extentions.

  Revision 1.11  1998/11/12 13:20:10  silver
  Implementation of hashed sortReflections.

  Revision 1.10  1998/11/03 16:52:11  silver
  Sort reflection may now also be constructed by the user.

  Revision 1.9  1998/11/03 13:17:42  silver
  Small changes.

  Revision 1.8  1998/10/20 13:35:04  silver
  Fixed a spelling mistake.

  Revision 1.7  1998/10/09 15:54:55  silver
  Moved comparison and equality of sortReflections into REFLECTION.

  Revision 1.6  1998/09/30 17:25:17  silver
  Worked in proposals from meeting on 30sep98.

  Revision 1.5  1998/09/28 16:59:49  silver
  Added further documentation.

  Revision 1.4  1998/06/16 12:13:13  trancon
  Apply and tuple implemented

  Revision 1.3  1998/05/27 13:54:57  silver
  Constructor for sortReflection now named freeType.

  Revision 1.2  1998/05/22 11:07:42  silver
  Till's proposal for namings implemented into code.

  Revision 1.1  1998/05/22 08:55:40  silver
  Initial revision

*/

/* % 
     As the reflection system should make available meta information
     at runtime, it must define several types which @emph{model} the
     meta information. These types are used to talk @emph{in} @OPAL
     @emph{about} @OPAL. The data model of the core reflection system
     is given by a collection of free type definitions.
*/


-- %$Declaration and imports$

SIGNATURE Reflection

IMPORT Seq[name] ONLY seq
       Seq[type] ONLY seq


-- %$Name Reflection$

/* %
    A @code{name} determines a named object in an @OPAL program, and
    is described by its @code{identifier}, @emph{kind} and origin
    structure. Note that @OPAL employs full overloading, such
    that all these components are required to identify a name
    uniquely.
    */

TYPE name == name (identifier : denotation,
                   kind       : kind,
                   struct     : struct)

FUN = < : name ** name -> bool


-- %$Kind Reflection$

/* %
    A @code{name} represents either a @code{sort} or a @code{value}
    with @code{type}. These two possibilities are represented as
    @code{kind}. For example, the name @code{int:SORT'Int} in literal 
    @OPAL syntax is represented as @code{name("int", sort,
                                              IntStruct)}. Here,
    @code{IntStruct} is a reflection of a structure, discussed below.
    */

TYPE kind == sort
             value (type : type)

FUN = < : kind ** kind -> bool


-- %$Sort Reflection$

/* %
    A @code{sort} is uniquely identified by its name.
    */

TYPE sort == sort (name : name)

FUN = < : sort ** sort -> bool


-- %$Structure Reflection$

/* %
    An @OPAL structure is identified by its @code{identifier} and an
    instantiation list. An instantiation list is a sequence of names, 
    which is empty if the structure has no parameters. For example
    the structure @code{Int} is represented as
    @code{struct("Int", <>)}. The structure @code{Seq[int]} is
    represented as @code{struct("Seq", IntName :: <>)}.
    */

TYPE struct == struct (identifier : denotation,
                       instance   : seq[name])

FUN = < : struct ** struct -> bool


-- %$Type Reflection$

/* %
    An @sc{Opal} type, which can be either @code{basic}, a cartesian
    @code{product} or a @code{function} space is described by
    @code{type}.

    Note, that apart from enquiring a type, you might also wish to
    construct your own type reflections and then try to match them
    against a given type reflection.
    */

TYPE type == basic    (sort     : sort)
             product  (factors  : seq[type])
             function (domain   : type,
                       codomain : type)

FUN = < : type ** type -> bool


-- %$Value Reflection$

/* %
    A @code{value} is a reflection of a value. It stores the
    @code{type} of the reflected value as well as the @code{value}
    itself. However, the value is stored in an opaque way and cannot
    be observed directly.

    See @ref{@Sign{ReflectionBuild}} for details.
    */
    
SORT value

FUN type : value -> type


-- These should be obsolete once generic standard order for free types
-- is implemented:

FUN < = : type ** type -> bool


/* %
@ignore
*/
-- not for user purpose -------------------------------------------

IMPORT RUNTIME ONLY obj

TYPE value == pair (actual : obj,
                    type : type)

/* %
@end ignore
*/


