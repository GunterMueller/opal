/* % $Caching function results$
    To speed up repeated calculation of a function result,
    especially when involving side effects, it is clever to use
    a @emph{cache}. The functionality of such a cache should be as
    simple and transparent as possible. One might want to
    @code{cache}
    a function with or without precached results. And one should be
    able to access the function, using cached results if possible or
    computing and caching a previously unknown result. */

/* % A @code{cache} is implemented as an an abstract map-like object,
     mapping elements of @code{dom}, ordered by @code{<}, to elements
     of @code{codom}. It will only work correctly if used as the
     definition of a constant. */

SIGNATURE Cache[dom, <, codom]

SORT dom codom
FUN < : dom ** dom -> bool

IMPORT Map[dom, <, codom] ONLY map


SORT cache

/* % $Initializing a cache$
     @code{cache(f, m)} yields a cache that will store results of
     @code(f) and has the initial precached results defined in
     @code{m}. It will never compute @code{f(x)} for an @code{x} in
     the domain of @{m}. @code{cache(f)} is equivalent to
     @code{cache(f, {}). */
 
FUN cache : (dom -> codom) -> cache
FUN cache : (dom -> codom) ** map[dom, <, codom] -> cache

/* % $Accessing a cache$
     If the cache @code{c} was set up for function @code{f}, then
     @code{c ! x} yields @code{f(x)}. Besides, the result will be
     stored in the cache, so that a second evaluation of @code{c ! x}
     will not cause @code{f(x)} to be evaluated again. */

FUN ! : cache ** dom -> codom



