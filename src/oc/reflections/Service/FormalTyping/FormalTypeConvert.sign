/* %- Rcs-Info 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/FormalTyping/FormalTypeConvert.sign,v 1.1 1999-03-23 12:37:19 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:19 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:36  opaladm
  neu eingefuehrt

  Revision 1.3  1998/12/19 17:36:58  silver
  Changed to new pragma style.

  Revision 1.2  1998/12/10 23:58:20  silver
  Using pragma now.

  Revision 1.1  1998/11/11 14:52:10  silver
  Initial revision

  Revision 1.3  1998/11/03 13:20:20  silver
  Documentation change.

  Revision 1.2  1998/10/27 14:55:52  silver
  Changed dynamic tag.

  Revision 1.1  1998/06/13 20:14:34  silver
  Initial revision

*/

/* % 
This structure is used to specialize or generalize a type. 
*/

SIGNATURE FormalTypeConvert [special, general] 

/$ DYNAMIC [special, general] $/

-- $Author: kd $
-- $Date: 1999-03-23 12:37:19 $
-- $Revision: 1.1 $

SORT general
SORT special

IMPORT	Option[special]  	ONLY	option
	Option[general]		ONLY	option

-- %$Checking instantiations$

/* %
The following function will return true iff the structure argument
@code{special} is a specialization of the argument @emph{general}.
*/

FUN isSpecialization? : bool


-- %$Specializing an object$

/* %
If the first structure parameter is the same type as the second
parameter @code{specialize} will return an object of type
@code{general} as an object of type @code{special}. 
*/

FUN specialize : general -> option[special]


-- %$Generalize an object$

/* %
Same as the specialize case, only vice versa.
*/

FUN generalize : special -> option[general]
