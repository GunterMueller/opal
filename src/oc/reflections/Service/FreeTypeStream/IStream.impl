/* %- Rcs-Info

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/FreeTypeStream/IStream.impl,v 1.1 1999-03-23 12:37:38 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:38 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:41  opaladm
  neu eingefuehrt

  Revision 1.5  1999/03/03 12:05:13  jensen
  Final chekin

  Revision 1.4  1999/02/28 17:54:49  jensen
  *** empty log message ***

  Revision 1.3  1998/12/11 00:00:09  silver
  Using pragma now.

  Revision 1.2  1998/11/12 15:00:40  silver
  Migrating to virtual functions.

  Revision 1.1  1998/06/13 20:08:44  silver
  Initial revision

*/

IMPLEMENTATION IStream [alpha]

IMPORT	Com			ONLY	succeed com
	ComCompose		ONLY	& 
	Void			ONLY	void nil
	Option			COMPLETELY
	Stream			ONLY	stdIn stdErr output 
					write: output ** denotation -> com[void]
					readLine
					string com[string]
	StringConv		ONLY	` 
	String			ONLY	string ! empty? ft rt
	InputMonad		ONLY	hide unhide text
	Seq			ONLY	<>

	Nat			ONLY	nat ! > 0 1 =
        Int			ONLY    int 0 1 > =
        Char			ONLY    char digit? = !
        RelCmp			ONLY    rel < = >
        Subrel 			ONLY    subrel < = |=
        Real			ONLY 	real
        SmallReal		ONLY    sreal
        Bool			COMPLETELY
        

	Reflection		COMPLETELY
	ReflectionBuild		COMPLETELY
	FormalTypeConvert	COMPLETELY
	FormalTypeConvert	COMPLETELY

	IOMethods		COMPLETELY
        Virtual			COMPLETELY
        VirtualEnv  		COMPLETELY
        VirtualBind		COMPLETELY
	VirtualBindEnv		COMPLETELY

	Denotation		ONLY  	# =


-- %$Monadic input stream operations$

DEF cin                  == ifstream (stdIn)
DEF cin (onFail)         == ifstream (stdIn, onFail)
DEF ifstream (s)         == ifstream (s, "")
DEF ifstream (s, onFail) == 
  hide (readLine (s) & (\\ str .
        LET
          a == convert (str)
        IN
          IF a avail? THEN 
            succeed (cont(a))
          ELSE
            write(stdErr, onFail) & 
	    unhide (ifstream (s, onFail))
          FI
        ), onFail)

DEF is | p ==
  hide (unhide (is) & (\\ result.
	IF p(result) THEN
	  succeed(result)
	ELSE
	  write (stdErr, text(is)) &
	  unhide (is | p)
	FI), text(is))



-- %$Dynamic reading$

FUN convert : string -> option[alpha]
DEF convert (str) ==
  IF reflect[alpha] send (check, str) THEN
    avail (read send str)  
  ELSE 
    nil   
  FI
