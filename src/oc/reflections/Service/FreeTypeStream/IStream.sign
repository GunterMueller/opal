/* %- Rcs-Info (automatically generated) 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/FreeTypeStream/IStream.sign,v 1.1 1999-03-23 12:37:39 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:39 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:41  opaladm
  neu eingefuehrt

  Revision 1.4  1998/12/19 17:34:09  silver
  Changed to new DYNAMIC pragma notation.

  Revision 1.3  1998/12/11 00:00:09  silver
  Using pragma now.

  Revision 1.2  1998/11/12 15:00:40  silver
  Migrating to virtual functions.

  Revision 1.1  1998/06/13 20:08:44  silver
  Initial revision

*/

/* % 
DynStream is a structure that is designed to use the power of
reflections to simplify Opal IO. In this structure you get the basic
objects only. Use @ref{@Sign{IStreamShift}} for the actual stream
printing. 
*/

SIGNATURE IStream [alpha] 

/$ DYNAMIC [alpha] $/

-- $Author: kd $
-- $Date: 1999-03-23 12:37:39 $
-- $Revision: 1.1 $

SORT alpha

IMPORT	Stream			ONLY	input
	Com[void]		ONLY	com
	Void			ONLY	void


-- %$Input streams$

/* %
The following operations produce input streams. You can specify an
error strings, which will be used to reprompt the user whenever an
input is invalid.
*/

IMPORT InputMonad[alpha]	ONLY    istream : SORT
	
FUN cin      : istream
FUN cin      : denotation -> istream
FUN ifstream : input -> istream
FUN ifstream : input ** denotation -> istream


-- %$Filtering streams$

/* %
The following operation may be used to @emph{filter} a stream. That
means, that the stream will accept only input of the correct type
which fulfills the given predicate. If the predicate is not fulfilled,
the next input is read and possibly an error string is printed to
cerr. 
*/

FUN | : istream ** (alpha -> bool) -> istream
