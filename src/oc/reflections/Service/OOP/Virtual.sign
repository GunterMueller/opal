/* %- Rcs-Info (automatically generated) 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/OOP/Virtual.sign,v 1.1 1999-03-23 12:37:54 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:54 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:45  opaladm
  neu eingefuehrt

  Revision 1.3  1999/01/27 12:21:27  silver
  Added new forms of virtual functions.

  Revision 1.2  1998/11/12 14:47:13  silver
  First documentation.

*/

/* % 
This structure provides the basic functions for building virtual
functions. For the actual binding, you will need to use
@code{VirtualBind}. 
*/

SIGNATURE Virtual [aux]

-- $Author: kd $
-- $Date: 1999-03-23 12:37:54 $
-- $Revision: 1.1 $

SORT aux

IMPORT	Seq[methodBinding]	ONLY	seq 
	Seq[accessorBinding]	ONLY	seq
	Seq[binAccessorBinding]	ONLY	seq
	Seq[constructorBinding]	ONLY	seq
	Reflection		ONLY	reflection sortReflection

-- %$Kinds of virtual functions$

/* % There are three kinds of virtual function. These are: */

SORT method
SORT accessor
SORT binAccessor
SORT constructor

-- %$Constructing virtual functions$

/* % The following functions create virtual functions. Note, that this
creation is a slow process, while the accessing is fast. The function
for creating an accessor comes in two flavours: One with a default
value and one without. */

FUN method      : seq[methodBinding]      -> method

FUN binAccessor : seq[binAccessorBinding] ** 
		    (reflection ** reflection -> aux) -> binAccessor
FUN binAccessor : seq[binAccessorBinding] -> binAccessor

FUN accessor    : seq[accessorBinding]    ** 
		    (reflection -> aux) -> accessor
FUN accessor    : seq[accessorBinding]    -> accessor

FUN constructor : seq[constructorBinding] -> constructor

-- %$Calling a virtual functions$

/* % For calling a virtual function, you use the operator
@code{!}. For example, to obtain the size of a window, you might write
@code{sizeOf ! myWindow}. Note, that the binding interface provides
nicer functions for this. */

FUN ! : method ** reflection ** aux		-> reflection
FUN ! : accessor ** reflection      		-> aux
FUN ! : binAccessor ** reflection ** reflection	-> aux
FUN ! : constructor ** sortReflection ** aux	-> reflection


-- %$Function bindings$

SORT methodBinding
SORT accessorBinding
SORT binAccessorBinding
SORT constructorBinding


-- % @ignore

-- not for user purpose

FUN bind: sortReflection ** (reflection ** reflection -> aux) -> binAccessorBinding
FUN bind: sortReflection ** (reflection -> aux) -> accessorBinding
FUN bind: sortReflection ** (aux -> reflection) -> constructorBinding
FUN bind: sortReflection ** (reflection ** aux -> reflection) -> methodBinding

-- % @end ignore