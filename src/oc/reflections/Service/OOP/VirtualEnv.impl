/* %- Rcs-Info (automatically generated) 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/OOP/VirtualEnv.impl,v 1.1 1999-03-23 12:37:58 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:58 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:45  opaladm
  neu eingefuehrt

  Revision 1.4  1999/01/27 12:21:27  silver
  Added new forms of virtual functions.

  Revision 1.3  1998/12/10 23:58:58  silver
  Using pragma now.

  Revision 1.2  1998/11/12 14:47:13  silver
  First documentation.

*/

IMPLEMENTATION VirtualEnv [aux, env]

-- $Author: kd $
-- $Date: 1999-03-23 12:37:58 $
-- $Revision: 1.1 $

IMPORT	Seq			COMPLETELY
	Array			COMPLETELY
	SeqMap			ONLY	*
	SeqReduce		ONLY	/
	Nat			COMPLETELY
	Reflection      	COMPLETELY
	Void			ONLY	void

	ABORT			COMPLETELY
	
	ReflectionBuild		COMPLETELY
	SortReflection		ONLY	sortReflection unique


DATA accessorBinding	== bind (sort     : sortReflection,
           	            	 function : reflection ** env -> aux)

DATA accessor		== pack (bindings : array[accessorBinding])

DATA classMethodBinding	== bind (sort     : sortReflection,
           	            	 function : env ** sortReflection -> aux)
DEF bind(s, f : env -> aux) == bind (s, (\\ e, _ . f(e)))

DATA classMethod	== pack (bindings : array[classMethodBinding])


DEF accessor (bindings) 	 == 
  accessor (bindings, (\\ _, _ . ABORT("Unbound sortReflection.")))
DEF accessor (bindings, default) ==
  LET
    array_size    == succ(succ(max / (0, ((\\ b. unique(sort(b))) * bindings))))
    initial_array == init(array_size, bind(reflect[void], default))
  IN
    pack(  (\\ binding, arr. (arr, unique(sort(binding))) := binding) 
	 / (initial_array, bindings))
    
DEF a ! (refl, env) == 
  function(bindings(a) ! 
	   (min(pred(#(bindings (a))), unique(sort(type(refl)))))) 
    (refl, env)


DEF classMethod (bindings) 	 == 
  classMethod (bindings, (\\ _, _ . ABORT("Unbound sortReflection.")))
DEF classMethod (bindings, default) ==
  LET
    array_size    == succ(succ(max / (0, ((\\ b. unique(sort(b))) * bindings))))
    initial_array == init(array_size, bind(reflect[void], default))
  IN
    pack(  (\\ binding, arr. (arr, unique(sort(binding))) := binding) 
	 / (initial_array, bindings))
    
DEF a ! (env, sort) == 
  function(bindings(a) ! 
	   (min(pred(#(bindings (a))), unique(sort)))) 
    (env, sort)


DEF (sort, function) :: s ==
  bind (sort, function) :: s

DEF self send (a, e) ==
  a ! (e, self)


