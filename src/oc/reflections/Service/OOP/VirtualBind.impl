/* %- Rcs-Info (automatically generated) 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/OOP/VirtualBind.impl,v 1.1 1999-03-23 12:37:55 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:55 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:45  opaladm
  neu eingefuehrt

  Revision 1.5  1999/02/22 14:28:52  schintke
  changed internal type from void to obj

  Revision 1.4  1999/01/27 12:21:27  silver
  Added new forms of virtual functions.

  Revision 1.3  1998/12/10 23:58:58  silver
  Using pragma now.

  Revision 1.2  1998/11/12 14:47:13  silver
  First documentation.

*/

IMPLEMENTATION VirtualBind [alpha, aux] 


IMPORT	Virtual [aux]		COMPLETELY
	ReflectionBuild [alpha]	COMPLETELY
	Reflection              COMPLETELY
	Seq			COMPLETELY
	CAST			COMPLETELY


DEF (function :: s) : seq[constructorBinding] ==
  bind (reflect, (\\ a. reflect(function(a)))) :: s

DEF (function :: s) : seq[accessorBinding] ==
  bind (reflect, (\\ refl. function
		  (cast[obj, alpha](getValue(refl))))) :: s

DEF (function :: s) : seq[binAccessorBinding] ==
  bind (reflect, (\\ refl1, refl2. function
		  (cast[obj, alpha](getValue(refl1)),
		   cast[obj, alpha](getValue(refl2))))) :: s

DEF (function :: s) : seq[methodBinding] ==
  bind (reflect, (\\ refl, a. reflect(function
		  (cast[obj, alpha](getValue(refl)), a)))) :: s


-- The cast are not strictly necessary, but faster.

DEF self send (m, a) ==
  cast[obj, alpha](getValue(m ! (reflect(self), a)))

DEF self send a ==
  a ! reflect(self)

DEF (self1, self2) send a ==
  a ! (reflect(self1), reflect(self2))

DEF send (c, a) ==
  cast[obj, alpha](getValue(c ! (reflect, a)))




