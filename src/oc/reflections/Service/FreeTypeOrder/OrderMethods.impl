/* %- Rcs-Info 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/FreeTypeOrder/OrderMethods.impl,v 1.1 1999-03-23 12:37:29 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:29 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:38  opaladm
  neu eingefuehrt

  Revision 1.1  1999/03/03 11:26:34  silver
  Initial revision


*/

IMPLEMENTATION OrderMethods

IMPORT	RelCmp			COMPLETELY
	Option			COMPLETELY
	Seq			COMPLETELY

	Virtual			COMPLETELY
	VirtualBind		COMPLETELY

	Nat			ONLY	nat < > = 
	Int			ONLY	int < > = 
	Denotation		ONLY	< = 
        Char			ONLY 	char < =
        String			ONLY 	string < =
	Bool			COMPLETELY
	Real			ONLY 	real < =
	SmallReal		ONLY 	sreal < =
	Subrel			COMPLETELY
	Void			ONLY	void nil

DEF special ==
  accessor ((\\ i : int. true) ::
	    (\\ n : nat. true) ::
	    (\\ c : char. true) ::
	    (\\ s : string. true) ::
	    (\\ b : bool. true) ::
	    (\\ r : real. true) ::
	    (\\ r : rel. true) ::
	    (\\ s : subrel. true) ::
	    (\\ v : void. true) ::
	    (\\ d : denotation. true) :: <>,
            (\\ _ . false))

DEF compare ==
  binAccessor ((compareNat :: 
		compareInt :: 
		compareDenotation ::
		compareChar ::
		compareString ::
		compareReal ::
		compareSreal ::
		compareBool ::
		compareSubrel ::
		compareVoid ::
		compareRel :: <>), 
		(\\ _ , _ . =))
 

FUN compareNat : nat ** nat -> rel
DEF compareNat (nat_1, nat_2) ==
  IF nat_1 < nat_2 THEN <
  IF nat_1 = nat_2 THEN =
  IF nat_1 > nat_2 THEN >
  FI


FUN compareInt : int ** int -> rel
DEF compareInt (int_1, int_2) ==
  IF int_1 < int_2 THEN <
  IF int_1 = int_2 THEN =
  IF int_1 > int_2 THEN >
  FI


FUN compareDenotation : denotation ** denotation -> rel
DEF compareDenotation (den_1, den_2) ==
  IF den_1 < den_2 THEN <
  IF den_1 = den_2 THEN =
                   ELSE >
  FI


FUN compareString : string ** string -> rel
DEF compareString (string_1, string_2) ==
  IF string_1 < string_2 THEN <
  IF string_1 = string_2 THEN =
                         ELSE >
  FI

FUN compareChar : char ** char -> rel
DEF compareChar (char_1, char_2) ==
  IF char_1 < char_2 THEN <
  IF char_1 = char_2 THEN =
                     ELSE >
  FI


FUN compareReal : real ** real -> rel
DEF compareReal (real_1, real_2) ==
  IF real_1 < real_2 THEN <
  IF real_1 = real_2 THEN =
                     ELSE >
  FI

FUN compareSreal : sreal ** sreal -> rel
DEF compareSreal (sreal_1, sreal_2) ==
  IF sreal_1 < sreal_2 THEN <
  IF sreal_1 = sreal_2 THEN =
                       ELSE >
  FI

FUN compareRel : rel ** rel -> rel
DEF compareRel (x, y) == 
  IF x <? THEN
    IF y <? THEN =
            ELSE <
    FI
  IF x =? THEN
    IF y <? THEN <
    IF y =? THEN =
            ELSE >
    FI
  IF x >? THEN
    IF y >? THEN =
            ELSE >
    FI
  FI

FUN compareSubrel : subrel ** subrel -> rel
DEF compareSubrel (x, y) == 
  IF x =? THEN
    IF y =? THEN =
            ELSE <
    FI
  IF x |=? THEN
    IF y =? THEN <
    IF y |=? THEN =
            ELSE >
    FI
  IF x <? THEN
    IF y <? THEN =
            ELSE >
    FI
  FI


FUN compareVoid : void ** void -> rel
DEF compareVoid ( _ , _ ) == =


FUN compareBool : bool ** bool -> rel
DEF compareBool (bool_1, bool_2) ==
  IF bool_1 < bool_2 THEN <
  IF bool_1 = bool_2 THEN =
                     ELSE >
  FI
