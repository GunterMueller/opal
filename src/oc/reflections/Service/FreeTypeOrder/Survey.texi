@ignore

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Service/FreeTypeOrder/Survey.texi,v 1.1 1999-03-23 12:37:30 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:37:30 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:51:38  opaladm
  neu eingefuehrt

  Revision 1.2  1998/11/03 14:16:46  silver
  Finalized first version of documentation.

  Revision 1.1  1998/06/24 13:27:48  silver
  Initial revision


@end ignore

This subsystem provides a generic ordering of free types. Assume that
you define a new type 
@example
TYPE wonder == colossus lightTower gardens zeusStatue 
               pyramids mausoleum temple
@end example
Naturally, you will often want to use your new (wonderful) type in data
structures like @code{seq[wonder]} or @code{pair[wonder, wonder]}, which 
is just fine.

The problems start, if you wish to use a set of wonders or if you wish
to define a mapping from wonders to other things. The polymorphic
implementation of a set forces you to provide a total ordering on the
data type you provide, as sets are often implemented using a tree
structure. 

In general, many polymorphic structures need to be provided either a
total ordering of the parameter data type or at least an equivalence
relation on it.

Although it is no problem to define a total ordering on a data type like 
wonders, it is often a bit awkward and in this case even immoral. The
idea behind the free type ordering system is to generate the desired
ordering automatically for you. To achieve this goal, two structures are 
provided: 
@table @code
@item Trichotomy
Defines a very simple data type, namely the type @code{trichotomy} which 
can have of three values: @code{less equal greater}. Such a type is
often useful inside algorithms. It had to get its own structure because
of Opals parametric typing rules (rats!).

@item FreeTypeOrder
Mainly, a function @code{compare[alpha]} is defined, which compares two
values of type @code{alpha} and returns a trichotomy. As a service,
functions @code{<} and @code{=} are also provide which use
@code{compare}. 
@end table

As explained in the introduction to the service system, this subsystem
only works for free types and most build-in types. For details, on what
a free type is, see this introduction.

Note, that using this system, you could define a new polymorphic
(dynamic) set structure which no longer needs the extra comparison
parameter. 




