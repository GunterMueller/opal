/* %- Rcs-Info 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/ReflectionBuild.sign,v 1.1 1999-10-08 19:25:58 kd Exp $
  $Author: kd $
  $Date: 1999-10-08 19:25:58 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.8  1998/12/19 17:41:13  silver
  Changed to new pragma style.

  Revision 1.7  1998/12/06 20:30:04  silver
  First version with compiler extentions.

  Revision 1.6  1998/10/09 14:51:28  silver
  Added documentation.

  Revision 1.5  1998/10/05 10:16:20  schintke
  Spell checking.

  Revision 1.4  1998/09/30 17:27:18  silver
  Worked in proposals from meeting on 30sep98.

  Revision 1.3  1998/06/04 17:29:59  silver
  Incorporated some proposals from meeting on 04jun98.

  Revision 1.2  1998/05/22 11:08:38  silver
  Till's proposal for namings implemented into code.

  Revision 1.1  1998/05/22 08:58:05  silver
  Initial revision

*/


SIGNATURE ReflectionBuild [alpha] 

/$ DYNAMIC [alpha] $/

-- $Author: kd $
-- $Date: 1999-10-08 19:25:58 $
-- $Revision: 1.1 $

SORT alpha

IMPORT Reflection ONLY value : SORT


-- %$Reflecting values$

/* %
Calling @code{reflect} for a value will produce a reflection of that
value. The type of the value must be a single sort. For example, you
can reflect a value of type @code{nat}. You can also reflect a value
of type @code{seq[nat]}. However, you can not reflect a value of type
@code{nat -> nat} which is a function type and no sort type. Likewise,
you cannot reflect a value of type @code{nat ** nat} using
@code{reflect}, as this, too, is no sort type but a product
type. Nevertheless, you can create reflections both of product types
and function types using @ref{@Sign{ReflectionFunction}}.

If you wish to reflect a value which has or contains a parametrized
type, you must declare the whole structure as dynamic (this is done by
adding the special pragma @code{/$ DYNAMIC $/} to the signature right
after the structure parameters). For example, if your structure has a
parameter @code{alpha} and somewhere you construct a list @code{l} of
@code{alpha}, then calling @code{reflect (l)} requires you to declare
the structure as dynamic.

Calling reflect without a parameter will produce a reflection of the
sort with which you instantiate the structure. For example,
@code{reflect[nat]} will produce a reflection of the type @code{nat}.
*/

FUN reflect     : alpha -> value


-- %$Instantiating reflections$

/* %
The type @code{reflection} is simply our way of describing the type
@code{exists alpha. alpha}. Now, given an object of type
@code{reflection} (and hence @code{exists alpha. alpha}) you might
wish to instantiate this object with the correct type stored behind
the quantor. This is done by calling @code{reflects?} for the
reflection. Note, that @code{reflects?} takes only one argument (the
reflection). The type "argument" is given by the sort @code{alpha}
with which you instantiated the structure @code{ReflectionBuild} (and
hence the type of the return value -- which is fortunately exactly
what we need). If the instantiation fails (because the type was not
correct) @code{fail} is returned.
*/
FUN reflects? : value -> bool
/* % An example usage is given by @ref{@Sign{PrettyPrint}}.
*/


FUN content : value -> alpha
