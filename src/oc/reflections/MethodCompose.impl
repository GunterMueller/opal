IMPLEMENTATION MethodCompose

IMPORT Method[general, result] COMPLETELY
       ReflectionBuild COMPLETELY


-- FUN :: : (method -> method) ** method -> method

DEF (method :: default) == method(default)


-- FUN :: : (general -> bool) ** (method -> general -> result) **
--           method -> method

DEF (covered?, handle) :: default ==
  method(overwrite(covered?, handle, default))


FUN overwrite : (general -> bool) ** (method -> general -> result) **
		 method -> method -> general -> result

DEF overwrite(covered?, handle, default)(method)(x) ==
  IF x covered? THEN
    handle(method)(x)
  ELSE fun(default)(method)(x)
  FI
