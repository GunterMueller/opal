/* %- Rcs-Info 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/oc/reflections/Reflection.impl,v 1.2 1999-10-09 16:43:38 kd Exp $
  $Author: kd $
  $Date: 1999-10-09 16:43:38 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.2 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/10/08 19:25:58  kd
  neue Fassung von Baltasar

  Revision 1.11  1999/02/23 14:45:33  schintke
  Implementation of codeReflection
  changed product from typeReflection
  now flattened

  Revision 1.10  1999/02/22 13:50:10  schintke
  changed internal used type from void to obj'RUNTIME

  Revision 1.9  1998/12/06 20:30:04  silver
  First version with compiler extentions.

  Revision 1.8  1998/10/09 15:54:25  silver
  Defined comparison and equality on typeReflections.

  Revision 1.7  1998/09/30 17:25:30  silver
  Worked in proposals from meeting on 30sep98.

  Revision 1.6  1998/06/16 12:13:33  trancon
  Tuple and apply implemented

  Revision 1.5  1998/06/13 20:18:18  silver
  Implementation of = function for sortReflection.

  Revision 1.4  1998/06/04 17:29:59  silver
  Incorporated some proposals from meeting on 04jun98.

  Revision 1.3  1998/05/27 13:55:36  silver
  Constructor for sortReflection now named freeType.

  Revision 1.2  1998/05/22 11:08:11  silver
  Implementation of some functions based on Till's proposal
  for naming.

  Revision 1.1  1998/05/22 08:57:54  silver
  Initial revision

*/

IMPLEMENTATION Reflection

IMPORT Seq            COMPLETELY
       Denotation     COMPLETELY


DATA name == name (identifier : denotation,
                   kind : kind,
                   struct : struct)

DEF name(Identifier1, Kind1, Struct1) = name(Identifier2, Kind2, Struct2) ==
  IF Identifier1 = Identifier2
    ANDIF Kind1 = Kind2
    ANDIF Struct1 = Struct2 THEN true
  ELSE false
  FI

DEF name(Identifier1, Kind1, Struct1) < name(Identifier2, Kind2, Struct2) ==
  IF Identifier1 < Identifier2 THEN true
  IF Identifier2 < Identifier1 THEN false
  OTHERWISE
  IF Kind1 < Kind2 THEN true
  IF Kind2 < Kind1 THEN false
  ELSE Struct1 < Struct2
  FI


DATA kind == sort
             value (type : type)

DEF sort = sort == true
DEF value(Type1) = value(Type2) == Type1 = Type2
DEF _ : kind = _ : kind == false


DEF sort < sort == false
DEF sort < value(_) == true
DEF value(Type1) < value(Type2) == Type1 < Type2
DEF value(_) < sort == false


DATA sort == sort (name : name)

DEF sort(Name1) = sort(Name2) == Name1 = Name2

DEF sort(Name1) < sort(Name2) == Name1 < Name2


DATA type == basic    (sort     : sort)
             product  (factors  : seq[type])
             function (domain   : type,
                       codomain : type)

DEF basic(Sort1) = basic(Sort2) ==
  Sort1 = Sort2
DEF product(Factors1) = product(Factors2) ==
  =(=)(Factors1, Factors2)
DEF function(Domain1, Codomain1) = function(Domain2, Codomain2) ==
  IF Domain1 = Domain2
    ANDIF Codomain1 = Codomain2 THEN true
  ELSE false
  FI
DEF _ : type = _ : type == false

DEF basic(Sort1) < basic(Sort2) == Sort1 < Sort2
DEF basic(_) < _ : type == false
DEF product(_) < basic(_) == false
DEF product(Factors1) < product(Factors2) == <(<)(Factors1, Factors2)
DEF product(_) < function(_, _) == true
DEF function(Domain1, Codomain1) < function(Domain2, Codomain2) ==
  IF Domain1 < Domain2 THEN true
  IF Domain2 < Domain1 THEN false
  ELSE Codomain1 < Codomain2
  FI
DEF function(_, _) < _ : type == false


DATA struct == struct (identifier : denotation,
                       instance   : seq[name])

DEF struct(Identifier1, Instance1) = struct(Identifier2, Instance2) ==
  IF Identifier1 = Identifier2
    ANDIF =(=)(Instance1, Instance2) THEN true
  ELSE false
  FI

DEF struct(Identifier1, Instance1) < struct(Identifier2, Instance2) ==
  IF Identifier1 < Identifier2 THEN true
  IF Identifier2 < Identifier1 THEN false
  ELSE <(<)(Instance1, Instance2)
  FI


/* %
@ignore
*/
-- not for user purpose -------------------------------------------

DATA value == pair(actual : obj,
                   type   : type)

/* %
@end ignore
*/
