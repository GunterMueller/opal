IMPLEMENTATION ReflectFunction

IMPORT CAST COMPLETELY
       Com COMPLETELY
       Nat COMPLETELY
       RUNTIMEENV[void, void] COMPLETELY
       Reflection COMPLETELY
       Seq COMPLETELY
       Void COMPLETELY


DATA function == function(hook : com[obj], dimension : nat)


DEF dimension(refl) ==
  IF refl basic?    THEN 1
  IF refl product?  THEN #(factors(refl))
  IF refl function? THEN dimension(codomain(refl))
  FI


DEF asObj(refl) ==
  IF type(refl) function? THEN
    EXEC(hook(cast(actual(refl))))
  ELSE 
    actual(refl)
  FI

DEF asValue(obj, type) ==
  IF type function? THEN 
    pair(cast(function(succeed(obj), 
		       dimension(type))), type)
  ELSE pair(obj, type)
  FI


DEF internalApply(f, x) ==
  LET fun == cast(f)
      (result, _) == apply(EXEC(hook(fun)), dimension(fun), x,
			   nil, default) 
  IN result




