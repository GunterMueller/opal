IMPLEMENTATION MethodEnvImplement

IMPORT MethodEnv[general, result, env] COMPLETELY
       ReflectionBuild COMPLETELY


-- FUN :: : (method -> env ** special -> result) ** method -> method

DEF (handle :: default) == method(overwrite(handle, default))


FUN overwrite : (method -> env ** special -> result) ** method ->
		 method -> env ** general -> result

DEF overwrite(handle, default)(method)(env, x) ==
  LET r == reflect(x)
      refl == IF r reflects?[value] THEN content(r)
	      ELSE r
	      FI
  IN
  IF refl reflects?[special] THEN handle(method)(env, content(refl))
  ELSE fun(default)(method)(env, x)
  FI
