/* % @b{Recursive Polymorphic Methods}
     A @code{method} is an abstract function object that incorporates
     a set of specialized functions that can then be applied
     uniformly to all of the function domains. */

SIGNATURE Method[general, result]

/$ DYNAMIC [general] $/

SORT general result


/* % A @code{method} encapsulates a function that realizes the topmost 
     branch of specialization. The function @code{fun} applied to the
     body of the whole method, to be invoked on recursion, will yield
     a function from @code{general} to @code{result}. */

TYPE method == method(fun : method -> general -> result)

/* % To give implementing specializations of a method access to the
     whole method body including specializations that were included
     @emph{on top}, each specialization must take an argument
     containing the whole invocation-time method body. The function
     @code{recursion} sets up the recursion environment. The
     expression @code{recursion(m)} is equivalent to @code{fun(m)(m)}.
     */

FUN recursion : method -> general -> result
