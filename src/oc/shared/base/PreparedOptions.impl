
IMPLEMENTATION PreparedOptions
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:36 $ ($Revision: 1.1.1.1 $)

IMPORT	Nat	 COMPLETELY
	Denotation ONLY ++ 
	NatConv	 ONLY `
	Control	 ONLY for
	NatMap	 ONLY natMap {} def !
	Set[nat,<] ONLY set {} incl in
	PrintableChar COMPLETELY

IMPORT  Options  ONLY options optimKind? debugKind? optFile cop? busy? 
		      myStruct 



DATA popts == @(options       	: options,
		switches	: set,
		weights		: natMap[nat]
	       )

FUN exportOptim weakError unfold liftConst liftMFE distribCase
    distribCaseAlways completeCase completeCaseAlways 
    positions defPositions reuseOpt aliasOpt foreignInterface
    foreignTemplate tailModCons selOpt 
    shareConst shareExternConst 
    checkDiffExport mergeMatchOpt : nat

FUN unfoldComplexity exportComplexity subFrees : nat

DEF exportOptim == 0
DEF weakError == 1
DEF unfold == 2
DEF liftConst == 3
DEF liftMFE == 4
DEF distribCase == 5
DEF distribCaseAlways == 6
DEF completeCase == 7
DEF completeCaseAlways == 8
DEF positions == 9
DEF defPositions == 10
DEF reuseOpt == 11
DEF aliasOpt == 12
DEF foreignInterface == 13
DEF foreignTemplate == 14
DEF tailModCons == 15
DEF selOpt == 16
DEF shareConst == 17
DEF shareExternConst == 18
DEF checkDiffExport == 19
DEF mergeMatchOpt == 20

DEF unfoldComplexity == 0
DEF exportComplexity == 1
DEF subFrees == 2


DEF prepareOptions(o) ==
    LET -- ke 	== optimKind?(e,o)
	ku 	== optimKind?(u,o)
	kc  	== optimKind?(c,o)
	km    	== optimKind?(m,o)
	kp 	== optimKind?(p,o)
	kg	== optimKind?(g,o)
	ks	== optimKind?(s,o)
	kT	== optimKind?(T,o)
	kS	== optimKind?(S,o)

	dd	== debugKind?(d,o)


	-- optimization
	ExportOptim == optFlag?("ExportOpt",o,kg)
	CheckDiffExport   == optFlag?("CheckDiffExport",o,true)
	WeakError   == optFlag?("WeakError",o,kp)
	Unfold	    == optFlag?("Unfold",o,ku)
	UnfoldComp  == optVal("UnfoldComp",o,
			   IF ku and kS THEN 4
			   OTHERWISE IF ku THEN 2 ELSE 0 FI)
	ExportComp  == optVal("ExportComp",o,
			   IF kg THEN 
				IF kS THEN 2 ELSE 1 FI
			   ELSE 0 FI
			)
	LiftConst   == optFlag?("LiftConst",o,kc)
	ShareConst  == optFlag?("ShareConst",o,kc)
	ShareExternConst  == optFlag?("ShareExternConst",o,kc and kT)
	LiftMFE	    == optFlag?("LiftMFE",o,false)
	DistribCase == optFlag?("DistribCase",o,ks)
	DistribCaseAlways == optFlag?("DistribCaseAlways",o,false)
	CompleteCase == optFlag?("CompleteCase",o,ks)
	CompleteCaseAlways == optFlag?("CompleteCaseAlways",o,false)

	-- translation
	Positions    == transFlag?("Positions",o,dd)
	DefPositions == transFlag?("DefPositions",o,Positions)
	Reuse	     == transFlag?("Reusage",o,km)
	Alias	     == transFlag?("Alias",o,km)
	Sel	     == transFlag?("LazySel",o,false)
	Merge	     == transFlag?("MergeMatch",o,ks)

	-- generation
	SubFrees     == genVal("SubFrees",o,
			    IF km and kS THEN 3
			    OTHERWISE IF km THEN 1 ELSE 0 FI)
	ForeignTemplate == genFlag?("ForeignTemplate",o,false)
	ForeignInterface == genFlag?("ForeignInterface",o,ForeignTemplate)
	TailModCons == genFlag?("TailModCons",o,ks)
       IN
       @(o,
	 incl?(exportOptim,ExportOptim,
	 incl?(checkDiffExport,CheckDiffExport,
	 incl?(weakError,WeakError,
	 incl?(unfold,Unfold,
	 incl?(liftConst,LiftConst,
	 incl?(shareConst,ShareConst,
	 incl?(shareExternConst,ShareExternConst,
	 incl?(liftMFE,LiftMFE,
	 incl?(distribCase,DistribCase,
	 incl?(distribCaseAlways,DistribCaseAlways,
	 incl?(completeCase,CompleteCase,
	 incl?(completeCaseAlways,CompleteCaseAlways,
	 incl?(positions,Positions,
	 incl?(defPositions,DefPositions,
	 incl?(reuseOpt,Reuse,
	 incl?(aliasOpt,Alias,
	 incl?(mergeMatchOpt,Merge,
	 incl?(selOpt,Sel,
	 incl?(foreignTemplate,ForeignTemplate,
	 incl?(foreignInterface,ForeignInterface,
	 incl?(tailModCons,TailModCons,	{} : set))))))))))))))))))))),
	 def(unfoldComplexity,UnfoldComp,
	 def(exportComplexity,ExportComp,
	 def(subFrees,SubFrees, {} : natMap[nat]))))

  FUN incl? : nat ** bool ** set -> set
  DEF incl?(n,yes?,s) == IF yes? THEN incl(n,s) ELSE s FI

DEF importOptim?(o,basename) ==
    IF optimKind?(g,options(o)) THEN
	~(busy?(basename,options(o)))
    ELSE
	false
    FI
      
DEF exportOptim?(o) == exportOptim in switches(o)
DEF checkDiffExport?(o) == checkDiffExport in switches(o)
DEF weakError?(o) == weakError in switches(o)
DEF unfold?(o) == unfold in switches(o)
DEF liftConst?(o) == liftConst in switches(o)
DEF shareConst?(o) == shareConst in switches(o)
DEF shareExternConst?(o) == shareExternConst in switches(o)
DEF liftMFE?(o) == liftMFE in switches(o)
DEF distribCase?(o) == distribCase in switches(o)
DEF distribCaseAlways?(o) == distribCaseAlways in switches(o)
DEF completeCase?(o) == completeCase in switches(o)
DEF completeCaseAlways?(o) == completeCaseAlways in switches(o)
DEF maxUnfoldComplexity(o) == weights(o)!unfoldComplexity
DEF maxExportComplexity(o) == weights(o)!exportComplexity

DEF positions?(o) == positions in switches(o)
DEF defPositions?(o) == defPositions in switches(o)
DEF reuseOpt?(o) == reuseOpt in switches(o)
DEF aliasOpt?(o) == aliasOpt in switches(o)
DEF mergeMatchOpt?(o) == mergeMatchOpt in switches(o)
DEF selOpt?(o) == selOpt in switches(o)

DEF foreignTemplate?(o) == foreignTemplate in switches(o)
DEF foreignInterface?(o) == foreignInterface in switches(o)
DEF tailModCons?(o) == tailModCons in switches(o)
DEF maxSubFrees(o) == weights(o)!subFrees
DEF traceExpEntries?(o) == debugKind?(t,options(o))
DEF traceAllEntries?(o) == debugKind?(T,options(o))


FUN optFlag? : denotation ** options ** bool -> bool
DEF optFlag?(d,o,default) ==
    IF cop?(("o")++(d),o)   THEN true
    IF cop?(("oNo")++(d),o) THEN false
			      ELSE default FI



FUN transFlag? : denotation ** options ** bool -> bool
DEF transFlag?(d,o,default) ==
    IF cop?(("t")++(d),o)   THEN true
    IF cop?(("tNo")++(d),o) THEN false
			      ELSE default FI

FUN genFlag? : denotation ** options ** bool -> bool
DEF genFlag?(d,o,default) ==
    IF cop?(("g")++(d),o)   THEN true
    IF cop?(("gNo")++(d),o) THEN false
			      ELSE default FI

FUN optVal : denotation ** options ** nat -> nat
DEF optVal(d,o,default) ==
    val(("o")++(d),o,default)
/*
FUN transVal : denotation ** options ** nat -> nat
DEF transVal(d,o,default) ==
    val(("t")++(d),o,default)
*/
FUN genVal : denotation ** options ** nat -> nat
DEF genVal(d,o,default) ==
    val(("g")++(d),o,default)

FUN val : denotation ** options ** nat -> nat
DEF val(prefix,o,default) ==
    for(0,16,check(prefix,o))(default)

    FUN check : denotation ** options -> nat ** nat -> nat
    DEF check(prefix,o)(i,c) ==
	IF cop?(prefix ++ (i`),o) THEN i ELSE c FI
	

