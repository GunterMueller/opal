IMPLEMENTATION PragmaAnFun
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:36 $ ($Revision: 1.1.1.1 $)

-- subject: miscelleanous functions related to pragma annotations
-- author:  wg 

IMPORT	Ide		COMPLETELY
	PragmaAn	COMPLETELY
	TypeAn		ONLY type:SORT
	TypeAnFun	ONLY format:type->format
	Format		COMPLETELY
	FormatFun1	COMPLETELY
	
IMPORT	Nat		ONLY nat 0 1
	NatConv		ONLY `
	Seq		COMPLETELY



-- ---------------------------------------------------------------------------

DEF format(a) ==
    IF pragmas?(a) THEN
	list(str(""),nl,str(""),format)(pragmas(a))
    ELSE
	str("no pragmas")
    FI

DEF format(pragma(Items)) ==
    list(str("/$ "),str(" "),str(" $/"),format)(Items)

FUN format : pragmaItem -> format
DEF format(lexem(_,Val)) == str(Val)
DEF format(names(_,Nms)) == list(str("["),str(","),str("]"),format)(Nms)

FUN format : pragmaName -> format
DEF format(type(_,Type)) == 
    format(Type)
DEF format(val(_,Type,Id,Inst)) == 
    blk(0,%(format(Id),str(":"),brk(1),format(Type),
	    IF Inst <>? THEN str("")
			ELSE list(str("["),str(","),str("]"),format)(Inst)
			FI
	    ))
DEF format(param(_,Type,No)) ==
    blk(0,%(str("&"),str(No`),str(":"),brk(1),format(Type)))

-- ---------------------------------------------------------------------------

/*

DEF parse(Slot?,Check,(Lex AS lexem(Pos,Val)) :: Items) ==
    LET Mk == 
	    IF Slot?(Lex) THEN
		\\Term.   LET Err == Check(Term)
			  IN IF ok?(Err) THEN (Err,avail(Term))
					 ELSE (Err,nil) FI
	    ELSE \\ _ . (ok,nil) FI
    IN
    LET (Err,Slot,RestItems) == parseSlot(Mk,Lex,Items) 
        (RestErr,RestSlots)  == parse(Slot?,CC,RestItems)
    IN
    IF avail?(Slot) THEN
        (Err+RestErr,cont(Slot)::RestSlots)
    ELSE
        (Err+RestErr,RestSlots)
    FI

DEF parse(Slot?,Check,Item :: Items) ==
    LET (Err,Rest) == parse(Slot?,Check,Items)
    IN
    (err(error,"Symbol expected")+Err,Rest)

DEF parse(Slot?,Check,<>) ==
    (ok,<>)


FUN parseSlot : (term -> err ** option[term]) **
	   seq[pragmaItem] -> err ** option[pragmaTerm] ** seq[pragmaItem]

DEF parseSlot(Mk,lexem(Pos,Val)::(Items AS lexem(Pos1,Val1)::Items1)) ==
    IF Val1 == "(" THEN
	LET (Err,Args,Rest) == parseArgs(Mk,Items1)
	IN
	IF ok?(Err) THEN
	    (ok,Mk(predicate(Pos1,Val,Args)),Rest)
	ELSE (Err,nil,Rest) FI
    ELSE (Mk(atom(Pos,Val)),Items) FI

DEF parseSlot(Mk,lexem(Pos,Val)::Items) ==
    (Mk(atom(Pos,Val)),Items)

DEF parseSlot(Mk,<>) ==
    (err(warning,"unexpected end of pragma term"),nil,<>)


FUN parseArgs : (term -> err ** option[term]) **
	   seq[pragmaItem] -> err ** seq[pragmaTerm] ** seq[pragmaItem]

DEF parseArgs(Mk,Items) ==
    LET (Err,Arg,Rest) == parseSlot(Mk,Items)
    IN
    IF ::?(Rest) ANDIF lexem?(ft(Rest)) THEN
	IF value(ft(Rest)) = ","  THEN
	    LET (RestErr,RestArgs,RestItems) == parseArgs(Mk,rt(Rest))
	    IN
	    IF avail?(Arg) THEN
	        (Err + RestErr,cont(Arg)::RestArgs,RestItems)
	    ELSE (Err +  RestErr,RestArgs,RestItems) FI
	IF value(ft(Rest)) = ")" THEN
	    IF avail?(Arg) THEN
		(Err,%(cont(Arg)),rt(Rest))
	    ELSE (Err,<>,rt(Rest)) FI
	ELSE (Err + err(warning,"expected one of `,' or `)'",
			pos(ft(Rest))),<>,Rest)
    IF ::?(Rest)
DEF parseSlot(Mk,lexem(Pos,Val)::(Items AS lexem(Pos1,Val1)::Items1)) ==
    IF Val1 == "(" THEN
DEF pars

*/

