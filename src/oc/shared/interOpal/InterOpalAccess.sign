/* %Basic functions for accessing interOpal. */
SIGNATURE InterOpalAccess
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-22 12:33:04 $ ($Revision: 1.1 $)

IMPORT	InterOpal	ONLY interOpal:SORT object:SORT origin:SORT pos:SORT
				struct:SORT name:SORT fct:SORT
				variant:SORT property:SORT
	Nat		ONLY nat

	Seq[denotation]	ONLY seq
	Seq[name]	ONLY seq
	Seq[object]	ONLY seq
	Seq[struct]	ONLY seq
    Seq[property] ONLY seq

-- %$Tests$

/* %test the kind of a name */ 
FUN sort? fct?: interOpal ** name -> bool

/* %test the origin of a name */
FUN internal? external? local? global?: name -> bool

/* %is the name or the object a formal parameter? */
FUN param? : interOpal ** name -> bool
FUN param? : struct ** object -> bool

/* %is the main structure parameterized? */
FUN param? : interOpal -> bool

/* %is the structure parameterized? */
FUN param? : struct -> bool

/* %is the object a free type? (hence a sort) */
FUN freeType? : struct ** object -> bool

/* %is the object a constructor? (hence a function) */
FUN constructor? : struct ** object -> bool

-- %$Access Shortcuts$

/* %all structures as a sequence */
FUN structs : interOpal -> seq[struct]

/* %the main structure */
FUN mainStruct : interOpal -> struct

/* %all imported structures */
FUN transStructs : interOpal -> seq[struct]

/* %structure of (non-local) origin/name */
FUN struct : interOpal ** origin -> struct
FUN struct : interOpal ** name -> struct

/* %objects of a structure */
FUN objects : struct -> seq[object]

/* %objects of the main structure */
FUN objects : interOpal -> seq[object]  -- main

/* %object of a (non-local) name */
FUN object : interOpal ** name -> object

/* %laws of a structure (no free types) */
FUN laws: struct -> seq[property] 

/* %laws of the main structure (no free types) */
FUN laws: interOpal -> seq[property] 

/* %all free types of a structure */
FUN freeTypes : struct -> seq[property]

/* %the free type property of a free type! (see freetype?) */
FUN freeType : struct ** object -> property

/* %the variant of a constructor! (see constructor?) */
FUN variant : struct ** object -> variant

/* %generic (as is) functionality (for functions only) */
FUN fct: interOpal ** name -> fct

/* %instance (actual parameters) of a name */
FUN origInst: interOpal ** name -> seq[name]

/* %instantiated functionality (for functions only)
(formal parameters will be replaced according to actual ones) */
FUN instFct: interOpal ** name -> fct

/* %latest or most accurate position of an object */ 
FUN bestPos: object -> pos

-- %$Accessing formal parameters$

/* %formal parameters of a structure (as names) */ 
FUN formParams: struct -> seq[name]

/* %formal parameters of the main structure */ 
FUN formParams: interOpal -> seq[name] 

/* %formal type and function parameters of a structure */ 
FUN typeOpParams: struct -> seq[name] ** seq[name]

/* %formal type and function parameters of the main structure */ 
FUN typeOpParams: interOpal -> seq[name] ** seq[name]

/* %logical position of a formal parameter [1, ...] */
FUN paramNo : interOpal ** name -> nat

-- %$Symbols$

/* %symbol of the main structure */
FUN symbol : interOpal -> denotation

/* %symbol of a (global) name */ 
FUN symbol: interOpal ** name -> denotation

/* %symbolic name with origin and (instantiated) functionality 
	(for functions only). */
FUN printFct: interOpal ** name -> denotation

-- %$Equalities$
FUN = : origin ** origin -> bool
FUN = : name ** name -> bool

