/*
-- ============================================================================
-- Autor:       af
-- Projekt:     OPAL1-Compiler
-- ============================================================================
*/
IMPLEMENTATION OcStream
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Nat             ONLY nat
        Void            COMPLETELY
        Char            ONLY char 
        Denotation      COMPLETELY
        String          COMPLETELY
        Option          COMPLETELY
        Com             COMPLETELY
        Stream          COMPLETELY
        ComCompose      COMPLETELY

IMPORT  OcExit          ONLY ioError
        OcOptions         ONLY options cop?

-- ---------------------------------------------------------------------------

FUN traceWriting: options**denotation -> com[void]

DEF traceWriting(options,fn) ==
  IF cop?("traceIO",options) THEN writeLine(stdOut,"writing "++fn)
  ELSE yield(okay(nil))
  FI

FUN create: options**denotation -> com[output]

DEF create(options,fn) ==
  traceWriting(options,fn) ;
  (\\ _ .create(fn) ;
         (\\a.IF a okay? THEN yield(a)
              IF a fail? THEN writeErr(fn,error(a))
              FI))

FUN append: options**denotation -> com[output]

DEF append(options,fn) ==
  traceWriting(options,fn) ;
  (\\ _ .append(fn) ;
         (\\a.IF a okay? THEN yield(a)
              IF a fail? THEN writeErr(fn,error(a))
              FI))


FUN close:  options**output -> com[void]

DEF close(_,output:output) ==
  close(output) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

FUN write: options**output ** char -> com[void]

DEF write(_,output,c:char) ==
  write(output,c) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

FUN write: options**output ** denotation -> com[void]

DEF write(_,output,s:denotation) ==
  write(output,s) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

FUN write: options**output ** string -> com[void]

DEF write(_,output,s:string) ==
  write(output,s) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

FUN writeLine: options**output ** denotation -> com[void]

DEF writeLine(_,output,s:denotation) ==
  (writeLine(output,s)) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

FUN writeLine: options**output ** string -> com[void]

DEF writeLine(_,output,s:string) ==
  (writeLine(output,s)) ;
  (\\a.IF a okay? THEN yield(a)
       IF a fail? THEN writeErr(error(a))
       FI)

-- ---------------------------------------------------------------------------

FUN writeErr : denotation -> com[void]

DEF writeErr(msg) ==
  writeLine(stdErr,"I/O write error: " ++ msg) ;
  yield(fail(ioError))

FUN writeErr : denotation ** denotation -> com[output]

DEF writeErr(fn, msg) ==
  writeLine(stdErr,"I/O write-open error: " ++ fn ++ " : " ++ msg) ;
  yield(fail(ioError))


