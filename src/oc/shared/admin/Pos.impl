/* %-
LAST EDIT: Tue May 18 18:31:12 1993 by OPAL compiler (athene!opal) 
============================================================================
Autor:	mija (urspruenglich von Johannes Labisch)
Projekt:	OPAL1-Compiler
Anmerkung:	Zur Effizienzsteigerung koennten die Zeile und Spalte zu einem
	nat zusammengefasst werden.
============================================================================
*/

IMPLEMENTATION Pos
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:35 $ ($Revision: 1.1.1.1 $)

IMPORT	Nat		ONLY	0   1 succ >  <	>=  <=	=   |=	+   -	% 8
	NatConv		ONLY	`
	Char		ONLY	tab	newline   = 
	Denotation	ONLY	++ 
	


DATA pos	== pos(lin:nat,col:nat)

-- %$Konstruktionsfunktionen$

DEF firstPos == pos(1,1)

DEF nextPos(pos(lin,col),c) ==
    IF c = tab THEN pos(lin,col+(tabWidth-(col % tabWidth)))
    IF c = newline THEN pos(succ(lin),1)
    ELSE pos(lin,succ(col))
    FI

DEF nextLine(pos(lin,_)) == pos(succ(lin),1)

FUN tabWidth : nat
DEF tabWidth == 8

DEF mkPos == pos


-- %$Relationen$

DEF pos(l1,c1) > pos(l2,c2) ==
    IF l1 > l2 THEN true
    OTHERWISE
    IF l1 < l2 THEN false
    ELSE c1 > c2
    FI

DEF p1 < p2 == p2 > p1
DEF p1 >= p2 == ~(p2>p1)
DEF p1 <= p2 == ~(p1>p2)
DEF pos(l1,c1) = pos(l2,c2) == (l1 = l2) and (c1 = c2)

DEF p1 |= p2 == ~ (p1 = p2)


-- %$sonstige Funktionen$

DEF  pos(l,c)` == "<" ++ (l`) ++ "," ++ (c`) ++ ">"
