IMPLEMENTATION Error
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-03-09 11:59:41 $ ($Revision: 1.2 $)

IMPORT  Seq                     COMPLETELY
        SeqConv                 ONLY `
        SeqFilter               COMPLETELY
        SeqSort                 ONLY merge
        String                  COMPLETELY
        StringConv              ONLY `
        Char                    ONLY    char 
        BTUnion                 ONLY    union string denotation
        StringFormat            ONLY    format 
        Pos                     ONLY    <= `
        Nat                     COMPLETELY
        Com                     COMPLETELY
        ComCompose              COMPLETELY
        Compose                 COMPLETELY
        ComSeqReduce            COMPLETELY
        OcStream                ONLY    stdErr writeLine output
        Void                    COMPLETELY
        Options                 COMPLETELY

IMPORT  ComState                COMPLETELY
       Denotation ONLY ++ % =
       ProcessArgs ONLY env
       NatConv ONLY asChar


DATA err == err(diags: seq[diag], errCnt: nat, warnCnt: nat, hintCnt: nat)

DATA diag == diag(kind: errKind, pos: pos, msg: string)

DATA errKind == error warning hint

-- Testfunktionen

DEF e ok?      == errCnt(e) 0?
DEF e warning? == warnCnt(e) 0?
DEF e hint?    == hintCnt(e) 0?


-- Konstruktionsfunktionen

DEF ok == err(<>,0,0,0)
DEF err(error,msg,pos)   == err(%(diag(error,pos,msg!)),1,0,0)
DEF err(warning,msg,pos)   == err(%(diag(warning,pos,msg!)),0,1,0)
DEF err(hint,msg,pos)   == err(%(diag(hint,pos,msg!)),0,0,1)

DEF err(kind,msg,i:string,pos) == err(kind,format(msg,%(string(i)))`,pos)
DEF err(kind,msg,i:string,j:string,pos) 
        == err(kind,format(msg,%(string(i),string(j)))`,pos)

DEF err(kind,msg,i:denotation,pos) == 
        err(kind,format(msg,%(denotation(i)))`,pos)
DEF err(kind,msg,i:denotation,j:denotation,pos) 
        == err(kind,format(msg,%(denotation(i),denotation(j)))`,pos)

DEF err(ds1,ec1,wc1,hc1) + err(ds2,ec2,wc2,hc2) ==
   err(merge(\\d1,d2. pos(d1) <= pos(d2))(ds1,ds2),
       ec1+ec2,wc1+wc2,hc1+hc2)

-- sonstige Funktionen

FUN errors : options ** err -> com[bool]
DEF errors(options,Err AS err(ds,ec,wc,hc)) ==
    LET W == warnLevel(options)
        H? == hc > 0 
        Intern? == cop?("internDiag", options)
        VisibleDiags == IF W = 0 THEN
                            IF Intern? THEN <> ELSE (error? o kind) | ds FI
                        IF W = 1 ANDIF H? THEN (~ o (hint? o kind)) | ds
                        ELSE ds FI
    IN
    ((writeDiag(useColours)(options, stdErr), nil) /& VisibleDiags) & (\\ _ .
    IF Intern? THEN
        addInternDiag(Err)              & (\\ _ .
        (writeDiag(false)(options,file(options)), nil) /& ds  & (\\ _ .
        yield(okay(ec 0?))
        ))
    ELSE        
        (writeDiag(false)(options,file(options)), nil) /& ds  & (\\ _ .
        yield(okay(ec 0?))
        )
    FI
    )

FUN writeDiag : bool -> options ** output -> diag ** void -> com[void]

DEF writeDiag(col?)(opts, Out)(D, _) ==
    writeLine(opts, Out, asString(col?)(D))

FUN asString : bool ** errKind -> string
DEF asString(col?, error) ==
  ((IF col? THEN red ELSE "" FI) ++ "ERROR: ") !
DEF asString(col?, warning) ==
  ((IF col? THEN magenta ELSE "" FI) ++ "WARNING: ") !
DEF asString(col?, hint) ==
  ((IF col? THEN blue ELSE "" FI) ++ "HINT: ") !

FUN asString : bool -> diag -> string
DEF asString(col?)(diag(tag,pos,msg)) ==
  !(`(pos)) ++ asString(col?, tag) ++ msg ++ (IF col? THEN !(black) ELSE <> FI)

FUN asString : err -> string
DEF asString(Err) == `("","\n","\n")(asString(false))(diags(Err))

/* %Farbe gibt's nur, wenn die Environment-Variable @code{OPAL_COLOR}
    auf @code{yes} gesetzt wird. Beachte, daß Emacs nicht mit den
    Escape-Sequenzen zurechtkommt, aber Sub-Prozessen keine Möglichkeit gibt,
    festzustellen, daß sie tatsächlich im Emacs laufen!! :-( (kd)
*/
FUN useColours: bool
DEF useColours ==
  EXEC(env("OPAL_COLOR"); (\\r. IF okay?(r) THEN
                                  IF data(r) = "no" THEN succeed(false)
                                  IF data(r) = "yes" THEN succeed(true)
                                  ELSE succeed(false)
                                  FI
                                ELSE
                                  succeed(false)
                                FI))

FUN red magenta blue black: denotation
DEF red == IF useColours THEN esc("[31m") ELSE "" FI
DEF magenta == IF useColours THEN esc("[35m") ELSE "" FI
DEF blue == IF useColours THEN esc("[34m") ELSE "" FI
DEF black == IF useColours THEN esc("[0m") ELSE "" FI

FUN esc: denotation -> denotation
DEF esc(d) == %(asChar(27)) ++ d

-- intern diagnostics

FUN internDiags : stateId[err]

DEF internDiags == EXEC(stateId(ok))

FUN addInternDiag : err -> com[void]
DEF addInternDiag(Err) ==
    internDiags => (\\ Old. Old + Err)

DEF getAndClearInternDiag ==
    ?(internDiags)              & (\\ Err .
    internDiags => (\\ _ . ok)  & (\\ _ .
    succeed(diags(Err))
    ))
