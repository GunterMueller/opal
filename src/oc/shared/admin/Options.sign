/* %purpose:    analyze commandline options (see oc(1)), compute filenames
*/

SIGNATURE Options
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-11 15:06:45 $ ($Revision: 1.3 $)

IMPORT  
        Char                    ONLY    char
        Seq[denotation]         ONLY    seq
        Nat                     ONLY    nat
        Com[options]            ONLY    com
        Stream                  ONLY    output

SORT options

FUN analyzeOptions: com[options]
/* %the commandline is analyzed and transformed to options;
    @samp{-...} is an option,
    @samp{...} is a structname (s. b.)
*/

-- %analyze options from sequence of command arguments
FUN analyzeOptionsInline : seq[denotation]      -> com[options]

FUN myStruct    : options->denotation   -- structure name

-- %$general  options$
FUN verbLevel                           -- -v[level]
    warnLevel   : options->nat          -- -w[level]

-- %$compilation modes$
FUN 
    sign?                               -- -s
    impl?                               -- -i
    extp?                               -- -E only for property language variant
    intp?       : options->bool         -- -I only for property language variant

-- %$optimization kinds$
FUN optimKind?  : char ** options -> bool
                                        -- -o12eucmpgTS
                                        --   1,2 are aliases, which is
                                        --   actually expanded
    busy?       : denotation**options->bool     -- -b 

-- %$debugging kinds$
FUN debugKind?  : char ** options -> bool
                                        -- -otTd


-- %$z-options$
FUN cop?        : denotation**options->bool -- -z[text]


-- %$filenames$
-- %return my complete filename
FUN myFile                              -- sign or impl or extp or intp 
                                        -- OPAL file
    myDepFile                           -- sign or impl or extp or intp
                                        -- dep(endency) file
    myDiagFile                          -- sign or impl or extp or intp
                                        -- diag(nostic) file
    mySignExpFile                       -- export file of signature part
    myImplExpFile                       -- export file of implementation part
    myExtpExpFile                       -- export file of external property part
    myAbsyFile                          -- abstract syntax file
    myInterOpalFile                     -- interOpal file
    myOptFile                           -- opt(imized) file
    myCFile                             -- c file
    myHFile                             -- h file
    myHcCFileTmpl                       -- hand-coded c file template
    myHcHFileTmpl                       -- hand-coded h file template
        : options->denotation   

/* %filenames : give basename ret. complete filename (ignoring tmp-files); 
               fn is <>, if fn is not part of options  */
FUN optFile                             -- opt(imized) file
    expFile     
    extpExpFile : denotation**options->denotation       -- exp(ort) files

-- %file intended for diagnostic file (see @code{myDiagFile})
FUN file : options->output              -- get file
    file : options**output->options     -- set file
