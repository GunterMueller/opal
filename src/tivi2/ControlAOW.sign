/* %This structure establishes a controller for displayed entries; tailored
towards the AOW style of entries. Controllers can be told to perform certain
actions, and they in turn tell other clients what should be done.
*/
SIGNATURE ControlAOW[data:SORT]

-- %$Parameter$
SORT data

-- %$Imports$
IMPORT Void ONLY void
       Com[void] ONLY com
       Com[ctrl] ONLY com
       Com[outRequest] ONLY com
       Com[data] ONLY com
       Multiplexer[outRequest] ONLY muxOut
       Com[muxOut] ONLY com

-- %$Generate Control$

SORT ctrl

/* %Establish a new controller: @b{ctrl(get)}.
@table @b
@item get
How to get controlled data.
@end table
*/
FUN ctrl : (() -> com[data]) -> com[ctrl]

-- %additionally name for debug messages
FUN ctrl : denotation -> 
           (() -> com[data]) -> com[ctrl]
FUN name: ctrl -> denotation
-- %$Incoming Requests$

/* %Requests for action of controller:
@itemize
*/
TYPE inRequest == 
/* %@item
tell everyone to stop and then stop */
    quit 
/* %@item
ask outside for data */
    reget
/* %@item
display and distribute new data from master */
    newData(data: data)  
/* %@item
compute new data with function, then display and distribute to slaves*/
    updData(f: data -> data) 
/* %@item
display and distribute new data from slave */
    newDataS(data: data)  
/* %@item
compute new data with function, then display and distribute to master */
    updDataS(f: data -> data) 
/* %@item 
send current data */
    sendData
/* %@item 
popup slaves */
    show
/* %@item
popup master */
    showS
/* %@item
popup view */
    showView
/* %@end itemize */

FUN perform: ctrl ** inRequest -> com[void]

FUN ` : inRequest -> denotation

-- %$Outgoing Requests$

/* %Requests for action @emph{by} controller:
@itemize
*/
TYPE outRequest ==
/* %@item
stop working, controller will, too */
    quit
/* %@item
controlled data changed (from Master) */
    newData(data: data)
/* %@item
controlled data changed (from Slave) */
    newDataS(data: data)
/* %@item
controller lost data, send data */
    sendData
/* %@item
popup slaves */
    show
/* %@item
popup master */
    showS
/* %@item
popup view */
    showView
-- %@end itemize

FUN register: ctrl -> com[muxOut[outRequest]]

FUN ` : outRequest -> denotation
