IMPLEMENTATION StructEntry

IMPORT T2AEntry COMPLETELY
       T2MapEntryNE COMPLETELY
       Seq ONLY seq <> #
       InterOpal COMPLETELY
       Com ONLY com succeed
       ComCompose ONLY &
       OWmisc ONLY label 
       WinView ONLY view ^-^ label <|< @< frame
       IOSmallEntries COMPLETELY
       SeqParse ONLY preparse
       SeqConv ONLY ` string
       Option COMPLETELY
       ComAgent ONLY agent
       WinConfig ONLY config with ++ text union
       Nat ONLY nat 5 15 12 1 =  4 * 10 8
       Denotation ONLY ++ empty
       ControlAOW ONLY ctrl perform quit? quit reget inRequest outRequest
register 
       Multiplexer ONLY muxOut await emit
       WinWindow ONLY window wconfig titleName delete
       Void ONLY void nil
       WinEvent ONLY event eventInfo buttonInfo? point button modifier C -
                     button
       Pair ONLY 2nd pair 1st
       ObjectEntry COMPLETELY
       ConnectControl ONLY connect
       ControlAOW COMPLETELY
       Map ONLY map ! def def?
       IOordinatrice ONLY :=_objs :=_insts :=_onlys :=_props :=_pragmas
       BindMap ONLY bindMap
       DataWindow ONLY dataWindow
       BasicParse ONLY preparse real char int
       NameEntry ONLY seqNameEntry view set get seqNameWindow
       PropertyEntry ONLY propertyEntry get propertyWindow
       PragmaEntry ONLY seqPragmaEntry get seqPragmaWindow pragmaEntry pragmaItemEntry get set view pragmaWindow
       BindSeq ONLY bindSeq
       T2SeqEntryNE ONLY seqEntry set get view bind
       ComAction ONLY done
       NatConv ONLY `
       DEBUG ONLY PRINT
       WinButton ONLY button

DATA structEntry == 
        structEntry(view: view,
                    posEntry: aEntry[seq[pos], preparseSeqPos, printSeqPos],
                    originEntry: aEntry[origin, preparseO, printO],
                    symbolEntry: aEntry[denotation, preparseD, printD],
                    instsEntry: mapEntry[inst, <, seq[name], printI,
                                                            printSeqN],
                    onlysEntry: mapEntry[inst, <, seq[name], printI,
                                                            printSeqN],
                    objsEntry: mapEntry[ident, <, object, printId,
                                                            shortObj], 
                    propsEntry: mapEntry[ident, <, property, printId,
                                                            shortProp],
                    pragmasEntry: seqEntry[pragma, printPragma]
                   )

DEF structEntry(s) ==
    aEntry[seq[pos], preparseSeqPos, printSeqPos] & (\\posE.
    aEntry[origin, preparseO, printO] & (\\originE.
    aEntry[denotation, preparseD, printD] & (\\symbolE.
    mapEntry[inst, <, seq[name], 
                printI, printSeqN](insts(s), 15, 5) & (\\instsE.
    mapEntry[inst, <, seq[name], 
                printI, printSeqN](onlys(s), 15, 5) & (\\onlysE.
    mapEntry[ident, <, object, 
                printId, shortObj](objs(s), 15, 12) & (\\objsE.
    mapEntry[ident, <, property, 
                printId, shortProp](props(s), 15, 5) & (\\propsE.
    seqEntry(pragmas(s), 4 * 10, 8) & (\\ pragmaE.
    agent(posE set pos(s) & (\\ _ .
          originE set origin(s) & (\\ _ .
          symbolE set symbol(s)
          ))
         ) & (\\ _ .
    LET left == (label with text("struct")) ^-^
                label("pos:", view(posE)) ^-^
                label("origin:", view(originE)) ^-^
                label("symbol:", view(symbolE))
        middle == label("insts:", view(instsE)) ^-^
                  label("onlys:", view(onlysE))
        right == label("objs:", view(objsE)) ^-^
                 label("props:", view(propsE)) ^-^
                 label("pragmas:", view(pragmaE))
        v == (left ^-^ middle) <|< right
    IN
      succeed(structEntry(v, posE, originE, symbolE, instsE, onlysE, objsE,
propsE, pragmaE))
    )))))))))


DEF set(sE, s) ==
    posEntry(sE) set pos(s) & (\\ _ .
    originEntry(sE) set origin(s) & (\\ _ .
    symbolEntry(sE) set symbol(s) & (\\ _ .
    instsEntry(sE) set insts(s) & (\\ _ .
    onlysEntry(sE) set onlys(s) & (\\ _ .
    objsEntry(sE) set objs(s) & ( \\ _ .
    propsEntry(sE) set props(s) & (\\ _ .
    pragmasEntry(sE) set pragmas(s)
    )))))))

DEF get(sE) ==
    get(posEntry(sE)) & (\\po.
    get(originEntry(sE)) & (\\or.
    get(symbolEntry(sE)) & (\\sy.
    get(instsEntry(sE)) & (\\in.
    get(onlysEntry(sE)) & (\\on.
    get(objsEntry(sE)) & (\\ob.
    get(propsEntry(sE)) & (\\pr.
    get(pragmasEntry(sE)) & (\\pra.
    succeed(struct(po, or, sy, in, on, ob, pr, pra))
    ))))))))

    
-- %$Windows with struct$
DEF structWindow(STC, sE)(wname, str) ==
    dataWindow(STC, sE, view, get, set)(wname, str) & (\\ _ .
    LET bindObject == bindMap(STC)(objectEntry, get, objectWindow)
                                (objs, :=_objs)
        bindSN == bindMap(STC)(seqNameEntry, get, seqNameWindow)
        bindInst == bindSN(insts, :=_insts)
        bindOnly == bindSN(onlys, :=_onlys)
        bindProp == bindMap(STC)(propertyEntry, get, propertyWindow)
                                    (props, :=_props)
        bindPrag == bindSeq(STC)(pragmaEntry, get, pragmaWindow)
                           (pragmas, :=_pragmas, \\ _ . true)
    IN
        instsEntry(sE) bind (button(1), bindInst) & (\\ _ .
        onlysEntry(sE) bind (button(1), bindOnly) & (\\ _ .
        objsEntry(sE) bind (button(1), bindObject) & (\\ _ .
        propsEntry(sE) bind (button(1), bindProp) & (\\ _ .
        pragmasEntry(sE) bind (button(1), bindPrag)& (\\ _ .
        done
    )))))
    )
 


