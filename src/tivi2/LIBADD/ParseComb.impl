IMPLEMENTATION ParseComb

IMPORT Option COMPLETELY
       Denotation COMPLETELY
       Map[denotation, <, data] ONLY map !? dom
       Nat ONLY nat 0 - pred <= >
       AnonPair ONLY 1st
       Set ONLY set {}?
       SetFold ONLY /
       SetFilter ONLY |

DEF (p1 | p2)(d) == IF 1st(p1(d)) nil? THEN p2(d) ELSE p1(d) FI

DEF (pre <| p)(d) == IF pre <| d THEN p(drop(d, pre#))
                     ELSE (nil, d)
                     FI

DEF (p |> post)(d) == 
    LET (od, rest) == p(d)
    IN
      IF post <| rest THEN
        (od, rest drop (post#))
      ELSE
         (nil, d)
      FI

DEF (pre <? p)(d) == IF pre <| d THEN p(drop(d, pre#))
                     ELSE p(d)
                     FI

DEF (p ?> post)(d) == 
    LET (od, rest) == p(d)
    IN
      IF post <| rest THEN
        (od, rest drop (post#))
      ELSE
         (od, d)
      FI



DEF asPreparse(M)(d) == 
    LET cands == (\\kw. kw <| d) | dom(M) 
    IN
    IF cands {}? THEN (nil, d)
    ELSE
      LET cand == (\\c1, c2. IF #(c1) > #(c2) THEN c1 ELSE c2 FI) / cands
      IN (M !? cand, drop(d, cand#))
    FI
    

DEF asPreparse(den, dat)(d) == 
    IF den <| d THEN (avail(dat), d drop(den#)) ELSE (nil, d) FI

FUN drop: denotation ** nat -> denotation
DEF drop(d, 0) == d
DEF drop(d, n) == delete(d, 0, pred(n))
