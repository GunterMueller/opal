IMPLEMENTATION SeqParse

IMPORT Denotation ONLY empty? = slice # ++ delete
       String ONLY string ! <> split # ft |= = <>?
       Char ONLY char |=
       OptionMap ONLY *
       Option ONLY option nil avail cont nil? avail?
       Seq ONLY seq :: <> revert
       Nat ONLY nat 0 pred -  >= >
       StringFilter ONLY split
       StringConv ONLY `
       DEBUG ONLY PRINT
       ParseComb ONLY <|

DEF preparse(f) == preparse("<", ",", ">")(f)

DEF preparse(beg, sep, end)(f) == beg <| ipreparse(<>, sep, end, f)

/* %note that acc stores the elements reverted! */
FUN ipreparse: seq[data] ** denotation ** denotation **
               (denotation -> option[data] ** denotation) ->
               denotation -> option[seq[data]] ** denotation
DEF ipreparse(acc, sep, end, f)(d) ==
    LET (od, rest) == f(d)
    IN
    IF od nil? THEN -- no data -> check for end of sequence
        IF end <| d THEN -- end of sequence
            (avail(revert(acc)), drop(d, (end#)))
        ELSE -- something is wrong  
            (nil, d)
        FI
    IF od avail? THEN -- found data -> check for separator or end
        IF sep <| rest THEN
            ipreparse(cont(od) :: acc, sep, end, f)(drop(rest, sep#))
        OTHERWISE
        IF end <| rest THEN
            (avail(revert(cont(od) :: acc)), drop(rest, (end#)))
        ELSE
            (nil, d)
        FI
    FI

FUN drop: denotation ** nat -> denotation
DEF drop(d, 0) == d
DEF drop(d, n) == delete(d, 0, pred(n))
