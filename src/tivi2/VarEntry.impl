IMPLEMENTATION VarEntry

-- %$Imports$

IMPORT DataWindow ONLY dataWindow
       Com ONLY com succeed
       ComCompose ONLY &
       OWmisc ONLY label
       WinView ONLY view label ^-^
       ComAgent ONLY agent
       IOSmallEntries ONLY preparseN printN preparsePos printPos preparseComp printComp preparseD printD preparseId printId printFct dummyFct
       T2AEntry ONLY aEntry view set get
       T2AEntryNE ONLY aEntry view set get aEntryLong
       Nat ONLY nat 32 15 64 7
       InterOpal COMPLETELY
       Seq ONLY seq
       WinConfig ONLY point:SORT config with text string union
       Pair ONLY pair
       Option ONLY option

-- %$The data type$
DATA varEntry == 
    varEntry(view: view,
                 posEntry: aEntry[pos, preparsePos, printPos],
                 identEntry: aEntry[ident, preparseId, printId],
                 symbolEntry: aEntry[denotation, preparseD, printD],
                 fctEntry: aEntry[fct, printFct])

DEF varEntry(v) ==
    aEntry(32) & (\\posE.
    aEntry(32) & (\\identE.
    aEntry(32) & (\\symbolE.
    aEntryLong(dummyFct, 32) & (\\fctE.
    LET
      V == label with text("var") ^-^
           label("pos:", view(posE)) ^-^
           label("ident:", view(identE)) ^-^
           label("symbol:", view(symbolE)) ^-^
           label("fct:", view(fctE))
      vE == varEntry(V, posE, identE, symbolE, fctE)
    IN
      agent(vE set v) &
      succeed(vE)
    ))))

-- %$The basic functions$
DEF vE set var(p, c, t, cs) ==
    posEntry(vE) set p &
    identEntry(vE) set c &
    symbolEntry(vE) set t &
    fctEntry(vE) set cs

DEF get(vE) ==
    get(posEntry(vE)) & (\\ p.
    get(identEntry(vE)) & (\\ c.
    get(symbolEntry(vE)) & (\\ t.
    get(fctEntry(vE)) & (\\ cs.
    succeed(var(p, c, t, cs))
    ))))

DEF varWindow(vC, vE)(wname, v) ==
    dataWindow(vC, vE, view, get, set)(wname, v)
