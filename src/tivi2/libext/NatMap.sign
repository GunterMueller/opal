SIGNATURE NatMap [codom]

-- subject: Mappings from naturals to some codom
-- author:  wg
-- version: $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/tivi2/libext/NatMap.sign,v 1.1 1998-07-30 11:58:12 kd Exp $


SORT codom

IMPORT  Nat 		ONLY nat <
	Seq[nat]	ONLY seq
	Seq[codom]	ONLY seq
	Seq[pair]	ONLY seq
	Set[nat,<]	ONLY set
	Pair[nat,codom]	ONLY pair
	Option[codom]	ONLY option

SORT natMap

FUN {} 	 : natMap				-- empty natMap
FUN {}?  : natMap->bool				-- test for empty natMap

FUN def	 : nat**codom**natMap->natMap		-- (re)define natMap at point
    :=	 : natMap**nat**codom->natMap		-- redefine natMap at point 
    undef: nat**natMap->natMap			-- undefine natMap at point
    def? : nat**natMap->bool			-- test for definedness

FUN upd : natMap**nat**(codom->codom)->natMap 	-- redefine at point

FUN <+   : natMap**natMap->natMap		-- lifting of def to natMaps

FUN merge : (codom ** codom -> codom) 
		** natMap ** natMap -> natMap	-- merge two maps, 
						-- using funct. for overlapping
						-- entrys

FUN dom : natMap -> set[nat,<]
FUN extend : natMap**seq[nat]**seq[codom]->natMap
    -- pointwise lifting of def to sequences of nat & codom

FUN !    : natMap**nat->codom			-- application at point
    !?   : natMap**nat->option[codom]		-- combined test & application
    -- m!?d == IF def?(m,d) THEN avail(m!d) ELSE nil FI


FUN new  : natMap -> nat
    -- returns some reasonable (i.e. small) natural larger than
    -- all in domain 

FUN implode : seq[pair[nat,codom]] -> natMap
FUN explode : natMap -> seq[pair[nat,codom]]
