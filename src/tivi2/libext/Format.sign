/* % 
The structure @code{Format} provides a monad for
textual formatting of data structures.
See also @code{FormatDebug} (@ref{FormatDebug Overview}) for functions in 
the style of structure @code{DEBUG} working on @code{fmt} monads, and
@code{FormatSeq} for formatting sequences of data (@ref{FormatSeq Overview}).
*/


SIGNATURE Format
-- version 1.1 Thu Nov  2 16:14:09 1995

IMPORT	Nat		ONLY nat
	String		ONLY string
	Seq[string]	ONLY seq


/* %
The sort of the formatting monad is opaque: 
*/

SORT fmt

/* %
The monad composition and neutral element are given below:
*/

FUN ;    : fmt ** fmt -> fmt
FUN none : fmt

/* % 
Literals are added to the format with the following functions:
*/

FUN lit : denotation		-> fmt 
FUN lit : string		-> fmt 

/* % 
@sp 1
The begin and end of a "glued" sequence of literals is indicated with
the following functions. Glued elements are broken as a block. Nested
glueing is possible: as deeper the nesting, as stronger the
glueing. The parameter to @code{beg} indicates how far the gluing
is indended if a break is necessary.
*/

FUN beg	: nat 			-> fmt
FUN end	: 			   fmt

FUN block : nat ** fmt   	-> fmt

/* %
The function @code{spc} adds a number of spaces, but only if not at the 
beginning or end of a line. The function @code{brk} forces a line break:
*/

FUN spc : nat			-> fmt
FUN brk : 			   fmt



/* %
@sp 2
The formatting driver is defined by the function @code{pretty}. 
The output is generated inbetween the left and right margins, the
result is a sequence of lines.
*/

FUN pretty: nat ** nat ** fmt -> seq[string] 

/* % 
@sp 1
For convenience, the following specialization of @code{pretty}
is supported, which sets inbetween columns 1 to 70 and concatenates
the resulting sequence of lines to a single string.
*/

FUN pretty: fmt -> string

