/* %
The structure @code{FormatSeq} provides functionals for
formattings sequences based on the textual formatting monad
(@ref{Format Overview}).
*/

SIGNATURE FormatSeq[data]
-- version 1.1 Wed Oct 18 22:24:08 1995

SORT data


IMPORT	Seq[data]	ONLY seq
	Format		ONLY fmt

/* %
The expression @code{list(Formatter, Open, Sep, Close, Seq)} produces
a formatter which lists the members of @code{Seq} using @code{Formatter},
separating them by @code{Sep} and enclosing them by @code{Open} and 
@code{Close}. 
*/

FUN list : (data -> fmt) ** fmt ** fmt ** fmt ** seq[data] -> fmt

/* %
@code{list?} is a version of @code{list} which produces
@code{none} if the sequence is empty.  @code{list(Formatter, Sep, List)} is
a version which sets the enclosers to @code{none}. 
*/

FUN list? : (data -> fmt) ** fmt ** fmt ** fmt ** seq[data] -> fmt
FUN list  : (data -> fmt) ** fmt ** seq[data] -> fmt


/* % This is needed by generated code from @sc{ordinatrice verte} and identical
to @code{list(f, lit("<"),lit(",");spc(1),lit(">"),s)}. */

FUN fmtSeq: (data -> fmt) -> seq[data] -> fmt
