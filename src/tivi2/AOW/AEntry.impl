IMPLEMENTATION AEntry

IMPORT WinView ONLY view ^-^
       WinConfig ONLY config with ++ text 
                        seq union unitWidth horizontal orient
       WinText ONLY entry
       WinTextEditor ONLY textEditor get index range edit range index pos
                          lineend delete: textEditor ** range -> com[void] 
                          insert: textEditor ** string -> com[void]

       Com ONLY com succeed break
       ComCompose ONLY &
       Nat ONLY 0 1 ! 20
       Option ONLY avail? nil? cont
       Pair ONLY pair & 1st 2nd
       String ONLY string !
       StringConv ONLY `
       WinRegulator ONLY regulator regulate get set
       WinScroller ONLY scroller scroll scrollControl
       WinScrollbar ONLY scrollbar
       WinEvent ONLY bind wconfig:SORT
       WinEmitter ONLY emitter emit await
       OWmisc ONLY <+
       ComAgent ONLY agent
       Void ONLY nil
       Denotation ONLY ++
       ParseConv ONLY asParse

DATA aEntry == aEntry(view: view, 
                      textEditor: textEditor,
                      regulator: regulator,
                      sync: emitter[data])

DEF aEntry == aEntry(defaultConfig)
DEF aEntry(n) == aEntry(unitWidth(n))
DEF aEntry(c) ==
    textEditor & (\\ tE.
    regulator & (\\reg.
    emitter & (\\syn.
    LET
      v == entry with edit(tE) ++ regulate(reg) ++ c
    IN 
      succeed(aEntry(v, tE, reg, syn))
    )))

DEF aEntryLong == aEntryLong(defaultConfig)
DEF aEntryLong(n) == aEntryLong(unitWidth(n))
DEF aEntryLong(c) == 
    textEditor & (\\ tE.
    regulator & (\\reg.
    scroller & (\\scr.
    emitter & (\\syn.
    LET
      v == entry with edit(tE) ++ regulate(reg) ++ 
                        scroll(scr, horizontal) ++ c
      s == scrollbar with horizontal ++ scrollControl(scr)
    IN 
      succeed(aEntry(v ^-^ s, tE, reg, syn))
    ))))

DEF defaultDim == 20
DEF defaultConfig == unitWidth(defaultDim)

-- %$Control for OpalWin$
-- DEF view: aEntry -> view == ...
-- DEF regulator: aEntry -> regulator == ...
-- both selectors of DATA ==


-- %$Accessing contents$
-- %Note: @code{get} and @code{upd} fail, if text cannot be parsed as data.

-- %set the displayed value
DEF aE set d == 
    LET tE == textEditor(aE)
    IN
      delete(tE, range(pos(1,0), lineend(pos(1,0)))) & (\\ _ .
      insert(tE, print(d)!) & (\\ _ .
      sync(aE) emit d
      ))

-- %get the displayed value
DEF get(aE) ==
-- %{bug}The following will work in the next release of OpalWin
--    get(textEditor(aE)) & (\\str.
    get(textEditor(aE), range(pos(1,0), lineend(pos(1,0)))) & (\\str.
    LET res == asParse(preparse)(str`)
    IN    
    IF avail?(res) THEN succeed(cont(res))
    IF nil?(res)   THEN 
        break("get'AEntry: could not parse data\n" ++ (str`))
    FI
    )

-- %update data as specified by function
DEF aE upd f ==  get(aE) & (\\d. aE set f(d))


-- %$Binding Events$
-- FUN bind: aEntry ** event ** 
--          (aEntry ** eventInfo -> com[void]) -> com[void]
-- FUN bind: aEntry ** event ** 
--          (aEntry ** eventInfo ** data -> com[void]) -> com[void]

DEF bind(aE, ev, f) ==
    regulator(aE) <+ bind(ev, \\eI. f(aE, eI))

DEF bind(aE, ev, f) ==
    regulator(aE) <+ bind(ev, \\eI. get(aE) & (\\d. f(aE, eI, d)))

-- %$Synchronize with Data Changes$
DEF sync(aE, cmd) == agent(isync(aE, cmd)) & (\\ _ . succeed(nil))

FUN isync: aEntry ** (data -> com[void]) -> com[void]
DEF isync(aE, cmd) == 
    await(sync(aE)) & (\\d. 
    agent(isync(aE, cmd)) & ( \\ _ .
    cmd(d)
    ))
    
