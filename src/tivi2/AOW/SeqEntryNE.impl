IMPLEMENTATION SeqEntryNE

IMPORT WinTextEditor COMPLETELY
       WinText ONLY text wrap wrapStyle none real
       WinView ONLY view <|< ^-^ frame @< fillX *+ expand
       WinConfig ONLY config with unitHeight ++ point orient vertical
horizontal unitWidth state disabled normal
       WinEmitter ONLY emitter await emit
       WinScroller ONLY scroll scroller scrollControl
       WinScrollbar ONLY scrollbar
       WinEvent ONLY event button double eventInfo point modifier bind -
                     wconfig 
       WinSelector ONLY selector get set

       Seq ONLY seq :: <>
       SeqConv ONLY `
       String ONLY string ! <> rt 
       StringConv ONLY `
       StringFilter ONLY split drop
       Char ONLY char ! = |=
       Com ONLY com succeed break
       ComCompose ONLY &
       ComAgent ONLY agent 
       Nat ONLY 10 0 1 2 20 15 pred
       Option COMPLETELY
       ABORT ONLY ABORT
       Denotation ONLY ++ 
       OptionMap ONLY *
       WinRegulator ONLY regulator regulate set get
       Pair ONLY pair 1st 2nd &
       OWmisc ONLY <+
       Void ONLY void nil
       SeqIndex ONLY slice !
       

DATA seqEntry == seqEntry(data: selector[seq[data]],
                          view: view,
                         textEditor: textEditor,
                         regulator: regulator,
                         sync: emitter[seq[data]],
                         vscroll: scroller,
                         hscroll: scroller)

DEF seqEntry(sq) == seqEntry(sq, defaultConfig)
DEF seqEntry(sq, w, h) == seqEntry(sq, unitWidth(w) ++ unitHeight(h))
DEF seqEntry(sq, tconfig) ==
    textEditor & (\\tE.
    agent(tE insert !(`("","\n","")(print)(sq))) & (\\ _ .
    emitter[seq] & (\\sy.
    regulator & (\\rg.
    selector(sq) & (\\dt.
    scroller & (\\vscr.
    scroller & (\\hscr.
      LET txtconfig == tconfig ++ edit(tE) ++ wrap(none) ++
                        scroll(vscr, vertical) ++ scroll(hscr, horizontal) ++
                        regulate(rg) 
          txtview == expand(fillX(text with txtconfig))
          v == (txtview <|< (scrollbar with vertical ++ scrollControl(vscr)))
                ^-^ (expand(scrollbar with horizontal ++ scrollControl(hscr)))
      IN
    succeed(seqEntry(dt, *+(frame @< v), tE, rg, sy, vscr, hscr))
    )))))))

DEF defaultDim == &(10,15)
DEF defaultConfig == unitWidth(1st(defaultDim)) ++ unitHeight(2nd(defaultDim))

-- %$Control for OpalWin$
-- FUN view: seqEntry -> view
-- FUN regulator: seqEntry -> view
-- selectors

-- %$Accessing contents$
-- %Note: @code{getXXX} and @code{upd} fail, if text cannot be parsed as data.

/* %set the displayed value (blocked until seqEntry is displayed!, spawn an
agent to initialize the entry!) */

DEF set(sE, S) ==
    LET tE == textEditor(sE)
        txt == !(`("","\n","")(print)(S))
    IN
    tE delete range(pos(1,0), end) & (\\ _ .
    tE insert txt & (\\ _ .
    sync(sE) emit S & (\\ _ .
    data(sE) set S
    )))

DEF get(sE) == get(data(sE))

-- FUN getSelection: seqEntry -> com[seq[data]]
DEF getSelection(sE) ==
    LET tE == textEditor(sE) 
    IN
    -- %we expand selection to whole lines and therefore expand tags
    tE tag (range(linestart(first(selection)), 
                 lineend(last(selection))), selection) & (\\ _ .
    index(tE, linestart(first(selection))) & (\\start.
    index(tE, lineend(last(selection))) & (\\ ende.
    get(data(sE)) & (\\sq.
    succeed(slice(sq, pred(line(start)), pred(line(ende))))
    ))))

-- FUN get: seqEntry ** point -> com[data]
DEF get(sE, pt) ==
    LET tE == textEditor(sE)
    IN
    tE index linestart(point(pt)) & (\\start.
    get(data(sE)) & (\\sq.
    succeed(pred(line(start)) & sq!pred(line(start)))
    ))

DEF upd(sE, f) == get(sE) & (\\dt. sE set (f(dt)))
 
-- %$Binding Events$
DEF bind(sE, ev, cmd) == regulator(sE) <+ bind(ev, \\eI. cmd(sE, eI)) 

DEF bind(sE, ev, cmd) == 
    regulator(sE) <+ bind(ev, \\ eI. get(sE) & (\\sq. cmd(sE, eI, sq)))

-- %$Synchronize with Data Changes$

DEF sync(sE, cmd) == agent(isync(sE, cmd)) & (\\ _ . succeed(nil))

FUN isync: seqEntry ** (seq[data] -> com[void]) -> com[void]
DEF isync(sE, cmd) ==
    await(sync(sE)) & (\\sq.
    agent(isync(sE, cmd)) & (\\ _ .
    cmd(sq)
    ))
