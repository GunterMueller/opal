SIGNATURE MapEntryNE[data1, <, data2, print1, print2]

-- %$Parameters$
SORT data1 data2
FUN < : data1 ** data1 -> bool

FUN print1: data1 -> denotation

FUN print2: data2 -> denotation

-- %$Imports$
IMPORT Map[data1, <, data2] ONLY map
       Void ONLY void
       Com[void] ONLY com
       Com[map] ONLY com
       Com[mapEntry] ONLY com
       Pair[data1, data2] ONLY pair
       Nat ONLY nat
       Pair[nat, nat] ONLY pair
       Com[pair[data1, data2]] ONLY com

       WinConfig ONLY config point
       WinView ONLY view
       WinRegulator ONLY regulator:SORT
       WinEvent ONLY event:SORT eventInfo:SORT

-- %$The new sort and its constructors$

SORT mapEntry

/* %There are three versions available for aEntries:
@itemize @bullet
@item
default version */
FUN mapEntry: map[data1, <, data2] -> com[mapEntry]
/* %@item
specify width, height (for each of the subentries)
*/
FUN mapEntry: map[data1, <, data2] ** nat ** nat -> com[mapEntry]
/* %@item
specify configuration. Use any configuration appropriate for a text view
except @i{edit}. */
FUN mapEntry: map[data1, <, data2] ** config -> com[mapEntry]
-- %@end itemize

FUN defaultDim: pair[nat, nat]
FUN defaultConfig: config

-- %$Control for OpalWin$
FUN view: mapEntry -> view
FUN regulator1: mapEntry -> regulator
FUN regulator2: mapEntry -> regulator

-- %$Accessing contents$
-- %Note: @code{getXXX} and @code{upd} fail, if text cannot be parsed as data.

/* %set the displayed value (blocked until mapEntry is displayed!, spwan an
agent to initialize the entry! */
FUN set: mapEntry ** map[data1, <, data2] -> com[void]

-- %get the displayed map or selected map
FUN get: mapEntry -> com[map[data1, <, data2]]
FUN getSelection: mapEntry -> com[map[data1, <, data2]]
/* %get entry in line which contains point */
FUN get: mapEntry ** point -> com[pair[data1, data2]]

-- %update data as specified by function
FUN upd: mapEntry ** 
         (map[data1, <, data2] -> map[data1, <, data2]) -> com[void]


-- %$Binding Events$
FUN bind: mapEntry ** event ** 
          (mapEntry ** eventInfo -> com[void]) -> com[void]
FUN bind: mapEntry ** event ** 
          (mapEntry ** eventInfo ** map -> com[void]) -> com[void]

-- %$Synchronize with Data Changes$
/* %Specify a command, which is called, whenever @code{set} or @code{upd} have
been called. This may be repeated for different commands.  */

FUN sync: mapEntry ** (map -> com[void]) -> com[void]
