IMPLEMENTATION VariantEntry

-- %$Imports$

IMPORT DataWindow ONLY dataWindow
       Com ONLY com succeed
       ComCompose ONLY &
       OWmisc ONLY label
       WinView ONLY view label ^-^
       ComAgent ONLY agent
       IOSmallEntries ONLY preparseN printN preparsePos printPos preparseComp printComp
       T2AEntry ONLY aEntry view set get
       T2SeqEntry ONLY seqEntry view get set
       Nat ONLY nat 32 15 64 7
       InterOpal COMPLETELY
       Seq ONLY seq
       WinConfig ONLY point:SORT config with text string union
       Pair ONLY pair
       Option ONLY option
       Int COMPLETELY

-- %$The data type$
DATA variantEntry == 
    variantEntry(view: view,
                 posEntry: aEntry[pos, preparsePos, printPos],
                 consEntry: aEntry[name, preparseN, printN],
                 testEntry: aEntry[name, preparseN, printN],
                 compsEntry: seqEntry[comp, preparseComp, printComp])

DEF variantEntry(v) ==
    aEntry(32) & (\\posE.
    aEntry(32) & (\\consE.
    aEntry(32) & (\\testE.
    seqEntry(64, 7) & (\\compsE.
    LET
      V == label with text("variant") ^-^
           label("pos:", view(posE)) ^-^
           label("cons:", view(consE)) ^-^
           label("test:", view(testE)) ^-^
           label("comps:", view(compsE))
      vE == variantEntry(V, posE, consE, testE, compsE)
    IN
      agent(vE set v) &
      succeed(vE)
    ))))

-- %$The basic functions$
DEF vE set variant(p, c, t, cs) ==
    posEntry(vE) set p &
    consEntry(vE) set c &
    testEntry(vE) set t &
    compsEntry(vE) set cs

DEF get(vE) ==
    get(posEntry(vE)) & (\\ p.
    get(consEntry(vE)) & (\\ c.
    get(testEntry(vE)) & (\\ t.
    get(compsEntry(vE)) & (\\ cs.
    succeed(variant(p, c, t, cs))
    ))))

DEF variantWindow(vC, vE)(wname, v) ==
    dataWindow(vC, vE, view, get, set)(wname, v)
