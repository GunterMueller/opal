SIGNATURE IOordinatrice

IMPORT InterOpal ONLY guard:SORT name:SORT origin:SORT inst:SORT ident:SORT
                      fct:SORT expr:SORT var:SORT pattern:SORT eqn:SORT
                      comp:SORT variant:SORT impl:SORT object:SORT formula:SORT
                      property:SORT struct:SORT part:SORT interOpal:SORT 
                      pos:SORT kind:SORT pragma:SORT pragmaItem:SORT

IMPORT Format ONLY fmt
       Nat ONLY nat
       Seq[fct] ONLY seq
       Seq[pattern] ONLY seq
       Seq[eqn] ONLY seq
       Seq[var] ONLY seq
       Option[expr] ONLY option
       Seq[guard] ONLY seq
       Seq[expr] ONLY seq
       Seq[ident] ONLY seq
       Seq[pos] ONLY seq
       Seq[comp] ONLY seq
       Option[denotation] ONLY option
       Map[ident, <, property] ONLY map
       Map[ident, <, object] ONLY map
       Seq[name] ONLY seq
       Map[inst, <, seq[name]] ONLY map
       Map[origin, <, struct] ONLY map
       Seq[variant] ONLY seq
       Dyn ONLY dyn
       Seq[pragma] ONLY seq
       Seq[pragmaItem] ONLY seq

-- this is output of ordinatrice verte for free type guard
FUN < : guard ** guard -> bool
FUN = : guard ** guard -> bool
FUN :=_then : guard ** expr -> guard
FUN :=_if : guard ** expr -> guard
FUN :=_pos : guard ** pos -> guard
FUN fmtGuard : guard -> fmt
-- this is output of ordinatrice verte for free type name
-- FUN < : name ** name -> bool
IMPORT InterOpal ONLY < : name ** name -> bool
FUN = : name ** name -> bool
FUN :=_inst : name ** inst -> name
FUN :=_origin : name ** origin -> name
FUN :=_ident : name ** ident -> name
FUN fmtName : name -> fmt
-- this is output of ordinatrice verte for free type origin
-- FUN < : origin ** origin -> bool
IMPORT InterOpal ONLY < : origin ** origin -> bool
FUN = : origin ** origin -> bool
FUN :=_no : origin ** nat -> origin
FUN fmtOrigin : origin -> fmt
-- this is output of ordinatrice verte for free type pragma
FUN < : pragma ** pragma -> bool
FUN = : pragma ** pragma -> bool
FUN :=_items : pragma ** seq[pragmaItem] -> pragma
FUN fmtPragma : pragma -> fmt
-- this is output of ordinatrice verte for free type pragmaItem
FUN < : pragmaItem ** pragmaItem -> bool
FUN = : pragmaItem ** pragmaItem -> bool
FUN :=_text : pragmaItem ** denotation -> pragmaItem
FUN :=_pos : pragmaItem ** pos -> pragmaItem
FUN :=_objects : pragmaItem ** seq[name] -> pragmaItem
FUN fmtPragmaItem : pragmaItem -> fmt
-- this is output of ordinatrice verte for free type inst
-- FUN < : inst ** inst -> bool
IMPORT InterOpal ONLY < : inst ** inst -> bool
FUN = : inst ** inst -> bool
FUN :=_no : inst ** nat -> inst
FUN fmtInst : inst -> fmt
-- this is output of ordinatrice verte for free type ident
-- FUN < : ident ** ident -> bool
IMPORT InterOpal ONLY  < : ident ** ident -> bool
FUN = : ident ** ident -> bool
FUN :=_no : ident ** nat -> ident
FUN fmtIdent : ident -> fmt
-- this is output of ordinatrice verte for free type fct
FUN < : fct ** fct -> bool
FUN = : fct ** fct -> bool
FUN :=_codom : fct ** fct -> fct
FUN :=_dom : fct ** fct -> fct
FUN :=_elems : fct ** seq[fct] -> fct
FUN :=_sort : fct ** name -> fct
FUN fmtFct : fct -> fmt
-- this is output of ordinatrice verte for free type pos
FUN < : pos ** pos -> bool
FUN = : pos ** pos -> bool
FUN :=_endCol : pos ** nat -> pos
FUN :=_endRow : pos ** nat -> pos
FUN :=_col : pos ** nat -> pos
FUN :=_row : pos ** nat -> pos
FUN :=_part : pos ** part -> pos
FUN fmtPos : pos -> fmt
-- this is output of ordinatrice verte for free type kind
FUN < : kind ** kind -> bool
FUN = : kind ** kind -> bool
FUN :=_data : kind ** dyn -> kind
FUN :=_id : kind ** denotation -> kind
FUN :=_fct : kind ** fct -> kind
FUN fmtKind : kind -> fmt
-- this is output of ordinatrice verte for free type eqn
FUN < : eqn ** eqn -> bool
FUN = : eqn ** eqn -> bool
FUN :=_rhs : eqn ** expr -> eqn
FUN :=_patterns : eqn ** seq[pattern] -> eqn
FUN :=_lhs : eqn ** pattern -> eqn
FUN :=_pos : eqn ** pos -> eqn
FUN fmtEqn : eqn -> fmt
-- this is output of ordinatrice verte for free type var
FUN < : var ** var -> bool
FUN = : var ** var -> bool
FUN :=_fct : var ** fct -> var
FUN :=_symbol : var ** denotation -> var
FUN :=_ident : var ** ident -> var
FUN :=_pos : var ** pos -> var
FUN fmtVar : var -> fmt
-- this is output of ordinatrice verte for free type expr
FUN < : expr ** expr -> bool
FUN = : expr ** expr -> bool
FUN :=_body : expr ** expr -> expr
FUN :=_eqns : expr ** seq[eqn] -> expr
FUN :=_pos : expr ** pos -> expr
FUN :=_vars : expr ** seq[var] -> expr
FUN :=_else : expr ** option[expr] -> expr
FUN :=_guards : expr ** seq[guard] -> expr
FUN :=_arg : expr ** expr -> expr
FUN :=_funct : expr ** expr -> expr
FUN :=_elems : expr ** seq[expr] -> expr
FUN :=_rep : expr ** denotation -> expr
FUN :=_name : expr ** name -> expr
FUN fmtExpr : expr -> fmt
-- this is output of ordinatrice verte for free type pattern
FUN < : pattern ** pattern -> bool
FUN = : pattern ** pattern -> bool
FUN :=_elems : pattern ** seq[pattern] -> pattern
FUN :=_pos : pattern ** pos -> pattern
FUN :=_arg : pattern ** pattern -> pattern
FUN :=_funct : pattern ** pattern -> pattern
FUN :=_pattern : pattern ** pattern -> pattern
FUN :=_var : pattern ** var -> pattern
FUN :=_name : pattern ** name -> pattern
FUN fmtPattern : pattern -> fmt
-- this is output of ordinatrice verte for free type object
FUN < : object ** object -> bool
FUN = : object ** object -> bool
FUN :=_pragmas : object ** seq[pragma] -> object
FUN :=_props : object ** seq[ident] -> object
FUN :=_def : object ** impl -> object
FUN :=_kind : object ** kind -> object
FUN :=_symbol : object ** denotation -> object
FUN :=_ident : object ** ident -> object
FUN :=_pos : object ** seq[pos] -> object
FUN fmtObject : object -> fmt
-- this is output of ordinatrice verte for free type variant
FUN < : variant ** variant -> bool
FUN = : variant ** variant -> bool
FUN :=_comps : variant ** seq[comp] -> variant
FUN :=_test : variant ** name -> variant
FUN :=_cons : variant ** name -> variant
FUN :=_pos : variant ** pos -> variant
FUN fmtVariant : variant -> fmt
-- this is output of ordinatrice verte for free type comp
FUN < : comp ** comp -> bool
FUN = : comp ** comp -> bool
FUN :=_sel : comp ** name -> comp
FUN :=_pos : comp ** pos -> comp
FUN fmtComp : comp -> fmt
-- this is output of ordinatrice verte for free type impl
FUN < : impl ** impl -> bool
FUN = : impl ** impl -> bool
FUN :=_data : impl ** dyn -> impl
FUN :=_id : impl ** denotation -> impl
FUN :=_pos : impl ** pos -> impl
FUN :=_eqns : impl ** seq[eqn] -> impl
FUN :=_variants : impl ** seq[variant] -> impl
FUN :=_sort : impl ** name -> impl
FUN :=_pos : impl ** pos -> impl
FUN :=_no : impl ** nat -> impl
FUN fmtImpl : impl -> fmt
-- this is output of ordinatrice verte for free type property
FUN < : property ** property -> bool
FUN = : property ** property -> bool
FUN :=_pragmas : property ** seq[pragma] -> property
FUN :=_data : property ** dyn -> property
FUN :=_id : property ** denotation -> property
FUN :=_formula : property ** formula -> property
FUN :=_symbol : property ** option[denotation] -> property
FUN :=_ident : property ** ident -> property
FUN :=_pos : property ** pos -> property
FUN :=_variants : property ** seq[variant] -> property
FUN :=_sort : property ** name -> property
FUN fmtProperty : property -> fmt
-- this is output of ordinatrice verte for free type formula
FUN < : formula ** formula -> bool
FUN = : formula ** formula -> bool
FUN :=_data : formula ** dyn -> formula
FUN :=_id : formula ** denotation -> formula
FUN :=_text : formula ** denotation -> formula
FUN :=_range : formula ** formula -> formula
FUN :=_vars : formula ** seq[var] -> formula
FUN :=_pos : formula ** pos -> formula
FUN :=_right : formula ** formula -> formula
FUN :=_left : formula ** formula -> formula
FUN :=_conclusion : formula ** formula -> formula
FUN :=_premise : formula ** formula -> formula
FUN :=_formula : formula ** formula -> formula
FUN :=_right : formula ** expr -> formula
FUN :=_left : formula ** expr -> formula
FUN :=_expr : formula ** expr -> formula
FUN fmtFormula : formula -> fmt
-- this is output of ordinatrice verte for free type part
FUN < : part ** part -> bool
FUN = : part ** part -> bool
FUN fmtPart : part -> fmt
-- this is output of ordinatrice verte for free type struct
FUN < : struct ** struct -> bool
FUN = : struct ** struct -> bool
FUN :=_pragmas : struct ** seq[pragma] -> struct
FUN :=_props : struct ** map[ident, <, property] -> struct
FUN :=_objs : struct ** map[ident, <, object] -> struct
FUN :=_onlys : struct ** map[inst, <, seq[name]] -> struct
FUN :=_insts : struct ** map[inst, <, seq[name]] -> struct
FUN :=_symbol : struct ** denotation -> struct
FUN :=_origin : struct ** origin -> struct
FUN :=_pos : struct ** seq[pos] -> struct
FUN fmtStruct : struct -> fmt
-- this is output of ordinatrice verte for free type interOpal
FUN < : interOpal ** interOpal -> bool
FUN = : interOpal ** interOpal -> bool
FUN :=_structs : interOpal ** map[origin, <, struct] -> interOpal
FUN :=_part : interOpal ** part -> interOpal
FUN fmtInterOpal : interOpal -> fmt
