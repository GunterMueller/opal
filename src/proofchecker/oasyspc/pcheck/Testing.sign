/* %Functions which support testing. */

SIGNATURE Testing

IMPORT Repo ONLY repo
       RepoName ONLY unitName:SORT
       RepoAbsy ONLY formula:SORT expr
       RepoDiag ONLY ref diag
       Com[pair] ONLY com
       Pair[repo,diag] ONLY pair

-- %$Evaluating formulae$

/* %Formula must be quantifierfree. Unit name gives the context in which the
    expressions of the formula are to be evaluated. Ref is a suitable
    reference for diagnostic messages.

    @emph{Note} that the equality test may fail, even though 
    both expressions are equal (e. g. when comparing function values).
*/
FUN evaluate: repo ** unitName ** formula ** ref -> com[pair[repo, diag]]

/* %Perform a test. The expression must be of the form
    @code{test[f](f(x1, y1, ...) :: f(x2, y2, ...) ... :: <>)}.
    The formula must have the form @code{ALL a b ... . F(a,b,...)},
    such that @code{a, b, ...} are of the same type as @code{x#, y#, ...}.
    @code{F} itself may not contain any quantifiers.
*/

FUN doTest: repo ** unitName ** formula ** ref ** expr -> com[pair[repo, diag]]


/* %Same arguments as above. Expression must be of the form
    @code{formalTest[f, data1, data2, data3](casesFunct, dataFunct)} */

FUN checkFormalTest: repo ** unitName ** formula ** ref ** expr ->
                      com[pair[repo, diag]]