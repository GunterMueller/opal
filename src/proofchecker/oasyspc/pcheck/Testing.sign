/* %Functions which support testing. */

SIGNATURE Testing

IMPORT Repo ONLY repo
       RepoName ONLY unitName:SORT objectName:SORT
       RepoAbsy ONLY formula:SORT expr
       RepoDiag ONLY ref diag
       Com[pair] ONLY com
       Pair[repo,diag] ONLY pair
       Triple[repo, diag, seq[expr]] ONLY triple
       Com[triple] ONLY com
       Seq[expr] ONLY seq

-- %$Evaluating formulae$

/* %Formula must be quantifierfree. Unit name gives the context in which the
    expressions of the formula are to be evaluated. Ref is a suitable
    reference for diagnostic messages.

    @emph{Note} that the equality test may fail, even though 
    both expressions are equal (e. g. when comparing function values).
*/
FUN evaluate: repo ** unitName ** formula ** ref -> com[pair[repo, diag]]

/* %Perform a test. The expression must be of the form
    @code{test[f](f(x1, y1, ...) :: f(x2, y2, ...) ... :: <>)}.
    The formula must have the form @code{ALL a b ... . F(a,b,...)},
    such that @code{a, b, ...} are of the same type as @code{x#, y#, ...}.
    @code{F} itself may not contain any quantifiers.
*/

FUN doTest: repo ** unitName ** formula ** ref ** expr -> com[pair[repo, diag]]


/* %Same arguments as above. Expression must be of the form
    @code{formalTestX[data1, ..., data(X+1)](f, casesFunct, dataFunct)},
    where 1 <= X <= 4 */

FUN checkFormalTest1: repo ** unitName ** formula ** ref ** expr ->
                      com[pair[repo, diag]]

FUN checkFormalTest2: repo ** unitName ** formula ** ref ** expr ->
                      com[pair[repo, diag]]

FUN checkFormalTest3: repo ** unitName ** formula ** ref ** expr ->
                      com[pair[repo, diag]]

FUN checkFormalTest4: repo ** unitName ** formula ** ref ** expr ->
                      com[pair[repo, diag]]

/* % Compute the predicates which represent the test cases.
     unitName gives the context for evaluation, expr computes the test cases,
     objectName is the function to be tested, ref is used in diagnostic
     messages. */     

FUN doEvalTestCases: repo ** unitName ** expr'RepoAbsy ** objectName ** ref ->
                      com[triple[repo, diag, seq[expr'RepoAbsy]]]
