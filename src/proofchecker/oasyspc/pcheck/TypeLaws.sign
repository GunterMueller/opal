/* %Compute the lawNames associated with a free type or a data type.
*/

SIGNATURE TypeLaws

IMPORT RepoName ONLY objectName
       Repo ONLY repo:SORT
       Set[lawName,<] ONLY set
       PCEnv ONLY lawName  < : lawName ** lawName -> bool
       RepoAbsy ONLY expr:SORT formula:SORT
       Option[formula] ONLY option[formula]:SORT


/* %$Handle abbreviations Freetype[s] and Datatype[s]$ */

/* %First parameter is sort. */

FUN getFreetypeLaws: objectName -> repo -> set[lawName, <]

FUN getDatatypeLaws: objectName -> repo -> set[lawName, <]


/* %$Manage visibility and congruence functions$ */

-- %Note: no correctness check is made
-- %First parameter is sort, second is function
FUN setVisible: objectName ** objectName -> repo -> repo
-- %for free types: use default
FUN setVisibleDefault: objectName        -> repo -> repo

-- %second parameter is congruence
FUN setCong:    objectName ** objectName -> repo -> repo
-- %second parameter is used to generate congruence ( x ~ y => f(x) = f(y)) 
FUN setCongRed: objectName ** objectName -> repo -> repo

-- %first parameter is type, second expr which should be visible
FUN getVisible: objectName ** expr -> repo -> option[formula]
FUN getCong:    objectName ** expr ** expr -> repo -> option[formula]

-- %short for testing
FUN hasVisible : objectName -> repo -> bool
FUN hasCong : objectName -> repo -> bool