#Some initialization for pchecker addition --*-tcl-*--

puts -nonewline "preparing oasys for proof checking ..."

global env

# add oasys libraries

oasys-path add library $env(OASYS_SHARED)
oasys-path add library $env(OASYS_MAIN)

# add proofchecker libraries

oasys-path add library $env(OASYS_PC)
oasys-path add library $env(OASYS_PROOFLIB)

oasys-register PROOFSCRIPT
oasys-register INTERACTIVEPROOF


oasys-intern-set-options -zprop -zpchecker
oasys-intern-extended-compile on
jcheck-intern fulness n n

oasys-proc { jc ?@^UNITL } {add, focus and justification check unit} {CMD UNITL} {
    
    set UNIT [lindex $UNITL 0]
    if { $UNIT != "" } { 
	puts "Setting unit to $UNIT"
	a $UNIT
	f $UNIT
    }
    jcheck-check
}

oasys-proc { jcc ?@^UNITL } {add, focus, justification check and compile unit} {CMD UNITL} {
    
    set UNIT [lindex $UNITL 0]
    if { $UNIT != "" } { 
	puts "Setting unit to $UNIT"
	a $UNIT
	f $UNIT
    }
    jcheck-compile
}

oasys-proc { jcl @PPREFIX ?@^UNITL } {add, focus unit and justification check lemmas} {CMD PPREFIX UNITL} {
    
    set UNIT [lindex $UNITL 0]
    if { $UNIT != "" } { 
	puts "Setting unit to $UNIT"
	a $UNIT
	f $UNIT
    }
    jcheck-proof $PPREFIX
}

### Interactive proofs

set currentProofname { }
set proofCommands { }

oasys-proc { jc-show-proof } { write current state to .trace and tell Emacs to read it } { CMD } {
    global env currentProofname proofCommands
     
    jcheck-interactive show
    set dir [pwd]
    exec gnuclient -q -batch -eval "(opal-trace-interactive-init\"$dir\")" &
    puts "Interactive proof of $currentProofname"
    puts $proofCommands
}

oasys-proc { jc-by @SCRIPT *@SCRIPTCONT } { perform script on current state of interactive proof } { CMD SCRIPT SCRIPTCONT } {
    global env currentProofname proofCommands

    set proofCommands [lappend proofCommands "$SCRIPT $SCRIPTCONT"]
    # 'done ;' ensures that one `;' triggers every functions
#    puts "apply'INTERACTIVEPROOF ( $SCRIPT $SCRIPTCONT ; done )"
    ex "apply'INTERACTIVEPROOF ( ($SCRIPT $SCRIPTCONT) ) "
    show-proof
}


oasys-proc { jc-goal @PNAME ?@^UNITL } { initialize interactive proof with given proof in current or given unit } { CMD PNAME UNITL } {

    global env currentProofname proofCommands

    set UNIT [lindex $UNITL 0]
    if { $UNIT != "" } { 
	puts "Setting unit to $UNIT"
	a $UNIT
	f $UNIT
    }
    oasys-register INTERACTIVEPROOF.sign
    oasys-register BasicTac.sign
    oasys-additional-context add INTERACTIVEPROOF.sign BasicTac.sign
    jcheck-interactive start $PNAME
    ex "apply'INTERACTIVEPROOF ( every(traceProof); every(stat) ) "
    set proofCommands { }
    set currentProofname $PNAME
    jc-show-proof
}

oasys-proc { jc-restart-proof } { restart last interactive proof } { CMD } {

    global currentProofname

    jc-goal $currentProofname
}

oasys-proc { jc-finish-proof } { finish interactive proof } { CMD } {

    global env currentProofname proofCommands

    jcheck-interactive finish
    puts "Interactive proof of $currentProofname"
    puts $proofCommands
}

oasys-proc { jc-abort-proof } { abandon current interactive proof } { CMD } {
    ex abort'INTERACTIVEPROOF
}

oasys-proc { jc-next-proof } { select next state in interactive proof } { CMD } {
    global proofCommands
    ex nextState'INTERACTIVEPROOF
    jc-show-proof
    set proofCommands [lappend proofCommands "next-proof"]
}

oasys-proc {jc-back-proof } { revert last proofscript } { CMD } {
    global proofCommands
    ex backState'INTERACTIVEPROOF
    jc-show-proof
    set proofCommands [lappend proofCommands "back-proof"]
}

oasys-proc {jc-subgoal-proof start ?@IDX } { restrict subgoals in current state to the one given (0 is default) } {CMD LIT1 IDX} {
    global proofCommands

    if { [llength $IDX] = 0 } { set IDX 0 }
    ex ($IDX subgoalStart'INTERACTIVEPROOF)
    jc-show-proof
    set proofCommands [lappend proofCommands "subgoal-proof start $IDX"]

}

oasys-proc {jc-subgoal-proof end } { re-insert hidden subgoals } {CMD LIT1} {
    global proofCommands
    ex subgoalEnd'INTERACTIVEPROOF
    jc-show-proof
    set proofCommands [lappend proofCommands "subgoal-proof end"]
}

oasys-proc { jc-add-formula @FORMULA *@FORMULACONT } { add formula to proof } \
    { CMD FORMULA FORMULACONT } {
	global proofCommands

	# puts "jcheck-interactive add-formula $FORMULA $FORMULACONT"
	jcheck-interactive add-formula $FORMULA $FORMULACONT
	jc-show-proof
	set proofCommands [lappend proofCommands \
			   "add-formula $FORMULA $FORMULACONT"]
    }

puts " done"