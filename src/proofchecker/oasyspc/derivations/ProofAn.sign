/* %Several information is kept in the annotations either of the whole
    state of a proof or the associated to a certain formula. */

SIGNATURE ProofAn

IMPORT RepoAbsy ONLY formula:SORT expr:SORT object:SORT fct:SORT
       Option[formula] ONLY option
       RepoAn ONLY an
       RepoDiag ONLY ref:SORT
       Fmt ONLY fmt
       Seq[fmt] ONLY seq
       Nat ONLY nat
       Option[fmt] ONLY option[fmt]:SORT
       Option[nat] ONLY option[nat]:SORT
       Option[bool] ONLY option[bool]:SORT
       Pair[formula, seq[objectName]] ONLY pair
       Option[pair] ONLY option
       Seq[objectName] ONLY seq
       RepoName ONLY objectName
       Repo ONLY repo:SORT
       Option[expr] ONLY option[expr]:SORT
       Option[objectName] ONLY option[objectName]:SORT
       Option[real] ONLY option
       Real ONLY real:SORT
       OSubstitution ONLY subst:SORT
       Seq[fct] ONLY seq[fct]:SORT
       Option[seq[fct]] ONLY option[seq[fct]]:SORT

-- %$Formula annotation$


-- %reset formula annotations (shadow, shortcut, original)
FUN clearFormAn: formula -> formula

/* %Formulae may contain a "shadow" formula which is set and queried
    with the following functions. */

/* %second formula is (re)defined as shadow of the first;
    seq of objectNames contains the new free variables */
FUN :=_shadow: formula ** formula ** seq[objectName] -> formula

FUN shadow? : formula -> bool
FUN getShadow: formula -> option[pair[formula, seq[objectName]]]
FUN getShadowF: formula -> option[formula]
FUN clearShadow: formula -> formula

/* %Formulae may have a shortcut associated; usually the name by which they
    are denotated in the Opal source. Always set a shortcut, so that
    newly generated formulas may be distinguished from unchanged
    formulas. */

FUN :=_shortcut: formula ** fmt -> formula

FUN shortcut? : formula -> bool
FUN getShortcut: formula -> option[fmt]
-- FUN clearShortcut: formula -> formula

/* %Computing the shortcut takes some time, so this switch may be used
    to indicate whether shortcuts shall be used or not. */

FUN :=_shortcutSwitch: an ** bool -> an

FUN getShortcutSwitch: an -> option[bool]

/* %This flag indicates whether the shortcut has been just recomupted. */
FUN newSC? : formula -> bool
FUN setNewSC: formula -> formula
FUN clearNewSC: formula -> formula

/* %This flag marks formulae which are unchanged from the beginning */
FUN original? : formula -> bool
FUN new? : formula -> bool    -- new = not(original)
-- %set flag for formula and subformulae of con-/disjunctions
FUN setOriginal: formula -> formula
-- FUN clearOriginal: formula -> bool

-- %$Expression annotations$
/* % Expressions may have their weight associated. */

FUN :=_weight: expr ** nat -> expr

FUN weight? : expr -> bool
FUN getWeight: expr -> option[nat]
FUN clearWeight: expr -> expr

/* %some lambda expressions have the types of their variables annotated */

FUN :=_types: an ** seq[fct] -> an
FUN getTypes: an -> option[seq[fct]]

-- %$Proofan annotations$

FUN initProofAn: ref -> an

-- %$Object annotations$
/* %unknown variables possibly have annotated the current FV-count.
    In substitutions only free variables below this count may be used. */
FUN :=_fvct: object ** nat -> object
FUN setFVct: nat -> object -> object
FUN setFVct: nat -> objectName ** repo -> repo

FUN getFVct: object -> option[nat]
FUN getFVct: objectName -> repo -> option[nat]

-- %$State annotations$

/* %Since the state data type is defined in another structure which
    itself refers to ourselves (i.e. structure @code{ProofAn}), we 
    cannot define convenience functions for these annotations. */

-- %The canonical reference to be used when generating diagnostics.
FUN :=_canRef: an ** ref -> an
FUN getCanRef: an -> ref

-- %A list of formats for tracing
FUN xtrace: fmt -> an -> an
FUN getTrace: an -> seq[fmt]

-- %time the last trace was added
FUN setTime: real -> an -> an
FUN getTime: an -> option[real]

-- %$Support for proofs as programs$

-- %name of the currently specified function

FUN :=_specFun: an ** objectName -> an
FUN getSpecFun: an -> option[objectName]

-- %name of the unskolem variable for this function

FUN :=_unskol: an ** objectName -> an
FUN getUnskol: an -> option[objectName]

-- %the expression by which the unskolem variable has been replaced

FUN :=_specExpr: an ** expr -> an
FUN getSpecExpr: an -> option[expr]

-- %$Making Subgoal tactic work$

-- %the current substitution on free variables

FUN °=_subst: an ** subst -> an
FUN getCurrSubst: an -> subst