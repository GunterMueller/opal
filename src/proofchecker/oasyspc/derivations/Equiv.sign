/* %Compute whether formulae are equivalent. */

SIGNATURE Equiv

IMPORT RepoAbsy ONLY formula:SORT expr:SORT
       Seq[formula] ONLY seq[formula]:SORT
       Sequent ONLY sequent:SORT
       Seq[sequent] ONLY seq[sequent]:SORT
       Seq[expr] ONLY seq[expr]:SORT
       RepoName ONLY localSignName:SORT

-- $Strong equivalence$

/* %Strong equivalence is defined as equality up to renaming of
    local variables, for formulae and expressions. 

    May not be used for open formulae or expressions!
*/

FUN equiv: formula  ** formula -> bool
FUN equiv: expr ** expr -> bool

-- %localSignName identifies free variables which are treated as constants
FUN equiv: localSignName -> formula ** formula -> bool


-- %Match exactly
FUN equal: expr ** expr -> bool
FUN equal: formula ** formula -> bool

-- %eliminate double expressions
FUN uniq: seq[expr] -> seq[expr]

/* %Contract formula: eliminate equal formulae in hypotheses and
   propositions. */
FUN contract: seq[sequent] -> seq[sequent]
FUN contract: sequent -> sequent
FUN contract: seq[formula] -> seq[formula]

/* %use equiv(lS) as equaivalence */
FUN contract: localSignName -> seq[sequent] -> seq[sequent]
FUN contract: localSignName -> sequent -> sequent
FUN contract: localSignName -> seq[formula] -> seq[formula]
