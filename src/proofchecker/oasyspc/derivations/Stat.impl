IMPLEMENTATION Stat

IMPORT Nat ONLY nat 0 2 1 succ?
       Fmt ONLY ; beg lit end spc brk
       FmtBasicTypes ONLY fmtNat
       String ONLY string
       PredicateX ONLY and

DATA stat == stat(ct: nat,       -- number of steps performed
                  tCt: nat,      -- total number of steps performed
                  maxSq: nat,    -- max. number of sequences
                  maxHyp: nat,   -- max. number of hypotheses in a sequent
                  maxProp: nat   -- max. number of propositions in a sequent
                  )

DEF initStat == stat(0, 0, 0, 0, 0)

FUN fmtStat : stat -> fmt
DEF fmtStat(stat(v0,v1,v2,v3,v4)) == ;(;(beg(2),lit("stat")),;(;(lit("("),;(;(;(;(;(fmtNat(v0),;(lit(", "),fmtNat(v1))),;(lit(", "),fmtNat(v2))),;(lit(", "),fmtNat(v3))),;(lit(", "),fmtNat(v4))),lit(")"))),end))

DEF prettyStat(stat(ct, tCt, mSq, mH, mP)) ==
  fmtNat(ct); spc(1); lit(" steps"); brk;
--  lit(" total # of steps "); spc(1); fmtNat(tCt); brk;
  lit(" max # subgoals"); spc(1); fmtNat(mSq); brk;
  lit(" max # assumptions"); spc(1); fmtNat(mH); brk;
  lit(" max # targets"); spc(1); fmtNat(mP);  brk


DEF valid?(st) == (maxHyp(st) and maxProp(st))(succ?)
