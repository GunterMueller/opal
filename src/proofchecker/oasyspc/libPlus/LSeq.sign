SIGNATURE LSeq[data]

IMPORT Seq[data] ONLY seq
       Nat ONLY nat
       Option[pair[data,lseq]] ONLY option[pair[data, lseq]]:SORT
       Pair[data,lseq] ONLY pair
       Fmt ONLY fmt

SORT data

-- %$Type declaration$
TYPE lseq == <>
             ::(ft: data, rt: lseq)

-- %lazy constructor
FUN make: (() -> option[pair[data, lseq]]) -> lseq

-- %$Construct a list$
FUN % : data -> lseq

-- %append / interleave
FUN ++ : lseq ** lseq -> lseq  
FUN ++ : lseq ** (() -> lseq) -> lseq

FUN +^+ : lseq ** lseq -> lseq

-- %filter
FUN | : (data -> bool) ** lseq -> lseq

-- %$Accessing Elements$
FUN pull: lseq -> option[pair[data, lseq]]
FUN pull: lseq -> data ** lseq  -- undefined for empty lseq!
FUN split: nat ** lseq -> seq[data] ** lseq

-- %$Conversions$
FUN asSeq: lseq -> seq[data]
FUN asLSeq: seq[data] -> lseq

FUN fmtLSeq: (data -> fmt) -> lseq -> fmt
FUN fmtLseq: (data -> fmt) -> lseq -> fmt

FUN ` : (data -> denotation) -> lseq -> denotation
FUN ` : nat ** (data -> denotation) -> lseq -> denotation