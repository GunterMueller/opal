IMPLEMENTATION SeqPermu

IMPORT Nat ONLY 0 succ nat 
       Seq ONLY % <> seq ++ +% ::
       Pair ONLY & pair 1st 2nd
       SeqMap ONLY *
       LSeq ONLY lseq ++ :: <> % asLSeq
       LSeqOfLSeq ONLY flat
       LSeqMap ONLY *

DEF nTuples(0, R) == %(<> & R)
DEF nTuples(succ(n), R) == nTuples(succ(n), <>, R)

FUN nTuples: nat ** seq[data] ** seq[data] -> seq[pair[seq[data], seq[data]]]
DEF nTuples(succ(n), preEl, currEl :: postEl) ==
  ((\\ p. currEl :: 1st(p) & 2nd(p)) * nTuples(n, preEl ++ postEl)) ++
  nTuples(succ(n), preEl +% currEl, postEl)
DEF nTuples(_, _, <>) == <>
DEF nTuples(0, _, <>) == <>

DEF lCombs(<>) == <>
DEF lCombs(L :: <>) == % * asLSeq(L)
DEF lCombs(L :: R) == flat((\\ x. (\\ y. x :: y) * lCombs(R)) * asLSeq(L))