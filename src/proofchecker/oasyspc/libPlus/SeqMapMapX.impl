IMPLEMENTATION SeqMapMapX

IMPORT Seq ONLY <> :: ++ +% seq
       LSeq ONLY <> ++ lseq
       LSeqMap ONLY *

DEF *#(f, e, S)(incl) == *#(f, e, <>, S, incl)

FUN *# : (env ** from -> env ** lseq[from]) ** env **
          seq[from] ** seq[from] ** (seq[from] -> to) -> 
          env ** lseq[to]
DEF *#(_, e, _, <>, _) == (e, <>)
DEF *#(f, e, pre, a:: post, incl) ==
  LET (e1, as) == f(e, a)
      mk == \\ a0. incl(pre ++ a0 :: post)
      (e2, rest) == *#(f, e1, pre +% a, post, incl)
  IN
  (e2, mk * as ++ rest)
