/* %This structure contains commands needed to support 
    interactive proofs. These commands are expected to be called
    from suitably defined Tcl procedures.
*/

SIGNATURE INTERACTIVEPROOF

IMPORT Repo ONLY repo
       RepoName ONLY unitName:SORT
       RepoAn ONLY an
       Seq ONLY seq
       RepoAbsy ONLY formula:SORT
       Com ONLY com
       Void ONLY void
       PROOFSCRIPT ONLY proofscript resultF
       Nat ONLY nat

-- %$Handcoded Commands$

/* %These functions are not really handcoded, but have to be treated
    in a special way. The @code{initialize} command needs reflection,
    because it must be called with the repository and the formulae of the
    initial subgoal. The @code{finalize} command returns the result and
    needs further processing, for example inserting newly derived
    functions into the repository. @code{apply} applies the proofscript to the
    current state.

    The first three commands roughly provide the functionality of
    @code{apply'PROOFSCRIPT}.
*/

FUN initialize: repo ** unitName ** an **
                 seq[formula] ** formula -> com[void]

FUN apply: proofscript -> com[void]

FUN finalize: com[resultF]

/* %variant, does not return the trace but appends it directly to the
    file @code{.trace} . */
FUN finalizeW: com[resultF]

/* %Add formula to hypotheses of current state. This is not `pure', but
    should help developing proofs interactively. */
FUN addHypothesis: formula -> com[void]

-- %$Manipulate Internal State$

/* %The following two commands allow user-controlled backtracking.
    (This is built-in to the @code{;} and @code{*} tacticals.) */

-- %discard first state of last result
FUN nextState: com[void]

-- %discard last result altogether
FUN backState: com[void]

/* %Allow the prover to concentrate on one subgoal at a time.
    These commands correspond to the @code{subgoal} tactical. */

-- %remove all but given subgoal (default is 0) (may be nested)
FUN subgoalStart: nat -> com[void]
FUN subgoalStart: com[void]

-- %re-insert other subgoals
FUN subgoalEnd: com[void]

-- %$Get Information About Current State$

FUN getResult: com[resultF]

-- %clear trace in result, but append it to file code{.trace}
FUN getResultW: com[resultF]

-- %$Other$

-- %quit current proof without performing further actions
FUN abort: com[void]



    