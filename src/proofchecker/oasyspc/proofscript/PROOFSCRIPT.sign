SIGNATURE PROOFSCRIPT
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT BOOL ONLY bool true
       DENOTATION ONLY denotation
       RepoAbsy ONLY formula:SORT expr:SORT
       Seq[formula] ONLY seq
       LSeq[state] ONLY lseq
       Seq[state] ONLY seq
       RepoAn ONLY an
       RepoDiag ONLY diag
       Seq[sequent] ONLY seq
       Repo ONLY repo:SORT
       RepoName COMPLETELY
       Nat ONLY nat:SORT
       Set[objectName,<] ONLY set[objectName, <]:SORT
       Fmt ONLY fmt
       Seq[fmt] ONLY seq
       Sequent ONLY sequent:SORT
       Stat ONLY stat:SORT
       Seq[expr] ONLY seq

TYPE proofscript == abs(rep: state -> result)

TYPE result == okay(data: lseq[state])
               fail(lastState: state)

TYPE resultF == okay(an: an, diags: diag, stat: stat, trace: seq[fmt]) 

TYPE state == state(an: an,
                    diags: diag, 
                    subgoals: seq[sequent], 
                    repo: repo, 
                    unknownSig: localSignName, uCt: nat,
                    freeVarSig: localSignName, fCt: nat,
                    main: unitName,
                    stat: stat, trace: seq[fmt],
                    every: state -> state, atexit: state -> state) 



-- %$Hook for Oasis$

/* %This function is evaluated by oasys with the assumptions, conclusion and
    proofscript of a proof from the unit. */

FUN apply: repo ** unitName ** an **
            seq[formula] ** formula ** proofscript -> resultF

-- %pseudo script to mark evaluation instead of execution
FUN evaluate: proofscript

/* %Convert result to less voluminous data type; add error, warnings, hints,
    which cannot be detected by atexit-functions. */
FUN !@ : result -> resultF


-- %$Formal Tests$

TYPE resultT == okay(caseTests: seq[expr], diags: diag)