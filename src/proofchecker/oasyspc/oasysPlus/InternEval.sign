/* %provide a possibility to call the interpreter directly */
SIGNATURE InternEval

IMPORT RepoAbsy ONLY expr:SORT fct:SORT
       Com[result] ONLY com
       Com[resultD] ONLY com
       Com[expr'Expression] ONLY com
       RUNTIME ONLY obj:SORT
       RepoName ONLY unitName:SORT < : unitName ** unitName -> bool
       Expression ONLY expr:SORT fct:SORT
       Repo ONLY repo:SORT
       Com[void] ONLY com[void]:SORT
       Void ONLY void
       Set[unitName,<] ONLY set

/* %Call the evaluator to evaluate the expression. The result is either
    @i{okay} with the resulting runtime object (which the caller must cast to
    the correct type), bottom (the evaluator aborted) or unknown (e.g.
    no client found). The unit name gives the context in which the
    expression is to be evaluated; the effect is to ensure that the
    evaluator is up to date with respect to the involved units. */ 
TYPE result == okay(data: obj)  
               undefined(msg: denotation) 
               unknown(msg: denotation) 

FUN eval: unitName ** expr'RepoAbsy -> com[result]
FUN eval: unitName ** expr'Expression ** fct'RepoAbsy -> com[result]

TYPE resultD == okay(data: denotation)  
                undefined(msg: denotation) 
                unknown(msg: denotation) 

FUN evalD: unitName ** expr'RepoAbsy -> com[resultD]
FUN evalD: unitName ** expr'Expression ** fct'Expression ** fct'RepoAbsy ->
            com[resultD]

FUN asExpr: expr'RepoAbsy -> com[expr'Expression]

FUN setRepo: repo -> com[void]

-- %$Prepare evaluation$

-- %Check and compile units as necessary
FUN checkAndCompile: set[unitName, <] -> com[void]

-- %$Execution of commands$

FUN exec: unitName ** expr'Expression ** fct'RepoAbsy -> com[result]
