/* %Additional functions on sorts: check for indirect recursion or 
    equivalence of free type declaration and implementation. */

SIGNATURE SortHandling

IMPORT RepoName ONLY objectName:SORT
       Seq[variant] ONLY seq
       RepoAbsy ONLY variant:SORT component:SORT
       Repo ONLY repo:SORT
       Option[variant] ONLY option
       Option[component] ONLY option
       Option[objectName] ONLY option

-- %True, iff sort with given variants is indirect recursive
FUN indirectRec?: objectName -> repo -> bool

-- %True, iff variants match exactly (parts considered!)
FUN ~~ : repo -> seq[variant] ** seq[variant] -> bool

-- %Return associated variants, if present
FUN variants: objectName ** repo -> seq[variant]
-- %as above, but look in the @code{DATA} implementation
FUN dataVariants: objectName ** repo -> seq[variant]

-- %return type, of which object is a constructor
FUN find: repo -> objectName -> option[objectName]
-- %return type, of which object is a discriminator
FUN findD: repo -> objectName -> option[objectName]
-- %return constructor / discriminator-variant of given constructor
FUN findCon findDis: repo -> objectName ** seq[variant] -> option[variant]
-- %return selector component of given selector
FUN findSel: repo -> objectName ** seq[variant] -> option[component]

-- %true, iff object is a constructor
FUN constr? : objectName -> repo -> bool
-- %true, iff object is a selector
FUN sel? : objectName -> repo -> bool
-- %true, iff object is a discriminator
FUN discr? : objectName -> repo -> bool

-- %$Check for free type$
-- %Is variable a freetype variable?
FUN freeTV? : repo -> objectName -> bool
