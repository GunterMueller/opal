IMPLEMENTATION ExtendP

IMPORT RepoUnitAccess ONLY related transitive implImports symbol relMode relOp
       SetFilter ONLY partition
       UnitHandling ONLY theory?
       Set ONLY {}? set
       Denotation ONLY ++ +/+ <
       SetMap ONLY *
       InternCompile ONLY extendUnit diag failure? failure absy success success?
       RepoName ONLY < : unitName ** unitName -> bool
       Char ONLY char
       SetReduce ONLY /[denotation,<,denotation]
       Int ONLY int 2 0 -
       ComCompose ONLY &
       Pair ONLY unpair &
       RepoDiag ONLY transDiag shift ref
       Option ONLY avail option
       Compose ONLY o
       Com ONLY succeed
       InterOpal ONLY interOpal:SORT
       RepoSource ONLY locator:SORT

DEF extendUnitP(mainU, newText)(R) ==
  LET deps == related(transitive, implImports)(mainU)(R)
      (_, strs) == partition(theory?(R), deps)
      imports == IF strs {}? THEN "" 
                 ELSE "IMPORT " ++ 
                   (+/+(" "), "") /[denotation,<,denotation]
                   ((\\u1. symbol(u1)(R) ++ " COMP" ++ "LETELY") * strs)
                   ++ ""
                 FI

  IN
  extendUnit(mainU, imports ++ " " ++ newText, deps)(R) & (\\ ER.
  LET (E, R1) == unpair(ER)
      ds == transDiag(avail o shift(-(2), 0), diag(E))
  IN
  IF E failure? THEN succeed(failure(ds) & R1)
  IF E success? THEN succeed(success(ds, absy(E)) & R1)
  FI
  )
