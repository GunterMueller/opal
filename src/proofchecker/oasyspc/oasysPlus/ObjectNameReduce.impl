IMPLEMENTATION ObjectNameReduce

IMPORT FormulaHandling ONLY propertyS
       RepoAbsy COMPLETELY
       Seq ONLY seq forall?
       Option ONLY option nil avail
       Repo ONLY repo
       RepoAn ONLY an
       SeqReduce ONLY /
       SeqMap ONLY *
       RepoName ONLY baseName: propertyName -> propertyName

-- %$Check Names within formulae and expressions$

-- %Property names
DEF checkNamesPN(obj, +, N)(R)(pN) == 
    checkNames(obj, +, N)(propertyS(pN)(R))

-- %Properties
DEF checkNames(_, _, N)(freeType(_, _, _)) == N
DEF checkNames(obj, +, N)(law(_, _, f)) == checkNames(obj, +, N)(f)

-- Formulae
DEF checkNames(obj, +, N)(atomic(_, _, exprs)) == 
    (+, N) / checkNames(obj, +, N) *  exprs
DEF checkNames(obj, +, N)(connect(_, _, forms)) ==
    (+, N) / checkNames(obj, +, N) * forms
DEF checkNames(obj, +, N)(quant(_, _, _, _, range)) == 
    checkNames(obj, +, N)(range)

-- %Expressions
DEF checkNames(obj, _, _)(name(_, oper)) == oper obj
DEF checkNames(obj, +, N)(apply(_, f, a)) ==
    checkNames(obj, +, N)(f) + checkNames(obj, +, N)(a)
DEF checkNames(obj, +, N)(tuple(_, elems)) == 
    (+, N) / checkNames(obj, +, N) * elems
DEF checkNames(_, _, N)(den(_, _)) == N
DEF checkNames(obj, +, N)(cases(_, gs, nil)) ==
    (+, N) / checkNames(obj, +, N) * gs
DEF checkNames(obj, +, N)(cases(_, gs, avail(e))) ==
    (+, N) / checkNames(obj, +, N) * gs + checkNames(obj, +, N)(e)
DEF checkNames(obj, +, N)(lambda(_, _, _, b)) == checkNames(obj, +, N)(b)
DEF checkNames(obj, +, N)(let(_, es, b)) ==
    (+, N) / checkNames(obj, +, N) * es + checkNames(obj, +, N)(b)
DEF checkNames(obj, +, N)(as(_, _, e)) == checkNames(obj, +, N)(e)
DEF checkNames(_, _, N)(any(_)) == N

-- %Guards
DEF checkNames(obj, +, N)(guard(_, i, t)) ==
    checkNames(obj, +, N)(i) + checkNames(obj, +, N)(t)

-- %Equations
DEF checkNames(obj, +, N)(eqn(_, _, lhs, _, rhs)) ==
    checkNames(obj, +, N)(lhs) + checkNames(obj, +, N)(rhs)
