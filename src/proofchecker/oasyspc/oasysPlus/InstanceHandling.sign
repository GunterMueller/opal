/* %Some functions which work with parameters of a unit. */
SIGNATURE InstanceHandling

IMPORT RepoName ONLY unitName:SORT objectName:SORT < : objectName ** objectName -> bool localSignName:SORT propertyName:SORT
       Repo ONLY repo:SORT
       Map[objectName,<,objectName] ONLY map
       RepoAbsy ONLY component:SORT variant:SORT

/* %@code{deriveLike(Main)(import)}: If both units are
   parameterized units, the derived name of import is changed
   accordingly. Example: If @code{Main = set[nat, <]} and @code{import
   = seq[data]}, the result will be @code{seq[nat]}. */

FUN deriveLike: unitName -> repo ** unitName -> repo ** unitName

/* %@code{deriveLike(unitName)(R, prop) == (newR, newProp)}: @code{prop} is
   a property of the uninstantiated unit corresponding to
   @code{unitName}. @code{newProp} is the property instantiated as
   indicated by the instantiation in @code{unitName}. */
FUN deriveLike: unitName -> repo ** propertyName -> repo ** propertyName

-- %Similar for objectNames, localSignNames, variants, components
FUN deriveLike: unitName -> repo ** objectName -> repo ** objectName
FUN deriveLike: unitName -> repo ** localSignName -> repo ** localSignName
FUN deriveLike: unitName -> repo ** variant -> repo ** variant
FUN deriveLike: unitName -> repo ** component -> repo ** component

/* %Create a map wih renamings of formal parameters to parameters of
   given unit (should be a derived name). */
FUN instanceMap: unitName ** repo -> map[objectName, <, objectName]

/* %Rename object, iff defined in map */
FUN instantiate: map[objectName, <, objectName] -> objectName -> objectName

-- %Return true, if unit has parameters
FUN parameterized? : unitName -> repo -> bool
-- %Return true, if unit has no parameters
FUN monomorphic? : unitName -> repo -> bool