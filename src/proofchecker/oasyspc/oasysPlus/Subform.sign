/* %Search for subformulas. 
*/

SIGNATURE Subform[env:SORT]

IMPORT RepoAbsy ONLY formula:SORT
       Option[env] ONLY option
       LSeq[subformula] ONLY lseq

SORT env

/* %@code{subformula} returns the subformula found, 
    @code{replace(fNew)} returns the original formula with the subformula
    replaced by @code{fNew}, @code{env} is the additional data provided
    by the predicate.
*/

TYPE subformula == subformula(subformula: formula,
                              replace: formula -> formula,
                              env: env)

/* %The function is applied to a subformula and should return @code{nil},
    if the subformula is not wanted, @code{avail(x)} otherwise. The data
    is stored in the result.
*/

FUN findSubform: (formula -> option[env]) ** formula -> lseq[subformula]

/* %As above, with an additional stop predicate. The first function is not
    applied to a formula and its subformulas, if the predicate yields true.
*/

FUN findSubform: (formula -> option[env]) ** (formula -> bool) ** 
                  formula -> lseq[subformula]
