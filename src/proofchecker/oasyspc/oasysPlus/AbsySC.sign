/* %Shortcuts for functions dealing with the abstract syntax. */

SIGNATURE AbsySC

IMPORT RepoAbsy COMPLETELY
       Repo ONLY repo:SORT
       Seq[formula] ONLY seq[formula]:SORT
       Seq[objectName] ONLY seq[objectName]:SORT
       RepoAn ONLY an:SORT
       Seq[expr] ONLY seq[expr]:SORT

-- %$Expressions$
/* %If sequence has length 1, just return the single element,
    otherwise identical to @code{tuple'RepoAbsy} */
FUN tuple1: an ** seq[expr] -> expr
FUN apply1: an ** objectName ** seq[objectName] -> expr

-- %$$Without An$
FUN tuple1: seq[expr] -> expr
FUN apply1: objectName ** seq[objectName] -> expr
FUN apply1: objectName ** objectName -> expr
FUN apply1: objectName ** expr -> expr
FUN apply1: expr ** seq[objectName] -> expr

-- %other abbrevs

FUN ! : objectName -> expr

-- %$$Boolean Values$
FUN select: bool -> repo -> expr

-- %$Formulae$

FUN forall1: an ** seq[objectName] ** formula -> formula
FUN exist1: an ** seq[objectName] ** formula -> formula
 
FUN conj1: an ** seq[formula] -> formula
FUN disj1: an ** seq[formula] -> formula

-- %$$Without An$
FUN forall1: seq[objectName] ** formula -> formula
FUN forall1: objectName ** formula -> formula
FUN exist1: seq[objectName] ** formula -> formula
 
FUN conj1: seq[formula] -> formula
FUN disj1: seq[formula] -> formula

-- %special shortcuts
FUN cong: objectName ** objectName -> formula
FUN cong: expr ** expr -> formula
FUN dfd: objectName -> formula
FUN dfd: expr -> formula
FUN neg: formula -> formula
FUN equiv: formula ** formula -> formula
FUN impl: formula ** formula -> formula


-- %Lifting the different kinds to formula level
FUN dfd? approx? cong?
    neg? conj? disj? impl? equiv? 
    forall? exist? : formula -> bool

-- %$$transform formulas$
-- %flatten nested conjunction to single multi conjunction
FUN flatConj: formula -> formula


-- %$Functionality$
FUN fct: repo -> expr -> fct


-- %$Relations$
FUN = : atomicKind ** atomicKind -> bool
FUN = : connectKind ** connectKind -> bool
FUN = : quantKind ** quantKind -> bool

FUN = : expr ** expr -> bool
FUN = : guard ** guard -> bool
FUN = : eqn ** eqn -> bool
