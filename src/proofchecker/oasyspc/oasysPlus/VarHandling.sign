SIGNATURE VarHandling

IMPORT RepoAbsy ONLY object:SORT formula:SORT expr:SORT variant:SORT fct:SORT
       Repo ONLY repo:SORT
       RepoName ONLY localSignName:SORT unitName:SORT objectName:SORT
       Seq[objectName] ONLY seq[objectName]:SORT
       Seq[variant] ONLY seq[variant]:SORT
       Seq[fct] ONLY seq


/* %Handle local signatures for newly introduced variables

    Return a local signature, in which for every component a variable
    is defined. The local signature is associated to unit @code{PROOFSCRIPT}
    (HACK!)
*/

FUN newVars: repo ** seq[variant] -> repo ** localSignName

/* %Return new variables for every component; use tag to 
    make names unique */
FUN newVars: repo ** variant **
              localSignName ** denotation -> repo ** seq[objectName]

/* %To be called with the result from @code{newVars} above and
    the objectName of a selector. Returns the canonical variable. */
FUN asVar: repo -> localSignName ** objectName -> objectName

/* %return a local signature and two sequences of variables for the
    supplied constructors. */

FUN newVars: repo ** variant ** variant ->
              repo ** localSignName ** seq[objectName] ** seq[objectName]

/* %return new variables with the specified functionalities in
    a new local signature in given unit. */
FUN newVars: repo ** unitName ** localSignName ->
              seq[fct] -> repo ** seq[objectName]

/* %return new variables with the specified functionalities in
    given local signature */
FUN newVars: repo ** localSignName ** denotation ->
              seq[fct] -> repo ** seq[objectName]

/* %add variable for specified sort and return it */
FUN newTypeVar: objectName -> repo -> objectName ** repo


FUN toImpl: objectName -> objectName
-- %restrict renaming to names from unit
FUN toImpl: unitName -> objectName -> objectName

-- %if sort of any variable is from given unit, change that
FUN toImplVars: unitName -> repo ** formula -> repo ** formula
FUN toImplVars: unitName -> repo ** expr -> repo ** expr

/* %@code{changeVars(f, new)} changes the variables in the formula or
    expression. @code{f} yields the corresponding new object when given
    the old variable, @code{new} indicates how to obtain a fresh
    local signature. */
FUN changeVars: (object -> object) ** (repo -> localSignName ** repo) ->
                 repo ** expr -> repo ** expr
FUN changeVars: (object -> object) ** (repo -> localSignName ** repo) ->
                 repo ** formula -> repo ** formula
