/* %Manage annotations for pretty printing of expressions.
    Currently, we store the information, how many arguments
    are to be printed on the left of the function name.

    In a repo annotation we store the set of unique names (which do not
    need Qualification)                                                           
*/

SIGNATURE PrettyAn

IMPORT RepoEvent ONLY event:SORT
       Repo ONLY repo
       Com[repo] ONLY com
       RepoName ONLY objectName unitName:SORT
       Option[nat] ONLY option
       Nat ONLY nat


-- %$Infix and Mixfix printing$

/* %If absy of a unit has been updated, check pragmas
    for pragmas of type @code{/$ prettyfix [n1, n2, ...] # $/}
    where @code{#} is a number which defines, how many arguments should
    be printed to the left.
*/

FUN updatePrettyAn: event -> repo -> com[repo]

/* %If prettyfix information is available, return it. */
FUN infix: repo -> objectName -> option[nat]

-- %$Uniqueness of identifiers$

/* %Compute uniqueness information for units which are known in the
    argument unit. 
*/
FUN updateUniqAn: unitName -> repo -> repo

-- %reset uniqueness annotation
FUN resetUniqAn: repo -> repo

/* %return true, iff objectname is unique according to current annotation 
*/
FUN uniq: repo -> objectName -> bool

-- %$Fullness of Identifiers$
-- %first for Origin, second for instance
FUN setFullness: repo ** bool ** bool -> repo

FUN origin? : repo -> bool
FUN instance? : repo -> bool