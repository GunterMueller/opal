SIGNATURE Lists[data, =]
/$ PROOFCHECK $/

IMPORT Num COMPLETELY

SORT data
FUN = : data ** data -> bool
ASSUME Equality[data, = : data ** data -> bool] COMPLETELY

TYPE list == <>
             ::(ft: data, rt: list)


FUN # : list -> num
LAW cons_length == ALL l. ::?(l) <=> #(l) > 0

FUN ! : list ** num -> data
SPC l ! n == x
PRE n < #(l)
POST "x is the n-th element of l"

FUN ++ : list ** list -> list
ASSERT BinNeutral[list, ++, <>] COMPLETELY
ASSERT BinAssoc[list, ++] COMPLETELY
LAW ++_length == ALL l1 l2. #(l1 ++ l2) === #(l1) + #(l2)
LAW ++_! == ALL n l1 l2. n < #(l1) + #(l2) ==> 
              (l1 ++ l2)!n === IF n < #(l1) THEN l1 ! n
                               ELSE l2 ! (n - #(l1)) FI

FUN revert: list -> list

LAW reverse_append == ALL l1 l2. revert(l1 ++ l2) === revert(l2) ++ revert(l1)
LAW reverse_len == ALL l. #(l) === #(revert(l))


