SIGNATURE Num
/$ PROOFCHECK $/

TYPE num == 0
            succ(pred: num)

FUN asDeno: num -> denotation

FUN >= : num ** num -> bool
SPC a >= b == c
PRE true
POST 0?(b) ==> c 
LAW >=_def == ALL a b. a >= b <=> EX x. a === b + x

FUN = : num ** num -> bool
SPC a:num = b == c
POST c <=> a:num === b

ASSERT RelTrans[num, >=] COMPLETELY
ASSERT RelAntisym[num, >=] COMPLETELY
ASSERT RelRefl[num, >=] COMPLETELY
LAW >=_total == ALL a b. DFD a >= b  
LAW succ_mon_>= == ALL a b. a >= b ==> succ(a) >= b
LAW tricho_>= == ALL a b. a >= b OR b >= a

FUN < : num ** num -> bool
SPC a:num < b == c
POST a < b <=> NOT a >= b

FUN > : num ** num -> bool
SPC a > b == c
PRE true
POST c <=> b < a

LAW succ_> == ALL a. succ(a) > 0
ASSERT RelIrrefl[num, >] COMPLETELY

FUN + : num ** num -> num
ASSERT BinNeutral[num, +, 0] COMPLETELY
LAW +_succ == ALL a b. succ(a) + b === succ(a + b)
LAW +_succ_r == ALL a b. a + succ(b) === succ(a + b)
LAW +_total == ALL a b. DFD a + b

FUN - : num ** num -> num
SPC a - b == c
PRE a >= b
POST c + b === a

FUN min: num ** num -> num
SPC min(a, b) == c
PRE true
POST a >= c AND b >= c AND ((c === a) OR (c === b))
LAW min_total == ALL a b. DFD min(a, b)

FUN max: num ** num -> num
SPC max(a, b) == c
PRE true
POST c >= a AND c >= b AND ((c === a) OR (c === b))
LAW max_total == ALL a b. DFD max(a, b)

FUN 1: num
LAW 1_def == 1 === succ(0)