IMPLEMENTATION Sort
/$ PROOFCHECK $/

IMPORT Bag ONLY bag =
       Nat ONLY nat < 0 1 2 3
       BagConv ONLY asBag
       Seq ONLY seq :: <>
       Pair ONLY pair

       ProofByTest ONLY test
       REFLEXIONS COMPLETELY


DEF sort(<>) == <>  -- ~empty sequence is sorted
DEF sort(a :: R) == a :: sort(R)

PROOF sort: |- Copy[Spc[sort'Sort]:LAW]
PROOF sort == test[sort'Sort, seq[nat]]
  (sort(<>) ::
   sort(1 :: 2 :: 3 :: <>) ::
   sort(3 :: 2 :: 1 :: <>) ::
   sort(2 :: 3 :: 1 :: <>) ::
   <>)

DEF S permutation T == asBag[nat, <](S) = asBag[nat, <](T)

DEF ascending(<>) == true
DEF ascending(a :: <>) == true
DEF ascending(a :: b :: R) == a < b and ascending(b :: R)