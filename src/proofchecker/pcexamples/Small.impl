IMPLEMENTATION Small
/$ PROOFCHECK $/

IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       CalcPP COMPLETELY
       REFLEXIONS COMPLETELY
       ProofTactics COMPLETELY
       ProofByTest COMPLETELY

       Nat ONLY nat succ 0 >= < 1 2 3 0?
       Seq ONLY seq <> ::
       Pair COMPLETELY

-- %This proof fails
PROOF skolem1 : |- Copy[skolem1:LAW]
PROOF skolem1 ==  traceP(ex_r; all_r; equiv_refl_u)

-- %This proof succeeds
PROOF skolem2 : |- Copy[skolem2:LAW]
PROOF skolem2 == traceP(all_r; ex_r; equiv_refl_u; assume)

-- %This function is synthesized and inserted into the compiled code
FUN f: nat ** nat -> nat
SPC f(a, b) == r
PRE true
POST r === succ(succ(a))

PROOF f : dfd_succ |- Spc[f]
PROOF f == traceP(unskolem; opalR; *(bLogic); lambda_extUN; equiv_refl_u;
                   dfd_lambda; lambda_reduce; tApartS)

-- %Proof by test

LAW dfd_succ == ALL a. DFD succ(a)
PROOF dfd_succ : |- dfd_succ
PROOF dfd_succ == test[succ, nat](succ(0) :: succ(succ(0)) :: <>)
