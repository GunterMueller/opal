IMPLEMENTATION WhiteBox

IMPORT DefEqnHandling ONLY lVars
       SeqFold ONLY /
       RepoAbsy COMPLETELY
       Seq ONLY seq :: <> # ft ++ % <>? rt
       SeqOfSeq ONLY flat
       Pair ONLY pair &
       RepoObjectAccess ONLY impl
       Nat ONLY 1 |=
       RepoDiag ONLY error freeRef !! ok mode ref
       Fmt ONLY pretty
       PrettyFormatting ONLY fmtObjectNameLong prettyEqn prettyExpr
       SeqMap ONLY *
       Option ONLY avail? cont option avail
       RepoAn ONLY none
       PredefEntities ONLY true not and false
       String ONLY string
       AbsySC ONLY apply1 tuple1
       DEBUG ONLY PRINT
       Denotation ONLY ++
       OSubstitution ONLY subst def {} <$


FUN dbWhiteBox? : bool
DEF dbWhiteBox? == false

DEF allGuards(R, oN) ==
  LET i == impl(oN)(R)
  IN
  IF i def? THEN
    IF #(eqns(i)) |= 1 THEN okay(<>,((error, freeRef("allGuards")) !! 
                                     ("need 1! equation for `%s'", 
                                      pretty(fmtObjectNameLong(R)(oN)))))
    ELSE
      LET dg == PRINT(dbWhiteBox?, \\ . "allGuards: " ++
                      pretty(prettyEqn(R)(ft(eqns(i)))), ok)
      IN
      okay(unfoldEqn(R)(ft(eqns(i))), dg)
    FI
  ELSE
    okay(<>, ((error, freeRef("allGuards")) !! 
              ("no definition found for `%s'", 
               pretty(fmtObjectNameLong(R)(oN)))))
  FI

FUN unfoldEqn: repo -> eqn -> seq[expr]
DEF unfoldEqn(R)(eqn(a, lS, lhs, pat, rhs)) ==
  IF rhs cases? THEN
    LET iExprs == flat(unfoldGuard(R) * guards(rhs))
        elseExpr == IF else(rhs) avail? THEN
                      unfoldGuard(R)(guard(none, negate(R, guards(rhs)),
                                           cont(else(rhs))))
                    ELSE
                      <>
                    FI
    IN
      (\\ e. lambda(none, lS, lVars(lhs), e)) * (iExprs ++ elseExpr)
  IF rhs let? THEN
    unfoldEqn(R)(eqn(a, lS, lhs, pat, unfoldLet(rhs)))
  ELSE
    %(lambda(none, lS, lVars(lhs), true(R)))
  FI
  
FUN negate: repo ** seq[guard] -> expr
DEF negate(R, gs) ==
  LET ifs == if * gs
      mkNot == apply1(not(R), _)
      mkAnd == \\ e1, e2. apply1(and(R), tuple1(%(e1, e2)))
  IN
  mkAnd / mkNot * ifs

FUN unfoldGuard: repo -> guard -> seq[expr]
DEF unfoldGuard(R)(guard(_, i, t0)) ==
  LET t == PRINT(dbWhiteBox?, \\ . "unfolding guard: " ++ 
                 "IF " ++ pretty(prettyExpr(R)(i)) ++ " THEN " ++
                 pretty(prettyExpr(R)(t0)), t0)
  IN
  IF t cases? THEN
    LET iExprs == flat(unfoldGuard(R) * guards(t))
        elseExpr == IF else(t) avail? THEN
                      unfoldGuard(R)(guard(none, negate(R, guards(t)),
                                           cont(else(t))))
                    ELSE
                      <>
                    FI
    IN
    (\\ e. cases(none, %(guard(none, i, e)), avail(false(R))) ) *
    (iExprs ++ elseExpr)
  ELSE
    %(i)
  FI

FUN unfoldLet: expr -> expr
DEF unfoldLet(let(an, eqs, e)) ==
  IF eqs <>? THEN e
  ELSE
    LET oN == oper(lhs(ft(eqs)))
    IN
    unfoldLet(def(oN, rhs(ft(eqs)), {}) <$ let(an, rt(eqs), e))
  FI