/* %Rules which deal with the special domain theoretic predicates, namely
    equiv @code{===}, approx @code{<<=} and defined @code{DFD}. */

SIGNATURE CalcDomain

-- %$Equivalence$
/* %eliminate all occurences of @code{F === false} or @code{false === F}
    by putting the formula @code{F === true} on the other side of the
    sequent. */

FUN equiv_false: proofscript 

/* %remove all sequents with @code{E === E} in proposition */
-- %without unification
FUN equiv_refl: proofscript   
-- %with unification
FUN equiv_refl_u: proofscript 

/* %replace some outermost expression on the right hand side with an
    equivalent one. */
FUN subst_r: proofscript

-- %as above, but consider all subexpressions
FUN subst_r_deep: proofscript

-- %and the same for the left hand side
FUN subst_l: proofscript
FUN subst_l_deep: proofscript

-- %Use equivalences only in left-to-right direction, on the rhs or the lhs
FUN rewrite_r_deep: proofscript
FUN rewrite_l_deep: proofscript
FUN rewrite_l_deepN : proofscript  -- rewrite new formulae only
-- % do not eliminate trivial goals
FUN rewrite_l_deepF: proofscript
FUN rewrite_l_deepNF : proofscript  -- rewrite new formulae only

-- %Use equivalences only in right-to-left direction
FUN contrawrite_r_deep: proofscript

-- %@code{A => B === C  |- B === D} becomes @code{|- A, |- C === D}
FUN crewrite_r_deep: proofscript

-- %$Definedness$

/* %add all @code{DFD F} formulae on the left side for formulae
    @code{DFD E, E===F} on the left side. */

/* %This rule may produce infinetely many new hypotheses and should not be
    used with @code{*}-tactical. */
FUN dfd_equiv: proofscript 

/* %Try to unify @code{DFD F} on the right side with formulae
    @code{DFD E, E === F} on the left side. */
FUN dfd_equiv_r: proofscript

/* %removes any subgoal with @code{|- DFD E, DFD F, E === F} */
FUN undefinedness: proofscript