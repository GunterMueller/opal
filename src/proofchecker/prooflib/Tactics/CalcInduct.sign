/* %This unit defines the induction rule on free types. This is different
    from the @sc{Opal} calculus. Instead of defining a containment predicate
    we define a rule for every available free type. */

SIGNATURE CalcInduct

IMPORT RepoAbsy ONLY object:SORT

/* %The following tactics backtrack over all possibilities, i.e. all
    outer variables of the type given as object argument. */

-- %$Case introduction$
/* %Replace a proposition 
    @code{ALL x. A(x) by ALL n1 ... nk. A(c(n1, ..., nk))} for every
    constructor @code{c} of the given sort. */ 
FUN cases: object -> proofscript 

-- %$Induction$
/* %Replace a proposition 
    @code{ALL x. A(x) by ALL n1 ... nk. A(nj) AND ... =>
    A(c(n1, ..., nk))} for every
    constructor @code{c} of the given sort, where @code{nj} are indices of
    components of the same sort. 

    If quantified variables remain the quantifier is placed outermost. 
    This is nice for repeated application of the induction tactic,
    but weaker than the following @code{xInduct}.
*/ 
FUN induct: object -> proofscript 

/* %As above, treats formulae @code{ALL a b. F[a, b]} as 
    @code{ALL a. ALL b . F[a,b]}. More complicated structure of the subgoals,
    but stronger assumptions.
*/
FUN xInduct: object -> proofscript

/* %Induct on a free variable of the specified sort, which does not
    occur on the left hand side of a sequent. */
FUN rInduct: object -> proofscript

/* %Multi-Induction: perform multiple induction on all variables
    of free sorts of a given formula. */
FUN mInduct: proofscript

-- %$Noetherian Induction$
/* %Argument is a function @code{f} with codomain @code{nat'Nat}. Replaces a
    proposition @code{ALL x. P(x)} by @code{ALL x. (ALL y. f(y) < f(x) ==> 
    P(y)) ==> P(x)}, where @code{<} is the less predicate from @code{Nat}.
    Hence, this proofscript relies on the fact that (@code{nat, <}) is
    from the library is a well-founded set.

    @b{Note:} This proofscript does not check, whether @code{<'Nat} is in
    the scope of the current structure, but you won't be able to take
    advantage of this proofscript.

    This proofscript fails, if the function's codomain is not @code{nat'Nat}
    or no suitable formula is found. 
*/
FUN noetherInduct: objectName -> proofscript