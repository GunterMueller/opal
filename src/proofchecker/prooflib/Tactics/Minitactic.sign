SIGNATURE Minitactic

IMPORT Repo ONLY repo:SORT
       RepoName ONLY localSignName:SORT
       LSeq[pair] ONLY lseq:SORT
       LSeq[triple] ONLY lseq:SORT
       Pair[seq[sequent], subst] ONLY pair:SORT
       Triple[seq[sequent], subst, fmt] ONLY triple:SORT
       OSubstitution ONLY subst:SORT
       Seq[sequent] ONLY seq:SORT
       Fmt ONLY fmt:SORT
       Sequent ONLY sequent:SORT

/* %Lifting of a minitactic which performs unification. Arguments are
    a function which is called for every sequent. This sequent function has
    as higher-order arguments the current repositiory, the unknowns and the
    free variables.
*/


FUN liftU: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[pair[seq[sequent], subst]]) -> proofscript

-- %$Variants$
-- %Sequent-Function returns additional information to be added to the trace
FUN liftUT: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[triple[seq[sequent], subst, fmt]]) -> proofscript

/* %As above, but perform additionally a check and remove states, which contain
   formulae with double formulae in the hyptheses. */

FUN liftUF: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[pair[seq[sequent], subst]]) -> proofscript

FUN liftUFT: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[triple[seq[sequent], subst, fmt]]) -> proofscript

/* %remove states with @code{equivalent} (instead of equal) formulas 
    (only first formula is checked */
FUN liftUQT liftUQTd: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[triple[seq[sequent], subst, fmt]]) -> proofscript

/* %additional remove states which contain new
    trivial hypotheses @code{E === E} or @code{F <=> F} */
FUN liftUL: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[pair[seq[sequent], subst]]) -> proofscript

FUN liftULT: fmt ** (repo ** localSignName ** localSignName ->
           sequent -> lseq[triple[seq[sequent], subst, fmt]]) -> proofscript