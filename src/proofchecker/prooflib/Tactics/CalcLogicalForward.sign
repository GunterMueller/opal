/* %Sometimes forward proof is the best thing to do. This structure
    contains tactics for forward proof. Note that these tactics generally
    belong to the more expensive ones: There are more possibilities
    to generate; and in order to make these rules applicabel for
    repetition, a check is performed, whether a newly generated formula
    is already contained in the old ones.
*/

SIGNATURE CalcLogicalForward

/* %From @code{A <=> B, A |- } produce @code{A <=> B, A, B} */
FUN biimpl_l: proofscript
FUN biimpl_lN: proofscript  -- %accept only new formulae for A

/* %From @code{A => B, A |- } produce @code{A => B, A, B} */
FUN impl_l: proofscript
FUN impl_lN: proofscript  -- %accept only new formulae for A
/* %From @code{A AND B AND ... => Z, A |- } 
    produce @code{B AND ... => Z, A |-} */
FUN impl_l_deep: proofscript
-- %as above, additionally treat biimplications as implications
FUN impl_l_deep2: proofscript
FUN impl_l_deep2_debug: proofscript
-- % ... in both directions
FUN impl_l_deep3: proofscript
-- %remove as many formulae as possible
FUN impl_l_deep4: proofscript

-- %as above, but delete formula from left side
FUN impl_l_deepD: proofscript
-- %as above, additionally treat biimplications as implications
FUN impl_l_deepD2: proofscript
-- %as above, but use only biimplications (only from left to right)
FUN biimpl_l_deepD: proofscript
