/* %Some useful combinations of tactics */

SIGNATURE Strategies

-- %Standard proof
FUN FORMALPROOF: proofscript -> proofscript

-- %Statistic and show final state if not finished
FUN statP: proofscript -> proofscript

-- %simple induction and rewriter
FUN simpleP: proofscript

-- %another simple proof: induction then opal, deleter, rewriter
FUN simpleP2: proofscript

-- %just take proof apart
FUN trivial: proofscript

-- %Statistics and trace
FUN traceP itraceP: proofscript -> proofscript

-- %$Simple Logic$
-- %Alternative of proofscripts which remove one or more subgoals
FUN deleter: proofscript -- equiv_refl ?assume
FUN deleter2: proofscript -- deleter | dfd_equiv_r (second place)
FUN deleter3: proofscript -- deleter | dfd_equiv_r (last place)

-- %apply logic, allR, exL
FUN bLogic bLogicQ: proofscript
FUN bLogicAlt: proofscript

-- %take sequents apart with deleter2 and bLogic
FUN tApart tApartO tApartS tApartSQ: proofscript

-- %specify what to do, if tApartS does not apply
FUN tApartS tApartSQ: proofscript -> proofscript

-- %additionally apply subgoal(impl_l)
FUN tApartI: proofscript

-- %additionally try mp_r
FUN tApartM: proofscript

-- %``light'' - do not apply rules which might define substitution for unknowns
FUN tApartL: proofscript
FUN tApartLL: proofscript  -- no quantifier rules, no doubling of states

-- %$Opal-related$
FUN opalR: proofscript   -- block | cases

FUN opalL: proofscript -- block
FUN opalLs: proofscript -- tApartS and block

-- %$Induction$
-- %Induction starter: induction, then logic and deleters
FUN inductStart: proofscript
-- %Induction starter: induction, then logic and deleters2
FUN induct2Start: proofscript


-- %$Equational reasoning$
-- %rewrite_r_deep until maximum effect reached
FUN rewriter: proofscript
-- %try also crewrite_r_deep
FUN rewriter2: proofscript
-- %tApart|rewriter_r
FUN rewriter3 rewriter33 rewriter3L rewriter30: proofscript
-- %first Opal rules
FUN rewriterO: proofscript
-- %opal, deleter (no dfd_equiv_r), bLogic, rewriter_r_deep
FUN rewriterO4 rewriterO4Q: proofscript

-- %$Forward Proofs$
-- %all consequences (tries to minimize spin-offs)
FUN conseq: proofscript
FUN conseq1: proofscript -- no repetition

-- %all `long' consequences 
FUN conseqQ: proofscript
FUN conseqQ1: proofscript -- no repetition