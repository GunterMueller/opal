/* %Computational rules, i.e. rules which deal with @sc{Opal} language
    constructs. */

SIGNATURE CalcComputational


-- %$Names$

/* %-application of discriminators are defined. 
    Hence, apply the axiom  @code{DFD c?(x1, @dots{})} 
FUN discr_dfd: proofscript
*/

-- %$Tuples$
-- %$Application$

-- %$Block$

/* %Replace all let variables by their rhs and add a definedness condition
    (remember that @sc{let} is eager in @sc{Opal}). 
*/
FUN block_reduce: proofscript

FUN block_reduceL: proofscript

-- %$Abstraction$
-- %accept all lambda expressions as defined
FUN dfd_lambda: proofscript

/* %replace formula @code{ALL x. f(x) === E} by
    @code{f === \\x.E}. @code{f} is the first argument. */
FUN lambda_ext: objectName -> proofscript
-- %require objectName to be a unknown variable
FUN lambda_extUN : proofscript 

/* %replace some @code{(\\ x. f(x))(E)} with @code{f(E) AND DFD(E)} ;
    only on the right-hand side, and only atomic formulae */
FUN lambda_reduce: proofscript

-- %$Cases$

/* %Unfold outer @code{IF} expressions (either @code{DFD IF..FI}
    or @code{e1 === IF..FI} or @code{IF..FI === e}) in formulae. */

FUN cases_reduce: proofscript

FUN cases_reduceL: proofscript

-- %$Denotations$

/* %all denotations are defined */

FUN dfd_deno: proofscript