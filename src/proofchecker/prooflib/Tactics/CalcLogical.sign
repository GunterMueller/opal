/* %This unit contains (a selection of) logical rules from the @sc{Opal}
    calculus. */

SIGNATURE CalcLogical

IMPORT ProofTactics ONLY microtactic:SORT

-- %$Tactics$
-- %apply simple, safe logical rules
FUN logic: proofscript  
-- %only on the right side
FUN logic_r: proofscript 
-- %use alternative rules 
FUN logicAlt : proofscript  
-- %`light' version - no rules which produce two subgoals
FUN logicL: proofscript   

/* %From @code{A ==> B |- B} produce @code{A ==> B |- A} */
FUN mp_r: proofscript
FUN mp_r2: proofscript  -- handle chained implications
FUN mp_r3: proofscript  -- look also in rhs conjunctions

-- %All quantifier (N: only new formulae) (A: all formulae)
FUN all_r all_l all_lA all_lN all_lNA: proofscript

/* %Note: @code{allL} will not handle formulae which are consist of
    equalities or conditional equalities. Use
   the rewrite family of rules in these cases. */

-- %Ex quantifier (N: only new formulae)
FUN ex_l ex_r ex_rN: proofscript

/* %Try to match one of the propositions with a subformula in the 
    hypotheses. */
FUN match_deep: proofscript

-- %Merge quantifiers @code{ALL a. ALL b. P} becomes @code{ALL a b.P}
FUN mergeQ: proofscript

/* %From @code{A <=> B |- B} produce @code{A <=> B |- A} */
FUN biimpl_r: proofscript


-- %$Microtactics$

FUN notL notR implR: microtactic
FUN andL : microtactic
FUN orR: microtactic
FUN andR orL implL biimplL biimplR: microtactic

-- %just replace implication by not and or
FUN implRalt: microtactic
-- %handle negated implication on the right
FUN implNotR andNotR orNotR notNotR biimplNotR: microtactic

FUN implNotNotL: microtactic

-- %alternative of all L or R rules resp.
FUN standardL standardR : microtactic
FUN standardLalt standardRalt : microtactic
