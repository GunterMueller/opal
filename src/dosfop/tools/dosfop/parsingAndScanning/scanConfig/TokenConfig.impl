IMPLEMENTATION TokenConfig
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/parsingAndScanning/scanConfig/TokenConfig.impl,v 1.1.1.1 1998-06-16 16:00:38 wg Exp $

IMPORT String 		COMPLETELY
       Denotation 	COMPLETELY
       MapByBST     COMPLETELY
       Char         COMPLETELY
       Funct        COMPLETELY
       Option       COMPLETELY
       StringConv   COMPLETELY

IMPORT Pos    		COMPLETELY


-- %$Token Implementation$
-- %----------------------
/* %The @DATA-definition matches the corresponding @TYPE-definition of the
signature-part: */
DATA token ==
-- keywords
              USER_GLOBAL   ( pos : pos )
              MACROS        ( pos : pos )
              OPTIONAL      ( pos : pos )
              STRUCTURES    ( pos : pos )
              STRUCTURE     ( pos : pos )
              SUBSYSTEM     ( pos : pos )
              END_SUBSYSTEM ( pos : pos )
              LIBRARY       ( pos : pos )
              SURVEY        ( pos : pos )
              equal         ( pos : pos )
              colon         ( pos : pos )

-- option settings:
              directoryName          ( repr : string, pos : pos )
              string                 ( repr : string, pos : pos )
              macroname              ( repr : string, pos : pos )
              texinfo                ( repr : string, pos : pos )
              on                     ( pos : pos )
              off                    ( pos : pos )
              on_no_sub              ( pos : pos )
              on_no_struct           ( pos : pos )
              on_low_verb            ( pos : pos )
              on_medium_verb         ( pos : pos )
              on_no_verb             ( pos : pos )
              on_no_libs             ( pos : pos )
              on_no_libs_medium_verb ( pos : pos )
              on_no_libs_low_verb    ( pos : pos )
              on_no_libs_no_verb     ( pos : pos )
              german                 ( pos : pos )
              english                ( pos : pos )
              top_down                ( pos : pos )
              bottom_up               ( pos : pos )
              alphabetically         ( pos : pos )
              user_defined            ( pos : pos )

-- option names:
              top_structure ( pos : pos )
              output_file   ( pos : pos )
              project_name  ( pos : pos )
              authors       ( pos : pos )
              date          ( pos : pos )

              functionality_index ( pos : pos )
              concept_index       ( pos : pos )
              application_index   ( pos : pos )
              structure_index     ( pos : pos )

              subsystems_include  ( pos : pos )
              library_include     ( pos : pos )
              properties_include  ( pos : pos )
              only_interfaces     ( pos : pos )
              sort_structures      ( pos : pos )

              language             ( pos : pos )
              hierarchy_visu       ( pos : pos )
              new_pages            ( pos : pos )
              import_references    ( pos : pos )
              used_function_tables ( pos : pos )
              levels               ( pos : pos )
              drop_empty_lines     ( pos : pos )
              single_node          ( pos : pos )

              name      ( pos : pos )
              directory ( pos : pos )

              error ( reason : denotation, pos : pos )


-- %$Token Generation from Strings$
-- %-------------------------------
FUN stringAndPos2KeywordToken : string ** pos -> token

/* %We implement the token generation with the help of a map which contains the
keywords and the associated tokens. As @OPAL does not allow to use function
types for instantiating, we must use the @c{funct} type.  */
DEF stringAndPos2KeywordToken( str, pos ) ==
    LET lookup == tokenConfigMap !? (str`)
    IN
-- %@c{str} defined in the map, hence construct the associated token.
        IF lookup avail? THEN cont(lookup) @ pos
/* %Produce an error-token as the searched @c{str} is not member of the set of
keywords: */
        ELSE error("unknown keyword `" ++ (str`) ++ "' at ", pos)
        FI

FUN tokenConfigMap: map[denotation, <, funct[pos, token]]
DEF tokenConfigMap ==
  def("USER_GLOBAL", asFunct(USER_GLOBAL),
  def("OPTIONAL", asFunct(OPTIONAL),
  def("MACROS", asFunct(MACROS),
  def("STRUCTURES", asFunct(STRUCTURES),
  def("STRUCTURE", asFunct(STRUCTURE),
  def("SUBSYSTEM", asFunct(SUBSYSTEM),
  def("END_SUBSYSTEM", asFunct(END_SUBSYSTEM),
  def("LIBRARY", asFunct(LIBRARY),
  def("SURVEY", asFunct(SURVEY),
  def("on", asFunct(on),
  def("off", asFunct(off),
  def("on_no_sub", asFunct(on_no_sub),
  def("on_no_struct", asFunct(on_no_struct),
  def("on_medium_verb", asFunct(on_medium_verb),
  def("on_low_verb", asFunct(on_low_verb),
  def("on_no_verb", asFunct(on_no_verb),
  def("on_no_libs", asFunct(on_no_libs),
  def("on_no_libs_medium_verb", asFunct(on_no_libs_medium_verb),
  def("on_no_libs_low_verb", asFunct(on_no_libs_low_verb),
  def("on_no_libs_no_verb", asFunct(on_no_libs_no_verb),
  def("german", asFunct(german),
  def("english", asFunct(english),
  def("top_structure", asFunct(top_structure),
  def("output_file", asFunct(output_file),
  def("project_name", asFunct(project_name),
  def("authors", asFunct(authors),
  def("date", asFunct(date),
  def("functionality_index", asFunct(functionality_index),
  def("concept_index", asFunct(concept_index),
  def("application_index", asFunct(application_index),
  def("structure_index", asFunct(structure_index),
  def("subsystems_include", asFunct(subsystems_include),
  def("library_include", asFunct(library_include),
  def("properties_include", asFunct(properties_include),
  def("only_interfaces", asFunct(only_interfaces),
  def("language", asFunct(language),
  def("hierarchy_visu", asFunct(hierarchy_visu),
  def("new_pages", asFunct(new_pages),
  def("import_references", asFunct(import_references),
  def("used_function_tables", asFunct(used_function_tables),
  def("levels", asFunct(levels),
  def("drop_empty_lines", asFunct(drop_empty_lines),
  def("name", asFunct(name),
  def("directory", asFunct(directory),
  def("sort_structures", asFunct(sort_structures),
  def("top_down", asFunct(top_down),
  def("bottom_up", asFunct(bottom_up),
  def("alphabetically", asFunct(alphabetically),
  def("user_defined", asFunct(user_defined),
  def("single_node", asFunct(single_node),
  {}))))))))))))))))))))))))))))))))))))))))))))))))))

