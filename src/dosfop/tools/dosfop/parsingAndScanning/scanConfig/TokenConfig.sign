/* %The module defines the lexical unit for the DOSFOP-configuration language. Because
of the nature of being a tool for @b{configuration} the amount of tokens is quite
large, especially in comparison with the token-type used for the lexical structuring
of the programming language @OPAL. */
SIGNATURE TokenConfig
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/parsingAndScanning/scanConfig/TokenConfig.sign,v 1.1.1.1 1998-06-16 16:00:38 wg Exp $

IMPORT String 	ONLY string
IMPORT Pos 	ONLY pos:SORT


/* %All token-type variants encompass a @c{pos} component, denoting the position
of the lexem in the currently scanned source-file. */

TYPE token ==
/* %The @emph{keyword}-tokens do not need any representation as the names correspond
to the the respective configuration-languge-keyword they represent. The following 
keywords are used for structuring the configuration components and for
establishing semantical units within one configuration database. */
              USER_GLOBAL   ( pos : pos )
              MACROS        ( pos : pos )
              OPTIONAL      ( pos : pos )
              STRUCTURES    ( pos : pos )
              STRUCTURE     ( pos : pos )
              SUBSYSTEM     ( pos : pos )
              END_SUBSYSTEM ( pos : pos )
              LIBRARY       ( pos : pos )
              SURVEY        ( pos : pos )
              equal         ( pos : pos )
              colon         ( pos : pos )

/* %The following lexical units handle the configuration "in the small". The token-types
of the first group denote the different token-settings. As not all of the allowed 
settings are done by using constants, the first four token represent units of
variable lexem-representations. The variable part is stored in the @c{repr}-variant: */
              directoryName          ( repr : string, pos : pos )
              string                 ( repr : string, pos : pos )
              macroname              ( repr : string, pos : pos )
              texinfo                ( repr : string, pos : pos )
              on                     ( pos : pos )
              off                    ( pos : pos )
              on_no_sub              ( pos : pos )
              on_no_struct           ( pos : pos )
              on_low_verb            ( pos : pos )
              on_medium_verb         ( pos : pos )
              on_no_verb             ( pos : pos )
              on_no_libs             ( pos : pos )
              on_no_libs_medium_verb ( pos : pos )
              on_no_libs_low_verb    ( pos : pos )
              on_no_libs_no_verb     ( pos : pos )
              german                 ( pos : pos )
              english                ( pos : pos )
              top_down               ( pos : pos )
              bottom_up              ( pos : pos )
              alphabetically         ( pos : pos )
              user_defined           ( pos : pos )

/* %The final main group of (valid) configuration-language token is a collection
of all possible lexical units denoting @emph{option-types}. Please refer to the 
Dipolomarbeit for a detailed description of the applicability and semantics of 
a paticular option-type. */
              top_structure ( pos : pos )
              output_file   ( pos : pos )
              project_name  ( pos : pos )
              authors       ( pos : pos )
              date          ( pos : pos )

              functionality_index ( pos : pos )
              concept_index       ( pos : pos )
              application_index   ( pos : pos )
              structure_index     ( pos : pos )

              subsystems_include  ( pos : pos )
              library_include     ( pos : pos )
              properties_include  ( pos : pos )
              only_interfaces     ( pos : pos )
              sort_structures     ( pos : pos )

              language             ( pos : pos )
              hierarchy_visu       ( pos : pos )
              new_pages            ( pos : pos )
              import_references    ( pos : pos )
              used_function_tables ( pos : pos )
              levels               ( pos : pos )
              drop_empty_lines     ( pos : pos )
              single_node          ( pos : pos )

              name      ( pos : pos )
              directory ( pos : pos )

/* %The last token-type variant represents the detection of a @emph{lexicalic-error}.
If this token-variant is returned by a scanner-component, either an errorneous 
termination of the scanning-process can occur, or some means for error-recovery
can be provided: */
              error ( reason : denotation, pos : pos )


-- %The following function
FUN stringAndPos2KeywordToken : string ** pos -> token
/* %provides a mechanism for a scanner implementation to convert a scanned
lexem into its corresponding token representation. Due to the keyword-oriented
definition of our configuration language, any lexem that does not belong to the
lexical units @c{directoryName}, @c{string}, @c{macroname}, or @c{texinfo} is 
considered to be a keyword. The conversion process for all other lexical
(keyword) lexems is done via this function.

If the given @string does not match any of the predefined keyword representations
a lexicalic error is indicated by returning the @c{error}-variant of the
token-type defined above. */ 



