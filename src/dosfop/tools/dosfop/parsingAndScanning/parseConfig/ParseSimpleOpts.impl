IMPLEMENTATION ParseSimpleOpts
-- %- $Id$

IMPORT Seq              COMPLETELY
       String           COMPLETELY
       Denotation       COMPLETELY

IMPORT DError           COMPLETELY
       Config           COMPLETELY
       TokenConfig      COMPLETELY
       DPos             COMPLETELY
       ParseError       COMPLETELY

-- %$Sucessfull Parsing of Single Configuration Options$
-- %----------------------------------------------------
/* %For each option a pattern for all allowed settings is specified. If one pattern
matches the matching option-name and the detected setting is returned. The following
section enumerates the function definitions for successful parsing. */

DEF ProjectNameOption( project_name(_)::equal(_)::string(repr,_)::rest) == 
     (ProjectName, cont(repr), rest, ok)

DEF TopStructureNameOption
      ( top_structure(_)::equal(_)::string(repr,_)::rest) == 
     (TopStructureName, cont(repr), rest, ok)

DEF OutputFileNameOption
      ( output_file(_)::equal(_)::directoryName(repr,_)::rest) == 
     (OutputFileName, cont(repr), rest, ok)
DEF OutputFileNameOption( output_file(_)::equal(_)::off(_)::rest) == 
     (OutputFileName, cont(<>), rest, ok)

DEF AuthorsNamesOption( authors(_)::equal(_)::string(repr,_)::rest) == 
     (AuthorsNames, cont(repr), rest, ok)

DEF DateOption( date(_)::equal(_)::string(repr,_)::rest) == 
     (Date, cont(repr), rest, ok)

DEF FunctionalityIndexOption
      ( functionality_index(_)::equal(_)::on(_)::rest) == 
     (FunctionalityIndex, On, rest, ok)
DEF FunctionalityIndexOption
      ( functionality_index(_)::equal(_)::on_medium_verb(_)::rest) == 
     (FunctionalityIndex, OnMediumInst, rest, ok)
DEF FunctionalityIndexOption
      ( functionality_index(_)::equal(_)::on_no_verb(_)::rest) == 
     (FunctionalityIndex, OnNoInst, rest, ok)
DEF FunctionalityIndexOption
      ( functionality_index(_)::equal(_)::off(_)::rest) == 
     (FunctionalityIndex, Off, rest, ok)

DEF ConceptIndexOption( concept_index(_)::equal(_)::on(_)::rest) == 
     (ConceptIndex, On, rest, ok)
DEF ConceptIndexOption( concept_index(_)::equal(_)::off(_)::rest) == 
     (ConceptIndex, Off, rest, ok)

DEF ApplicationIndexOption( application_index(_)::equal(_)::on(_)::rest) == 
     (ApplicationIndex, On, rest, ok)
DEF ApplicationIndexOption
      ( application_index(_)::equal(_)::on_medium_verb(_)::rest) == 
     (ApplicationIndex, OnMediumInst, rest, ok)
DEF ApplicationIndexOption( application_index(_)::equal(_)::on_no_verb(_)::rest) == 
     (ApplicationIndex, OnNoInst, rest, ok)
DEF ApplicationIndexOption( application_index(_)::equal(_)::on_no_libs(_)::rest) == 
     (ApplicationIndex, OnNoLibs, rest, ok)
DEF ApplicationIndexOption
      ( application_index(_)::equal(_)::on_no_libs_medium_verb(_)::rest) == 
     (ApplicationIndex, OnNoLibsMediumInst, rest, ok)
DEF ApplicationIndexOption
      ( application_index(_)::equal(_)::on_no_libs_no_verb(_)::rest) == 
     (ApplicationIndex, OnNoLibsNoInst, rest, ok)
DEF ApplicationIndexOption( application_index(_)::equal(_)::off(_)::rest) == 
     (ApplicationIndex, Off, rest, ok)

DEF StructureIndexOption( structure_index(_)::equal(_)::on(_)::rest) == 
     (StructureIndex, On, rest, ok)
DEF StructureIndexOption( structure_index(_)::equal(_)::off(_)::rest) == 
     (StructureIndex, Off, rest, ok)

DEF SubsystemsOption( subsystems_include(_)::equal(_)::on(_)::rest) == 
     (SubsystemsInclude, On, rest, ok)
DEF SubsystemsOption( subsystems_include(_)::equal(_)::off(_)::rest) == 
     (SubsystemsInclude, Off, rest, ok)

DEF LibrariesOption( library_include(_)::equal(_)::on(_)::rest) == 
     (LibraryInclude, On, rest, ok)
DEF LibrariesOption( library_include(_)::equal(_)::off(_)::rest) == 
     (LibraryInclude, Off, rest, ok)

DEF PropertiesOption( properties_include(p)::equal(_)::on(_)::rest) == 
     (PropertiesInclude, On, rest, ok)
DEF PropertiesOption( properties_include(p)::equal(_)::off(_)::rest) == 
     (PropertiesInclude, Off, rest, ok)

DEF OnlyInterfacesOption( only_interfaces(_)::equal(_)::on(_)::rest) == 
     (OnlyInterfaces, On, rest, ok)
DEF OnlyInterfacesOption( only_interfaces(_)::equal(_)::off(_)::rest) == 
     (OnlyInterfaces, Off, rest, ok)

DEF HierarchyVisuOption( hierarchy_visu(_)::equal(_)::on(_)::rest) == 
     (HierarchyVisu, On, rest, ok)
DEF HierarchyVisuOption( hierarchy_visu(_)::equal(_)::on_no_sub(_)::rest) == 
     (HierarchyVisu, OnNoSubs, rest, ok)
DEF HierarchyVisuOption
      ( hierarchy_visu(_)::equal(_)::on_no_struct(_)::rest) == 
     (HierarchyVisu, OnNoStructs, rest, ok)
DEF HierarchyVisuOption( hierarchy_visu(_)::equal(_)::off(_)::rest) == 
     (HierarchyVisu, Off, rest, ok)

DEF SortStructuresOption( sort_structures(_)::equal(_)::top_down(_)::rest ) ==
     (SortStructures, TopDown, rest, ok)
DEF SortStructuresOption( sort_structures(_)::equal(_)::bottom_up(_)::rest ) ==
     (SortStructures, BottomUp, rest, ok)
DEF SortStructuresOption( sort_structures(_)::equal(_)::
                          alphabetically(_)::rest ) ==
     (SortStructures, Alphabetically, rest, ok)
DEF SortStructuresOption( sort_structures(_)::equal(_)::user_defined(_)::
                           rest ) ==
     (SortStructures, UserDefined, rest, ok)
DEF SortStructuresOption( sort_structures(_)::equal(_)::off(_)::rest ) == 
     (SortStructures, Off, rest, ok)

DEF NewPagesOption( new_pages(p)::equal(_)::on(_)::rest) == 
     (NewPages, On, rest, ok)
DEF NewPagesOption( new_pages(p)::equal(_)::off(_)::rest) == 
     (NewPages, Off, rest, ok)

DEF ImportReferencesOption( import_references(_)::equal(_)::on(_)::rest) == 
     (ImportReferences, On, rest, ok)
DEF ImportReferencesOption
      ( import_references(_)::equal(_)::on_no_libs(_)::rest) == 
     (ImportReferences, OnNoLibs, rest, ok)
DEF ImportReferencesOption( import_references(_)::equal(_)::off(_)::rest) == 
     (ImportReferences, Off, rest, ok)


DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on(_)::rest) == 
     (UsedFunctionTables, On, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_medium_verb(_)::rest) == 
     (UsedFunctionTables, OnMediumInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_low_verb(_)::rest) == 
     (UsedFunctionTables, OnLowInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_no_verb(_)::rest) == 
     (UsedFunctionTables, OnNoInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_no_libs(_)::rest) == 
     (UsedFunctionTables, OnNoLibs, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_no_libs_medium_verb(_)::rest) == 
     (UsedFunctionTables, OnNoLibsMediumInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_no_libs_low_verb(_)::rest) == 
     (UsedFunctionTables, OnNoLibsLowInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::on_no_libs_no_verb(_)::rest) == 
     (UsedFunctionTables, OnNoLibsNoInst, rest, ok)
DEF UsedFunctionTablesOption
      ( used_function_tables(_)::equal(_)::off(_)::rest) == 
     (UsedFunctionTables, Off, rest, ok)

DEF DropEmptyLinesOption( drop_empty_lines(_)::equal(_)::on(_)::rest) == 
     (DropEmptyLines, On, rest, ok)
DEF DropEmptyLinesOption( drop_empty_lines(_)::equal(_)::off(_)::rest) == 
     (DropEmptyLines, Off, rest, ok)

DEF SingleNodeOption( single_node(_)::equal(_)::on(_)::rest) == 
     (SingleNode, On, rest, ok)
DEF SingleNodeOption( single_node(_)::equal(_)::off(_)::rest) == 
     (SingleNode, Off, rest, ok)

DEF LanguageOption( language(_)::equal(_)::german(_)::rest) == 
     (Language, German, rest, ok)
DEF LanguageOption( language(_)::equal(_)::english(_)::rest) == 
     (Language, English, rest, ok)

DEF LevelsOption( levels(_)::equal(_)::off(_)::rest) == 
     (Levels, Off, rest, ok)
DEF LevelsOption( levels(_)::equal(_)::string(repr, _)::rest) ==
     LevelsIntern(repr%, rest) 

FUN LevelsIntern : seq[string] ** seq[token] -> 
                     opt ** optSetting ** seq[token] ** error

DEF LevelsIntern(reprs, colon(_)::string(repr,_)::rest ) ==
      LevelsIntern(repr::reprs, rest)
DEF LevelsIntern(reprs, rest) ==
      (Levels, contSeq(reprs), rest, ok)


-- %$Error-Handling for Simple Option Parsing$
-- %------------------------------------------

/* %If the pattern for a particular option defined above does not match, one of the
following error-patterns have to be applicable. This leads to a return of an error. */
DEF ProjectNameOption( <> ) ==
      (none, none, <>, mkerror("unexpected eof ", initial))
DEF ProjectNameOption( t:: _ ) == 
      (none, none, <>, mkerror("'project_name' expected at ", pos(t)))
DEF ProjectNameOption( project_name(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF ProjectNameOption( project_name(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("project-name expected at ", pos))

DEF TopStructureNameOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof ", initial))
DEF TopStructureNameOption( t:: _ ) == 
      (none, none, <>, mkerror("'top_structure' expected at ", pos(t)))
DEF TopStructureNameOption( top_structure(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF TopStructureNameOption( top_structure(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("top-structure-name expected at ", pos))

DEF OutputFileNameOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof ", initial))
DEF OutputFileNameOption( t:: _ ) == 
      (none, none, <>, mkerror("'output_file' expected at ", pos(t)))
DEF OutputFileNameOption( output_file(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF OutputFileNameOption( output_file(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("output-file-name expected at ", pos))

DEF AuthorsNamesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF AuthorsNamesOption( t:: _ ) == 
      (none, none, <>, mkerror("'authors' expected at ", pos(t)))
DEF AuthorsNamesOption( authors(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF AuthorsNamesOption( authors(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("authors-names expected at ", pos))

DEF DateOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF DateOption( t:: _ ) == 
      (none, none, <>, mkerror("'date' expected at ", pos(t)))
DEF DateOption( date(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF DateOption( date(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("date-name expected at ", pos))

DEF FunctionalityIndexOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF FunctionalityIndexOption( t:: _ ) ==
      (none, none, <>, mkerror("'functionality_index' expected at ", pos(t)))
DEF FunctionalityIndexOption( functionality_index(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF FunctionalityIndexOption( functionality_index(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF ConceptIndexOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF ConceptIndexOption( t:: _ ) == 
      (none, none, <>, mkerror("'concept_index' expected at ", pos(t)))
DEF ConceptIndexOption( concept_index(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF ConceptIndexOption( concept_index(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF ApplicationIndexOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF ApplicationIndexOption( t:: _ ) == 
      (none, none, <>, mkerror("'application_index' expected at ", pos(t)))
DEF ApplicationIndexOption( application_index(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF ApplicationIndexOption( application_index(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF StructureIndexOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF StructureIndexOption( t:: _ ) == 
      (none, none, <>, mkerror("'structure_index' expected at ", pos(t)))
DEF StructureIndexOption( structure_index(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF StructureIndexOption( structure_index(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF SubsystemsOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF SubsystemsOption( t:: _ ) == 
      (none, none, <>, mkerror("'subsystems_include' expected at ", pos(t)))
DEF SubsystemsOption( subsystems_include(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF SubsystemsOption( subsystems_include(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF LibrariesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF LibrariesOption( t:: _ ) == 
      (none, none, <>, mkerror("'libraries_include' expected at ", pos(t)))
DEF LibrariesOption( library_include(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF LibrariesOption( library_include(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF PropertiesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF PropertiesOption( t:: _ ) == 
      (none, none, <>, mkerror("'properties_include' expected at ", pos(t)))
DEF PropertiesOption( properties_include(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF PropertiesOption( properties_include(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF OnlyInterfacesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF OnlyInterfacesOption( t:: _ ) == 
      (none, none, <>, mkerror("'only_interfaces' expected at ", pos(t)))
DEF OnlyInterfacesOption( only_interfaces(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF OnlyInterfacesOption( only_interfaces(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF HierarchyVisuOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF HierarchyVisuOption( t:: _ ) == 
      (none, none, <>, mkerror("'hierarchy_visu' expected at ", pos(t)))
DEF HierarchyVisuOption( hierarchy_visu(pos):: _ ) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF HierarchyVisuOption( hierarchy_visu(_)::equal(pos):: _ ) == 
      (none, none, <>, mkerror("on/on_no_sub/on_no_struct/off expected at ", pos))

DEF SortStructuresOption( <> ) ==
      (none, none, <>, mkerror("unexpected eof", initial))
DEF SortStructuresOption( t:: _ ) == 
      (none, none, <>, mkerror("'sort_structures' expected at ", pos(t)))
DEF SortStructuresOption(sort_structures(pos) :: _ ) ==
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF SortStructuresOption(sort_structures(_)::equal(pos):: _ ) ==
      (none, none, <>, mkerror("top_down/bottom_up/alphabetically/user_defined/off expected at ", pos))

DEF NewPagesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF NewPagesOption( t:: _ ) == 
      (none, none, <>, mkerror("'new_pages' expected at ", pos(t)))
DEF NewPagesOption( new_pages(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF NewPagesOption( new_pages(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF ImportReferencesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF ImportReferencesOption( t:: _ ) == 
      (none, none, <>, mkerror("'import_references' expected at ", pos(t)))
DEF ImportReferencesOption( import_references(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF ImportReferencesOption( import_references(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/on_no_libs/off expected at ", pos))

DEF UsedFunctionTablesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF UsedFunctionTablesOption( t:: _ ) == 
      (none, none, <>, mkerror("'used_function_tables' expected at ", pos(t)))
DEF UsedFunctionTablesOption( used_function_tables(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF UsedFunctionTablesOption( used_function_tables(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/on_medium_verb/on_no_verb/off expected at ", pos))

DEF DropEmptyLinesOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF DropEmptyLinesOption( t:: _ ) == 
      (none, none, <>, mkerror("'drop_empty_lines' expected at ", pos(t)))
DEF DropEmptyLinesOption( drop_empty_lines(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF DropEmptyLinesOption( drop_empty_lines(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF SingleNodeOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF SingleNodeOption( t:: _ ) == 
      (none, none, <>, mkerror("'single_node' expected at ", pos(t)))
DEF SingleNodeOption( single_node(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF SingleNodeOption( drop_empty_lines(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("on/off expected at ", pos))

DEF LanguageOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF LanguageOption( t:: _ ) == 
      (none, none, <>, mkerror("'language' expected at ", pos(t)))
DEF LanguageOption( language(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF LanguageOption( language(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("german/english expected at ", pos))

DEF LevelsOption( <> ) == 
      (none, none, <>, mkerror("unexpected eof", initial))
DEF LevelsOption( t:: _ ) == 
      (none, none, <>, mkerror("'levels' expected at ", pos(t)))
DEF LevelsOption( levels(pos):: _) == 
      (none, none, <>, mkerror("'=' expected at ", pos))
DEF LevelsOption( levels(_)::equal(pos):: _) == 
      (none, none, <>, mkerror("level-name-list expected at ", pos))


-- %$Parsing of Mandatory Single Configuration Options$
-- %---------------------------------------------------
/* %The parsing for mandatory options is implemented analogous (see above). */

DEF NameOption( name(_)::equal(_)::string(repr,_)::rest) == 
     (repr, rest, ok)
DEF LocationOption( directory(_)::equal(_)::directoryName(repr,_)::rest) == 
     (repr, rest, ok)

-- %$Error-Handling for Mandatory Option Parsing$
-- %---------------------------------------------

DEF LocationOption( <> ) == (<>, <>, mkerror("unexpected eof", initial))
DEF LocationOption( t:: _ ) == 
      (<>, <>, mkerror("'location' expected at ", pos(t)))
DEF LocationOption( directory(pos) :: _ ) == 
      (<>, <>, mkerror("'=' expected at ", pos))
DEF LocationOption( directory(_) :: equal(pos) :: _ ) ==
      (<>, <>, mkerror("directory-name expected at ", pos))
      
DEF NameOption( <> ) == (<>, <>, mkerror("unexpected eof", initial))
DEF NameOption( t:: _ ) == 
      (<>, <>, mkerror("'name' expected at ", pos(t)))
DEF NameOption( name(pos) :: _ ) == 
      (<>, <>, mkerror("'=' expected at ", pos))
DEF NameOption( name(_) :: equal(pos) :: _ ) ==
      (<>, <>, mkerror("name expected at ", pos))

