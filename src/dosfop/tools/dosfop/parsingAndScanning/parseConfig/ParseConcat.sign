/* %This module provides measures for the concatenation of nonterminal
derivations. There are two concatenation functions that serve different purposes
depending on the environment of their application. 

On the one hand a convenient recognition of the syntactic structure 
of the @c{seq[token]} is done and on the other hand some abstrat syntax is generated.
*/
SIGNATURE ParseConcat[ tree, leaf, emptytree ]
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/parsingAndScanning/parseConfig/ParseConcat.sign,v 1.2 1999-09-13 22:10:50 kd Exp $

/* %The sort @c{tree} stands for the generic type of the finally delivered full
abstract syntax tree, whereas @c{leaf} is the formal parameter for one subtree. The
formal parameter @c{emptytree} serves as the invalid setting of @c{tree} in case the
parsing of the token sequence fails. */
SORT leaf tree 
FUN emptytree : tree

IMPORT Seq[token] 	ONLY seq

IMPORT DError 		ONLY error:SORT
       TokenConfig 	ONLY token

/* %The following function provides a means to concat a sequence of nonterminal
derivations @emph{at the top-level} of the full parsing-process. The first 
three-element-tuple contains the result of one nonterminal derivation. In case no 
syntactic error occurs (this is denoted by the @c{error}-parameter) the following
continuation function is executed and the current @c{leaf} and rest-token-sequence
is given as a parameter to the continuation function. Via subsequent calls to the
function the subtrees of the abstract-syntax tree can be collected and finally
assembled to build the complete @c{tree}. As the result of the function does not
encompass a rest-token-sequence the @c{;} operator can only be applied at the top-level
of the parsing process, where no further tokens are needed. 

In case of errorenous derivation the result denotes the reason of the failure and
the element @c{tree} contains the value of the generic parameter @c{emptytree}. */
FUN ; : (leaf ** seq[token] ** error) **
          (leaf ** seq[token] -> tree ** error) ->
            tree ** error
/* %The function @c{&} is a derivation of @c{;} that can be applied during deeper
recursion levels that are forced to deliever a rest-token-sequence that can be handled
by the calling environment. The concept of function continuation is analogous. */
FUN & : (leaf ** seq[token] ** error) **
          (leaf ** seq[token] -> tree ** seq[token] ** error) ->
            tree ** seq[token] ** error

 