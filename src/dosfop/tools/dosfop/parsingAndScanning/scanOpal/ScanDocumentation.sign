/* %The regular @OPAL scanner, working in the implementation of the Opal Compilation System,
does not handle @OPAL-comments as separate lexical units. In DOSFOP, however, comments are
the basis for our documentation concept. This module enables the handling of comments
the way it is needed for DOSFOP.
*/
SIGNATURE ScanDocumentation
-- %- $Id$

IMPORT String 		ONLY string
       Seq[token] 	ONLY seq

IMPORT DPos 		ONLY pos:SORT
       Token 		ONLY token:SORT
       Config		ONLY config:SORT

/* %@Specification:

@c{fun(src, lexstart, start, act, [docuType, ] config, [lineCommentStart, commentStart,] commentEnd) == (tok, restSrc, newAct)}

for both of the following functions the meaning for the parameters are the same:
@table @code
@item src
The rest source of the scanned file.
@item lexstart
First character of the lexem to be further examined. For @c{possibleLineCommentOrDocu} this character
has to be @c{-} but for @c{possibleCommentOrPragmaOrDocu} the first lexem character has to be @c{/}.
@item start
Position of the first character of the examined token in the source file.
@item act
Position of the first character of @src. This position serves as basis for further position
calculations.
@item config
The configuration representation has to be passed through all comment scanning functions as
the need of macro-extension might be encountered.
@item lineCommentStart
The string which starts a line comment.
@item commentStart
The string which starts a nested comment.
@item commentEnd
The string which ends a nested comment.
@end table

For both functions the further examination of the source can detect that the initially expected lexem
---whose start is store in @c{lexstart}--- is @emph{not} a comment, pragma, or documentation 
but an identifier! So @c{tok} can deliver a comment, pragma or documentation token (with all 
possible derivations ---see module @c{Token} for derivations---) as well as
an identifier or keyword token. @c{newAct} denotes the position of the first character of the 
rest-source that remains to be scanned. @c{restSrc} contains this @string: */
FUN -- possibleLineCommentOrDocu 
    possibleCommentOrPragmaOrDocu :
      string ** string ** pos ** pos ** config ** string ** string ** string ->
      token ** string ** pos 

FUN documentationStart :
      string ** string ** pos ** pos ** docuType ** config ** string -> 
        token ** string ** pos 

/* % The type @c{docuType} enables the programmer 
to distinguish between two possible kinds of documentations internally and 
reduces the implementation overhead drastically. */ 
TYPE docuType == lineCommentDocu
                 nestedCommentDocu
