/* %The scanner is an enhancement of the ordinary OPAL scanner used for
complilation of OPAL source code to token sequences.
In contrast to ordinary scanners converting the source code to a sequence of
lexical units from which the OPAL source text cannot be extracted completely,
this scanner also converts layout and comments into the resulting token sequence.
Due to this fact, the source text can be completely rebuilt just from the information 
stored in the token sequence.

Scanning the OPAL source text for building a documentation is much easier
because we can assume any scanned source text to be context correct. Therefore error
checking is not necessary. (Nevertheless we implement an error-detection mechanism,
as the user ---certainly--- does not always obey this precondition but wants to get 
some feedback in case of non-successful scanning!) */

SIGNATURE Scan
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/parsingAndScanning/scanOpal/Scan.sign,v 1.2 1999-09-13 22:10:51 kd Exp $

IMPORT String          	ONLY string
       Seq[token]      	ONLY seq

IMPORT Token           	ONLY token:SORT
       DError		ONLY error:SORT
       Config		ONLY config:SORT

/* %@Preconditions for the applicability of the scanning function are:
@itemize @bullet{}
@item The @string-parameter contains a lexically correct @OPAL-source text.
@item @config contains a valid internal representation of a configuration file. This 
 means that
 especially the internally represented macro-definitions are valid.
@end itemize
On success @c{scan} delievers a sequence of non-@c{error}-token and an error-state of 
@c{ok}. On failure, however, the @c{seq[token]} is undefined and the result of 
type @c{error} contains the
@c{error}-variant defined in the module @c{Error}. */ 
FUN scan : string ** config -> seq[token] ** error

-- %$Variable Scanning$

/* %This type is used to store information about the comment and documentary
    conventions. */
TYPE commentStrings == commentStrings( lineCommentStart: string,
                                       commentStart: string,
                                       commentEnd: string,
                                       docuStart: string )

-- %And this is the accompanying scan function

FUN scan : string ** config ** commentStrings -> seq[token] ** error