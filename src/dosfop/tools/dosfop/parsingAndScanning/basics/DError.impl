IMPLEMENTATION DError
-- %- $Id$

IMPORT Seq ONLY seq revert ++ % <> ::
       Denotation ONLY ++
       ABORT ONLY ABORT
       Option ONLY option nil avail

/* %different implementation for efficiency reasons: warnings are/were? stored
in reverse order in a sequence. @emph{@code{iWarnings} should never ever be the
empty list!} */ 
DATA error == ok
              error( reason : denotation )
              iWarnings( iWarnings: seq[denotation] )

DEF warnings( <> ) == ABORT("warnings'DError: warnings may not be empty")
DEF warnings( ws:seq ) == iWarnings(ws)

DEF warnings( ok ) == ABORT("warnings'DError: undefined for ok")
DEF warnings( error(_) ) == ABORT("warnings'DError: undefined for error")
DEF warnings( iWarnings(ws) ) == ws

DEF warnings? == iWarnings?

DEF ok <+ text == iWarnings(%(text))
DEF error(x) <+ _ : denotation == error(x)
DEF iWarnings(ws) <+ text == iWarnings(text :: ws)

DEF E <+ nil == E
DEF E <+ avail(text) == E <+ text