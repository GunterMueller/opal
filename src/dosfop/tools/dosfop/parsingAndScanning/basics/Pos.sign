/* %@c{Pos} supplies types and functions for the administration of character
positions often needed in scanner implementations. Moreover position areas
are implemented, which are useful for operations that should be applied on
certain parts of text. */
SIGNATURE Pos
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/parsingAndScanning/basics/Pos.sign,v 1.1.1.1 1998-06-16 16:00:37 wg Exp $

IMPORT Nat 	ONLY nat
       Char 	ONLY char
       String	ONLY string

-- %The basic position type: 
TYPE pos == pos( line : nat, col  : nat )

-- %Handling of areas denoted by a pair of positions or the variant @c{emptyArea}:
TYPE area == validArea( startPos : pos, endPos : pos )
             emptyArea

-- %The first position in a text file is
FUN initial: pos

-- %Updating of a given position w.r.t. a single @char or a @string:
FUN upd : pos ** char -> pos
FUN upd : pos ** string -> pos

-- %Conversion of a position to a printable representation (e.g. for debugging):
FUN ! : pos -> denotation

/* %Calculation of the previous position of a given position. The @precondition that
the character denoted by the predecessor of the argument-position should @emph{not} be a
@newline or a @tab has to be valid! : */
FUN prev : pos -> pos

-- %Constant denoting the hard-wired width of a @tab in characters
FUN tabconst : nat

-- %The function 
FUN tabskip : nat -> nat
/* %calculates the offset that is needed to step to the next tabulator-column. The
calculation is based on the current tabconst! The parameter of type @nat has to be
greater than zero! (@precondition!) */
