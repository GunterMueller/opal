/* %The SourceTab contains all slightly elaborated source files that
are used in the current project. The applied source can be subdivided
into user implemented and library files. For these two basic kinds
of files two different data structures are supplied. One @code{usrSourceInfo}-
structure contains all the information needed to transform a single user implemented
@OPAL-implementation and signature into the texinfo format. This statement also holds
for the applied library-signatures. Library files as well as the user-implemented
structures can be subdivided into sub-parts. The sub-part-names are 
stored in the @code{usrSourceInfo} structure, too.

The source code stuff (user-implemented as well as libraries) is stored in a lexically 
analyzed form (scanned and divided in a token sequence). */
SIGNATURE SourceTab
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/sourcetab/SourceTab.sign,v 1.1.1.1 1998-06-16 16:00:40 wg Exp $

IMPORT String             		ONLY string 
       Seq[string]        		ONLY seq
       Seq[usrSourceInfo] 		ONLY seq
       Seq[libSourceInfo]      		ONLY seq
       Seq[subsystem[libSourceInfo]]	ONLY seq
       Seq[subsystem[usrSourceInfo]]	ONLY seq
       Seq[pair[string, libInfos]] 	ONLY seq
       Pair[string, libInfos]   	ONLY pair
       Option[prop]      		ONLY option

IMPORT Context   			ONLY context:SORT
       SubsystemType[usrSourceInfo]	ONLY subsystem:SORT
       SubsystemType[libSourceInfo]	ONLY subsystem:SORT
       Content				ONLY content:SORT

/* % @code{usrInfos} is the main structure containing all user-implemented
structures including used subsystems. The @code{sources} component contains
all the top-level project modules. */
TYPE usrInfos == usrInfos( sources : seq[usrSourceInfo],
                           subsystems : seq[subsystem[usrSourceInfo]] )

/* % @code{subsystem} stores one single subsystem. The @code{name} component
contains the subsystem's name. The subsystem's sources are stored in
the @code{sources} component. A subsystem can contain further subsystems. 
These are stored in the (recursively defined) thier component 
@code{subsystems}. */

TYPE usrSourceInfo == usrSourceInfo( name  : string,
                                     sign  : sign,
                                     impl  : impl )
                      usrForeignInfo( name : string,
                                      file : prop)

/* % Usage of @code{prop} is some kind of a hack, but it contains just
     the appropriate components. */


/* % The structure @code{libInfos} takes the structures of the 
Bibliotheca Opalica into account. The top level of the library 
is a sequence of subsystems based on the 
@c{libSourceInfo}-structure where each
library-subsystem has a distinctive name and contains the information
on all structures belonging to the particular library-subsystem. */
TYPE libInfos == libSubsystems(libSubsystems : seq[subsystem[libSourceInfo]])
                       
TYPE libSourceInfo == libSourceInfo( name    : string,
                                     sign    : sign,
                                     extProp : option[prop] )  
                                        -- intProps are always nil


TYPE sign == sign( content : content,
                   imports : seq[string],
                   context : context,
                   extProp : option[prop] )
             empty

TYPE impl == impl( content : content,
                   imports : seq[string],
                   context : context,
                   intProp : option[prop] )
             empty

TYPE prop == prop( content : content,   
                   imports : seq[string],
                   context : context )
         
/* %We have to distinguish different @c{fileTypes} in the course of the
translation process. The following @TYPE defines tags for this purpose: */ 
TYPE fileType == sign
                 impl
                 extp
                 intp
                 signInter
                 implInter
                 extpInter
                 intpInter
                 libSign
                 libExtp

/* %Transform a given @c{fileType} into a @string. The conversion is done
by capitalizing the first character of the @c{fileType}-identifier: */
FUN !  : fileType -> string
/* %Append an additional space to the end of the @string-conversion: */
FUN !_ : fileType -> string



-- %The function
FUN eraseImports : usrSourceInfo ** seq[string] -> usrSourceInfo
/* %deletes all names of imported structures stored in the
    usrSourceInfo structure 
given by the @c{seq[string]}. The import-information stored for the optional
propery-parts is considered, too. All other information remains untouched!. */

/* %Basic functions that test if a given info-structure is empty.
    Both functions simply
test the emptiness of the @c{sign}-part of the specification. */ 
FUN empty? : usrSourceInfo -> bool
FUN empty? : libSourceInfo -> bool

/* %During the process of the construction of source-table templates, we need 
placeholders
for structures whose contents are possibly inserted later on. The @string-parameter
denotes the name of the structure whose contents might replace the @c{emptySource}
in later stages. Be aware that the application of @c{empty?} on @c{emptySource} has to
deliver @true for the sake of consistency. */
FUN emptySource : string -> usrSourceInfo
FUN emptySource : string -> libSourceInfo




