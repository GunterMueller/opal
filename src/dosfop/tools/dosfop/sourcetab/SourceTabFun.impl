IMPLEMENTATION SourceTabFun[dest]
-- %- $Id$

SORT dest

IMPORT Seq   	COMPLETELY
       String 	COMPLETELY
       Option	COMPLETELY

IMPORT SourceTab	COMPLETELY
       SubsystemType	COMPLETELY

-- %$Getting Information from Source-Sequences$
-- %-------------------------------------------

FUN get : seq[libSourceInfo] ** (libSourceInfo -> dest) ** string ->
              option[dest]

DEF get: seq[libSourceInfo]**(libSourceInfo-> dest)**string->option[dest]
       ( actLibSource :: rtLibSources, mappingFun, searchName ) ==
  IF searchName = name(actLibSource) THEN
    IF empty?(sign(actLibSource)) THEN
       nil -- this should never happen!
    ELSE
      avail(mappingFun(actLibSource))
    FI
  ELSE
    get(rtLibSources, mappingFun, searchName)
  FI

DEF get: seq[libSourceInfo]**(libSourceInfo-> dest)**string->option[dest]
       ( <>, _, _ ) == nil


FUN get : seq[usrSourceInfo] ** (usrSourceInfo-> dest) ** string ->
              option[dest]


DEF get: seq[usrSourceInfo]**(usrSourceInfo -> dest)**string->option[dest]
       ( actUsrSource :: rtUsrSources, mappingFun, searchName ) ==
  IF searchName = name(actUsrSource) THEN
    avail(mappingFun(actUsrSource))
  ELSE
    get(rtUsrSources, mappingFun, searchName)
  FI

DEF get: seq[usrSourceInfo]**(usrSourceInfo -> dest)**string->option[dest]
       ( <>, _, _ ) == nil


-- %$Getting Information from Subsystems$
-- %-------------------------------------

FUN get : seq[subsystem[usrSourceInfo]] ** (usrSourceInfo -> dest) ** string ->
              option[dest]

DEF get: seq[subsystem[usrSourceInfo]]**(usrSourceInfo->dest)**string->
            option[dest]
       ( actUsrSubsystem :: rtUsrSubsystems, mappingFun, searchName ) ==
  LET
    destFoundOption1 == get(
                          sources(actUsrSubsystem),
                          mappingFun,
                          searchName
                        )
  IN
    IF avail?(destFoundOption1) THEN
      destFoundOption1
    ELSE
      LET
        destFoundOption2 == get(
                              subsystems(actUsrSubsystem),
                              mappingFun,
                              searchName
                            )
      IN
        IF avail?(destFoundOption2) THEN
          destFoundOption2
        ELSE
          get(rtUsrSubsystems, mappingFun, searchName)
        FI
    FI


DEF get: seq[subsystem[usrSourceInfo]]**(usrSourceInfo->dest)**string->option[dest]
       ( <>, _, _ ) == nil
 
-- %----------------------------------------------------------------------

FUN get : seq[subsystem[libSourceInfo]] ** (libSourceInfo -> dest) **  string ->
              option[dest]

DEF get: seq[subsystem[libSourceInfo]]**(libSourceInfo->dest)**string->option[dest]
       ( actLibSubsystem :: rtLibSubsystems, mappingFun, searchName ) ==
  LET
    destFoundOption1 == get(
                          sources(actLibSubsystem),
                          mappingFun,
                          searchName
                        )
  IN
    IF avail?(destFoundOption1) THEN
      destFoundOption1
    ELSE
      LET
        destFoundOption2 == get(
                              subsystems(actLibSubsystem),
                              mappingFun,
                              searchName
                            )
      IN
        IF avail?(destFoundOption2) THEN
          destFoundOption2
        ELSE
          get(rtLibSubsystems, mappingFun, searchName)
        FI
    FI


DEF get: seq[subsystem[libSourceInfo]]**(libSourceInfo->dest)**string->option[dest]
       ( <>, _, _ ) == nil
 



