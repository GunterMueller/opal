/* %One of the main features of the DOSFOP documentation system is the user's
ability to subdivide a module into subsections containing related objects. The present
module provide the data-structures and function to produce and store subdivided
modules. 

The contents of each individual module are stored in their token-representation as
the translation-process needs the positions of programm-objects in order to
construct a relationship between the source code and generated documentation
elements (e.g. index entries). */ 
SIGNATURE Content
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/sourcetab/Content.sign,v 1.1.1.1 1998-06-16 16:00:40 wg Exp $

IMPORT String 		ONLY string
       Seq[string] 	ONLY seq
       Seq[token] 	ONLY seq
       Seq[part] 	ONLY seq
       Option[string] 	ONLY option

IMPORT Token 		ONLY token:SORT splitLevel:SORT

/* %The @c{content} of one single structure module
(e.g. a SIGNATURE- or IMPLEMENTATION-part)
can be stored in the following data-structure. For all module types except 
SIGNATURE-parts the @c{survey} variant has to be @nil, as only signatures are
allowed to be preliminated with an introducing informal overview.

In case a module is not subdivided at all or the subdivision does not start at the 
beginning of the documented module, the @c{initial}-part contains the @c{token}s that
are not member of a sub-section. If there isn't specified any subdivision at all
the @c{initial}-variant contains @emph{all} @c{token}s of the module. 

All source code tokens the are member of a subsection of any level are stored
in the @c{parts}-part. */
TYPE content == content(
                  survey  : option[string],  -- only for sign probably <> nil !
                  initial : seq[token],
                  parts   : seq[part]        -- <> for unsplitted modules
                )

FUN empty: content
/* %Each self-contained subsection of any level is stored in a separate @c{part}
data-structure encompassing the @c{headline} of the considered subsection, a
@c{splitLevel} denoting the depth of nesting of the considered subsection, and
its token-@c{cont}ents. */
TYPE part == part(
               headline   : string,
               splitLevel : splitLevel,
               cont       : seq[token]
             )

-- %The following two conversion functions
FUN token2Content     : seq[token] -> content
FUN token2SignContent : seq[token] -> content
/* %transform a given module-representation into a @c{content} data-structure, 
considering @c{docuFileSplit}-token as the breakpoints of the @c{seq[token]}. For 
each @c{docuFileSplit}-token a new @c{part}-representation with the appropriate
@c{splitLevel} is constructed. All token since the currently read 
@c{docuFileSplit}-token are included in the content 
of the @c{part} until another is @c{docuFileSplit}-token is encountered or the 
token-sequence ends.

As an initial documentation in a signature part is handled as an informal
introduction to the whole structure, a special conversion function
for token-sequences derived from signatures is provided (@c{token2SignContent}). Only
by application of this function a non-@nil @c{survey} in the @c{content} 
data-structure can be generated. 

Initial layout-token in the token-sequence are removed. */

/* %All headlines ---not depeneding on the nesting level--- are extracted from
the @c{content}-structure, considering the order of occurence in the module
from where the @c{content}-structure is derived: */
FUN content2PartNames : content -> seq[string]




