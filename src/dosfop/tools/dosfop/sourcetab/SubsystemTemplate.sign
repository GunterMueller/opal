/* %The subsystem-structure specified via the DOSFOP-configuration-language has to
be transformed into a subsystem-data-structure containing the source-code and the
generated context information for each structure of a considered project. In the 
course of reading the source-code information from the UNIX-filesystem each
currently read structure has to placed in the project subsystem tree. As we do not want
to extract the positioning information from the configuration-structure for each
structure individually, we construct a subsystem-structure-@emph{template} that
contains a placeholder for each subsystem-structure specified in the 
configuration database. When reading structure information we can substitute it
at its reserved place. This has to be done for used-implemented as well as 
library-subsystems. By the choice of the generic parameter @c{structure} this
distinction can be specified by the applying structure (@c{usrSourceInfo} or
@c{libSourceInfo}). 

The parameter @c{emptySource} denotes the representation of the placeholder
that has to be inserted in the source-table. It has to be a function that maps
a structure name (@c{string}) into a valid structure type. */
SIGNATURE SubsystemTemplate[ structure, emptySource ]
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/sourcetab/SubsystemTemplate.sign,v 1.1.1.1 1998-06-16 16:00:40 wg Exp $

SORT structure
FUN emptySource: string->structure

IMPORT Seq[subsystem'Config]		ONLY seq
       Seq[subsystem[structure]] 	ONLY seq
       String				ONLY string

IMPORT Config 				ONLY subsystem:SORT
       SubsystemType[structure] 	ONLY subsystem:SORT

/* %The conversion from subsystem-configuration into a subsystem-template containing
source-code- and context-information in done via: */
FUN makeSubsystemTemplate : seq[subsystem'Config] -> seq[subsystem[structure]]











