/* %This module provides generic functions for option searching. The scoping
rules ---described in more detail in the corresponding Diplomarbeit--- are
respected properly. There are three different ways of searching for options in a given
@config-structure:
@itemize @bullet{}
@item The search emcompasses @emph{only} the global option map. 
@item The search emcompasses the @emph{complete} configuration structure and the 
 search is based on the given name of a @b{structure}.
@item The search emcompasses the @emph{complete} configuration structure and the
 search is based on the given name of a @b{subsystem}.
@end itemize
Due to the default
meachnism implemented in the configuration structure one can be sure to find a 
valid setting for each requested option.

The generic parameter @data represents the @SORT of the expected result of the search.
In most cases the result will be of type @bool but sometimes the concrete setting
of an option (maybe a string or a constant) may be requested. This concrete setting is
delived be the result of the search-function. */

SIGNATURE ConfigSearch[data]
-- %- $Id$

SORT data

IMPORT String 		ONLY string

IMPORT Config 		ONLY config:SORT opt:SORT optSetting:SORT


-- %Searching in the global option map:
FUN searchOptionSetting : 
      opt ** (optSetting -> data) ** config -> data

/* %For the application of the following two functions two preconditions 
have to be valid:
@itemize @bullet{}
@item The name of the given structure respectively the name of the given subsystem has to
be @emph{unique} in the whole @config-structure.
@item By @precondition a setting in the global option map has to be present for each
@opt specifies in the module @config.
@end itemize
*/
/* %Searching in the full @config-structure w.r.t. a structure name applying 
a function (2nd parameter) on the option-setting found: */
FUN searchOptionSetting : 
      opt ** (optSetting -> data) ** config ** string -> data

/* %Searching in the full @config-structure w.r.t. a subsystem name applying 
a function (2nd parameter) on the option-setting found: */
FUN searchOptionSettingSub : 
      opt ** (optSetting -> data) ** config ** string -> data











