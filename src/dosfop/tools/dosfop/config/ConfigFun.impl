/* %As the functionalities of the implemented functions of this module are not too
complex we decide @emph{not} to repeat the functionality specification of each test-function
(@FUN) explicitly. */
IMPLEMENTATION ConfigFun
-- %- $Id$

IMPORT Option 		COMPLETELY
       String 		COMPLETELY
       StringConv	COMPLETELY
       Seq		COMPLETELY
       SeqReduce 	COMPLETELY
       SeqMap		COMPLETELY
       Map		COMPLETELY
       MapConv		COMPLETELY
       Set		COMPLETELY
       SetConv		COMPLETELY
       Pair		COMPLETELY
       Char		COMPLETELY
       Com		COMPLETELY
       Stream		COMPLETELY

IMPORT Config 		COMPLETELY
       ConfigSearch	COMPLETELY
       MergeOption	COMPLETELY


-- %$Structure Depending Option Requests$
-- %-------------------------------------

DEF propertiesInclude?( config, searchName ) ==
  searchOptionSetting(PropertiesInclude, On?, config, searchName)

DEF onlyInterfaces?( config, searchName ) ==
  searchOptionSetting(OnlyInterfaces, On?, config, searchName)

FUN newPages? : config ** string -> bool
DEF newPages?( config, searchName ) ==
  searchOptionSetting(NewPages, On?, config, searchName)

DEF importReferencesGeneral?( config, searchName ) ==
  importReferences?(config, searchName) or
   importReferencesNoLibs?(config, searchName)
DEF importReferences?( config, searchName ) ==
  searchOptionSetting(ImportReferences, On?, config, searchName) 
DEF importReferencesNoLibs?( config, searchName ) ==
  searchOptionSetting(ImportReferences, OnNoLibs?, config, searchName)

DEF dropEmptyLines?( config, searchName ) ==
  searchOptionSetting(DropEmptyLines, On?, config, searchName)

DEF usedFunctionTablesGeneral?( config, searchName ) ==
  usedFunctionTables?(config, searchName) or
    usedFunctionTablesMediumInst?(config, searchName) or
      usedFunctionTablesLowInst?(config, searchName) or
        usedFunctionTablesNoInst?(config, searchName) or
          usedFunctionTablesNoLibsGeneral?(config, searchName) 
DEF usedFunctionTables?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, On?, config, searchName) 
DEF usedFunctionTablesMediumInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnMediumInst?, config, searchName) 
DEF usedFunctionTablesLowInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnLowInst?, config, searchName) 
DEF usedFunctionTablesNoInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnNoInst?, config, searchName) 

DEF usedFunctionTablesNoLibsGeneral?( config, searchName ) ==
  usedFunctionTablesNoLibs?(config, searchName) or
    usedFunctionTablesNoLibsMediumInst?(config, searchName) or
      usedFunctionTablesNoLibsLowInst?(config, searchName) or
        usedFunctionTablesNoLibsNoInst?(config, searchName)
DEF usedFunctionTablesNoLibs?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibs?, config, searchName) 
DEF usedFunctionTablesNoLibsMediumInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsMediumInst?, config, searchName) 
DEF usedFunctionTablesNoLibsLowInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsLowInst?, config, searchName) 
DEF usedFunctionTablesNoLibsNoInst?( config, searchName ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsNoInst?, config, searchName) 

DEF levels( config, searchName ) ==
  searchOptionSetting(Levels, cont, config, searchName)
DEF levelsOn?( config, searchName ) ==
  searchOptionSetting(Levels, contSeq?, config, searchName)
 
-- %The boolean function
FUN isSelectedLevel? : config ** option[string] ** string -> bool
/* %implements the handling of levels for individual structures
described in more detail in the corresponding
Diplomarbeit. If no levels are specified the definition */
DEF isSelectedLevel?( _, nil, _ ) == true
/* %matches and results in the value @true. Otherwise the following definition matches
and handles the case of an available @c{levelClassString} : */
DEF isSelectedLevel?( config, avail(levelClassString), searchName ) ==
  IF levelsOn?(config, searchName) THEN
    LET
      selectedLevelSet == asSet'SetConv[string,<](levels(config, searchName))
    IN
      IF {}?(selectedLevelSet) THEN  
        -- if no labels are specified all no labeled documentaries are selected 
        -- and the result has to be false  by definition
        false
      ELSE
        -- the membership-test decides on the result of the function
        levelClassString in selectedLevelSet
      FI
  ELSE
    true
    -- if no levels are specified ALL levels are selected levels!
  FI


-- %$Subsystem Depending Option Requests$
-- %-------------------------------------

DEF propertiesIncludeSub?( config, searchName ) ==
  searchOptionSettingSub(PropertiesInclude, On?, config, searchName)
DEF onlyInterfacesSub?( config, searchName ) ==
  searchOptionSettingSub(OnlyInterfaces, On?, config, searchName)

DEF newPagesSub?( config, searchName ) ==
  searchOptionSettingSub(NewPages, On?, config, searchName)

DEF hierarchyVisuSubGeneral?( config, searchName ) ==
   hierarchyVisuSub?(config, searchName) or
     hierarchyVisuNoSubsSub?(config, searchName) or
       hierarchyVisuNoStructsSub?(config, searchName)  
DEF hierarchyVisuSub?( config, searchName ) ==
  searchOptionSettingSub(HierarchyVisu, On?, config, searchName)
DEF hierarchyVisuNoSubsSub?( config, searchName ) ==
  searchOptionSettingSub(HierarchyVisu, OnNoSubs?, config, searchName)
DEF hierarchyVisuNoStructsSub?( config, searchName ) ==
  searchOptionSettingSub(HierarchyVisu, OnNoStructs?, config, searchName)

DEF importReferencesSubGeneral?( config, searchName ) ==
  importReferencesSub?(config, searchName) or
   importReferencesNoLibsSub?(config, searchName)
DEF importReferencesSub?( config, searchName ) ==
  searchOptionSettingSub(ImportReferences, On?, config, searchName) 
DEF importReferencesNoLibsSub?( config, searchName ) ==
  searchOptionSettingSub(ImportReferences, OnNoLibs?, config, searchName)

DEF dropEmptyLinesSub?( config, searchName ) ==
  searchOptionSettingSub(DropEmptyLines, On?, config, searchName)

DEF usedFunctionTablesSubGeneral?( config, searchName ) ==
  usedFunctionTablesSub?(config, searchName) or
    usedFunctionTablesMediumInstSub?(config, searchName) or
      usedFunctionTablesLowInstSub?(config, searchName) or
        usedFunctionTablesNoInstSub?(config, searchName) or
          usedFunctionTablesNoLibsSubGeneral?(config, searchName) 
DEF usedFunctionTablesSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, On?, config, searchName) 
DEF usedFunctionTablesMediumInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnMediumInst?, config, searchName) 
DEF usedFunctionTablesLowInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnLowInst?, config, searchName) 
DEF usedFunctionTablesNoInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnNoInst?, config, searchName) 

DEF usedFunctionTablesNoLibsSubGeneral?( config, searchName ) ==
  usedFunctionTablesNoLibsSub?(config, searchName) or
    usedFunctionTablesNoLibsMediumInstSub?(config, searchName) or
      usedFunctionTablesNoLibsLowInstSub?(config, searchName) or
        usedFunctionTablesNoLibsNoInstSub?(config, searchName)
DEF usedFunctionTablesNoLibsSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnNoLibs?, config, searchName) 
DEF usedFunctionTablesNoLibsMediumInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnNoLibsMediumInst?, config, searchName) 
DEF usedFunctionTablesNoLibsLowInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnNoLibsLowInst?, config, searchName) 
DEF usedFunctionTablesNoLibsNoInstSub?( config, searchName ) ==
  searchOptionSettingSub(UsedFunctionTables, OnNoLibsNoInst?, config, searchName) 

DEF sortStructuresSubGeneral?( config, searchName ) ==
    sortStructuresTopDownSub?(config, searchName) or
      sortStructuresBottomUpSub?(config, searchName) or
        sortStructuresAlphabeticallySub?(config, searchName) or
          sortStructuresUserDefinedSub?(config, searchName)

DEF sortStructuresTopDownSub?( config, searchName ) ==
    searchOptionSettingSub(SortStructures, TopDown?, config, searchName)
DEF sortStructuresBottomUpSub?( config, searchName ) ==
    searchOptionSettingSub(SortStructures, BottomUp?, config, searchName)
DEF sortStructuresAlphabeticallySub?( config, searchName ) ==
    searchOptionSettingSub(SortStructures, Alphabetically?, config, searchName)
DEF sortStructuresUserDefinedSub?( config, searchName ) ==
    searchOptionSettingSub(SortStructures, UserDefined?, config, searchName)


DEF levelsSub( config, searchName ) ==
  searchOptionSettingSub(Levels, cont, config, searchName)
DEF levelsOnSub?( config, searchName ) ==
  searchOptionSettingSub(Levels, contSeq?, config, searchName)

DEF surveySub( config, searchName ) ==
  searchSurveySub(config, searchName)


/* %The following two function identifiers are @overloaded and implement a search on two
different levels within the @config-structure: */
-- %The internal function
FUN searchSurveySub : config ** string -> option[string]
/* %searches for a survey for a specific subsystem denoted by @c{subsystemSearchName}. If
no subsystem with the given name can be found or no survey is specified for the
given subsystem the result of the function is @nil. The search starts at the top of
the @config structure. */
DEF searchSurveySub(
      config(_, _, _, _, _, subsystems, _) , 
      subsystemSearchName 
    ) ==
  (% / nil)(searchSurveySub(subsystemSearchName) * subsystems)

DEF searchSurveySub( none, _ ) == nil

-- %The internal function
FUN searchSurveySub : string -> subsystem -> option[string]
/* %provides a recursive descent search mechanism on a given subsystem-structure and ---if
present-- all sub-subsystems. If the search fails in this part of the @config-structure
the function returns @nil. */
DEF searchSurveySub( searchName ) 
                   ( subsystem(name, _, survey, _, _, subsystems) ) ==
  IF name = searchName THEN
    survey
  ELSE
    (% / nil)(searchSurveySub(searchName) * subsystems)
  FI

DEF searchSurveySub( _ )( none ) == nil

-- %$Global Project Option Requests$
-- %--------------------------------

-- %$$Global Textual Project Information$
-- %-------------------------------------

DEF topStructureName( config ) ==
  searchOptionSetting(TopStructureName, cont, config)
DEF outputFileName( config ) ==
  searchOptionSetting(OutputFileName, cont, config)
DEF projectName( config ) ==
  searchOptionSetting(ProjectName, cont, config)
DEF authorNames( config ) ==
  searchOptionSetting(AuthorsNames, cont, config)
DEF date( config ) ==
  searchOptionSetting(Date, cont, config)

DEF globalSurvey( config(_, avail(survey), _, _, _, _, _) ) == survey
DEF globalSurvey( _ )                                       == <>
  
DEF libraryIntro( config(_, _, _, _, _, _, avail(libOpt)) ) ==
  IF nil?(libSurvey(libOpt)) THEN 
    <>
  ELSE
    cont(libSurvey(libOpt))
  FI
DEF libraryIntro( _ ) == <>


-- %$$Global Option Settings$
-- %-------------------------

DEF functionalityIndexGeneral?( config ) ==
  functionalityIndex?(config) or
    functionalityIndexMediumInst?(config) or
        functionalityIndexNoInst?(config)
DEF functionalityIndex?( config ) ==
  searchOptionSetting(FunctionalityIndex, On?, config)
DEF functionalityIndexMediumInst?( config ) ==
  searchOptionSetting(FunctionalityIndex, OnMediumInst?, config)
DEF functionalityIndexNoInst?( config ) ==
  searchOptionSetting(FunctionalityIndex, OnNoInst?, config)

DEF conceptIndex?( config ) ==
  searchOptionSetting(ConceptIndex, On?, config)

DEF applicationIndexGeneral?( config ) ==
  applicationIndex?(config) or
    applicationIndexMediumInst?(config) or
      applicationIndexNoInst?(config) or
        applicationIndexNoLibsGeneral?(config)
DEF applicationIndex?( config ) ==
  searchOptionSetting(ApplicationIndex, On?, config)
DEF applicationIndexMediumInst?( config ) ==
  searchOptionSetting(ApplicationIndex, OnMediumInst?, config)
DEF applicationIndexNoInst?( config ) ==
  searchOptionSetting(ApplicationIndex, OnNoInst?, config)
DEF applicationIndexNoLibsGeneral?( config ) ==
  applicationIndexNoLibs?(config) or
    applicationIndexNoLibsMediumInst?(config) or
      applicationIndexNoLibsNoInst?(config)
DEF applicationIndexNoLibs?( config ) ==
  searchOptionSetting(ApplicationIndex, OnNoLibs?, config)
DEF applicationIndexNoLibsMediumInst?( config ) ==
  searchOptionSetting(ApplicationIndex, OnNoLibsMediumInst?, config)
DEF applicationIndexNoLibsNoInst?( config ) ==
  searchOptionSetting(ApplicationIndex, OnNoLibsNoInst?, config)

DEF libraryInclude?( config ) ==
  searchOptionSetting(LibraryInclude, On?, config)
DEF subsystemsInclude?( config ) ==
  searchOptionSetting(SubsystemsInclude, On?, config)

DEF propertiesInclude?( config ) ==
  searchOptionSetting(PropertiesInclude, On?, config)

DEF onlyInterfaces?( config ) ==
  searchOptionSetting(OnlyInterfaces, On?, config)

DEF german?( config ) ==
  searchOptionSetting(Language, German?, config)
DEF english?( config ) ==
  searchOptionSetting(Language, English?, config)


DEF hierarchyVisuGeneral?( config ) ==
  hierarchyVisu?(config) or
    hierarchyVisuNoStructs?(config) or
      hierarchyVisuNoSubs?(config)
DEF hierarchyVisu?( config ) ==
  searchOptionSetting(HierarchyVisu, On?, config) 
DEF hierarchyVisuNoStructs?( config ) ==
  searchOptionSetting(HierarchyVisu, OnNoStructs?, config)
DEF hierarchyVisuNoSubs?( config ) ==
  searchOptionSetting(HierarchyVisu, OnNoSubs?, config)

DEF newPages?( config ) ==
  searchOptionSetting(NewPages, On?, config)


DEF importReferencesGeneral?( config ) ==
  importReferences?(config) or
   importReferencesNoLibs?(config)
DEF importReferences?( config ) ==
  searchOptionSetting(ImportReferences, On?, config) 
DEF importReferencesNoLibs?( config ) ==
  searchOptionSetting(ImportReferences, OnNoLibs?, config)

DEF usedFunctionTablesGeneral?( config ) ==
  usedFunctionTables?(config) or
    usedFunctionTablesMediumInst?(config) or
      usedFunctionTablesLowInst?(config) or
        usedFunctionTablesNoInst?(config) or
          usedFunctionTablesNoLibsGeneral?(config)
DEF usedFunctionTables?( config ) ==
  searchOptionSetting(UsedFunctionTables, On?, config) 
DEF usedFunctionTablesMediumInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnMediumInst?, config) 
DEF usedFunctionTablesLowInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnLowInst?, config) 
DEF usedFunctionTablesNoInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnNoInst?, config) 

DEF usedFunctionTablesNoLibsGeneral?( config ) ==
  usedFunctionTablesNoLibs?(config) or
    usedFunctionTablesNoLibsMediumInst?(config) or
      usedFunctionTablesNoLibsLowInst?(config) or
        usedFunctionTablesNoLibsNoInst?(config)
DEF usedFunctionTablesNoLibs?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibs?, config) 
DEF usedFunctionTablesNoLibsMediumInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsMediumInst?, config) 
DEF usedFunctionTablesNoLibsLowInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsLowInst?, config) 
DEF usedFunctionTablesNoLibsNoInst?( config ) ==
  searchOptionSetting(UsedFunctionTables, OnNoLibsNoInst?, config) 

DEF sortStructuresGeneral?( config ) ==
    sortStructuresTopDown?(config) or
      sortStructuresBottomUp?(config) or
        sortStructuresAlphabetically?(config) or
          sortStructuresUserDefined?(config)

DEF sortStructuresTopDown?( config ) ==
  searchOptionSetting(SortStructures, TopDown?, config)
DEF sortStructuresBottomUp?( config ) ==
  searchOptionSetting(SortStructures, BottomUp?, config)
DEF sortStructuresAlphabetically?( config ) ==
  searchOptionSetting(SortStructures, Alphabetically?, config)
DEF sortStructuresUserDefined?( config ) ==
  searchOptionSetting(SortStructures, UserDefined?, config)


DEF dropEmptyLines?( config ) ==
  searchOptionSetting(DropEmptyLines, On?, config)


DEF levels( config ) ==
  searchOptionSetting(Levels, cont, config)
DEF levelsOn?( config ) ==
  searchOptionSetting(Levels, contSeq?, config)

-- %The boolean function
FUN isSelectedLevel? : config ** option[string] -> bool
/* %implements the handling of levels described in more detail in the corresponding
Diplomarbeit. If no levels are specified the definition */
DEF isSelectedLevel?( _, nil ) == true
/* %matches and results in the value @true. Otherwise the following definition matches
and handles the case of an available @c{levelClassString} : */
DEF isSelectedLevel?( config, avail(levelClassString) ) ==
  LET
    selectedLevelSet == asSet'SetConv[string,<](levels(config))
  IN
    IF {}?(selectedLevelSet) THEN  
      -- if no labels are specified all labels are selected 
      -- and the result has to be true by definition
      true
    ELSE
      -- the membership-test decides on the result of the function
      levelClassString in selectedLevelSet
    FI



-- %$$Functions on Macro Definitions$
-- %---------------------------------


FUN macroNames : config -> set[string,<]
/* %The names of all defined macros are stored in the domain of the macro map. */
DEF macroNames( config(_, _, macroMap, _, _, _, _) ) ==
  dom(macroMap)
-- %If no valid configuration is defined, no macroNames can be extracted:
DEF macroNames( _ ) == {}


FUN getMacroDef : config ** string -> macroDef
/* %The macro definition can be found by simply applying the @map dereferencing mechanism
of the @OPAL-library. This operation can fail at runtime! */
DEF getMacroDef( config(_, _, macroMap, _, _, _, _), macroName ) ==
  macroMap ! macroName

/* %" @c{DEF getMacroDef( none, _ ) == undef}" an application of an empty
configuration database has to fail at runtime! */

-- %$Create an Output Stream$
-- %-------------------------

DEF outputStreamCreate( config ) ==
  IF <>?(outputFileName(config)) THEN
    yield(okay(stdOut))
  ELSE
    create(outputFileName(config)`)  
  FI

-- %$Miscellaneous$

DEF allUsrStructures(config:config) == dom(flatStructs(config))
