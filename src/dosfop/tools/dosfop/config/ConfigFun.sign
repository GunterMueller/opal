/* %@c{ConfigFun} provides the general user interface to the setting of
options in the @c{config}-structure. One has to distinguish option-setting
requests w.r.t. the @emph{global} setting of options and requests that deal with
option-setting concerning a distinct specified structure or subsystem.

Convenience functions for dealing with the DOSFOP macro mechanism are supplied, too.

Finally the generation of an option-depending output-stream is implemented.
*/
SIGNATURE ConfigFun
-- %- $Id$

IMPORT String 		ONLY string <
       Option[string] 	ONLY option
       Seq[string]	ONLY seq
       Set[string,<]	ONLY set
       Stream		ONLY output
       Com[output]	ONLY com

IMPORT Config 		ONLY config:SORT optSetting:SORT macroDef:SORT


-- %$Structure Depending Option Requests$
-- %-------------------------------------
/* %The postfix "General" indicates a comprehension of the 
immediately following functions that
enable requests for the same option @emph{type} but a different @emph{option setting}.
The comprehension supplies an @emph{OR}-composition of these functions and enables 
a concise formulation of general requests. */

/* %The @string-parameter denotes the structure whose setting is requested. The name
of each boolean function indicates which option should be 
examined. All structure-specific
testing functions have a global counterpart, which means that the structure
depending test-functions are a proper subset of the global test-functions: */
FUN propertiesInclude?
    onlyInterfaces?

    importReferencesGeneral? -- comprehends the following 2 functions
    importReferences?        -- full import references
    importReferencesNoLibs?

    newPages?
    dropEmptyLines?    

-- %The function
    usedFunctionTablesGeneral?
/* %comprehends the following more specific boolean functions. It delivers the value 
@true if any of the more specific functions deliver the value @true for the same 
parameters. */ 
    usedFunctionTables?            -- full used-function-tables
    usedFunctionTablesMediumInst?
    usedFunctionTablesLowInst?
    usedFunctionTablesNoInst? 
    usedFunctionTablesNoLibsGeneral?
    usedFunctionTablesNoLibs?
    usedFunctionTablesNoLibsMediumInst?
    usedFunctionTablesNoLibsLowInst?
    usedFunctionTablesNoLibsNoInst? : config ** string -> bool

/* %Extract the sequence of level-descriptors specified for the structure 
denoted as @string. The function fails if no levels are specified! So one has to
check the presence of level definition via @c{levelsOn?} first! */
FUN levels    : config ** string -> seq[string]
FUN levelsOn? : config ** string -> bool

FUN isSelectedLevel? : config ** option[string] ** string -> bool


-- %$Subsystems Option Requests$
-- %----------------------------

/* %There is one additional option that can be requested w.r.t. a specific
subsystem-name 
given as the second parameter of the following functions. This option 
handles configuration requests on hierarchy visualization: */
FUN propertiesIncludeSub?
    onlyInterfacesSub?

    importReferencesSubGeneral? -- comprehends the following 2 functions
    importReferencesSub?        -- full import references
    importReferencesNoLibsSub?

    newPagesSub? 
    dropEmptyLinesSub?    

-- %The function
    usedFunctionTablesSubGeneral?
/* %comprehends the following more specific boolean functions. It delivers the value 
@true if any of the more specific functions deliver the value @true for the same 
parameters. */ 
    usedFunctionTablesSub?            -- full used-function-tables
    usedFunctionTablesMediumInstSub?
    usedFunctionTablesLowInstSub?
    usedFunctionTablesNoInstSub? 
    usedFunctionTablesNoLibsSubGeneral?
    usedFunctionTablesNoLibsSub?
    usedFunctionTablesNoLibsMediumInstSub?
    usedFunctionTablesNoLibsLowInstSub?
    usedFunctionTablesNoLibsNoInstSub? 

-- %These functions query the settings for the sorting of structures
    sortStructuresSubGeneral?
    sortStructuresTopDownSub?
    sortStructuresBottomUpSub?
    sortStructuresAlphabeticallySub?
    sortStructuresUserDefinedSub? : config ** string -> bool

/* %Extract the sequence of level-descriptors specified for the structure 
denoted as @string. The function fails if no levels are specified! So one has to
check the presence of level definition via @c{levelsSub?} first! */
FUN levelsSub    : config ** string -> seq[string]
FUN levelsOnSub? : config ** string -> bool

    hierarchyVisuSubGeneral?  -- comprehends the 3 following functions
    hierarchyVisuSub?
    hierarchyVisuNoSubsSub?
    hierarchyVisuNoStructsSub? : config ** string -> bool
     
FUN surveySub : config ** string -> option[string]

-- %$Global Project Option Requests$
-- %--------------------------------

/* %The function declarations */
FUN topStructureName
    outputFileName 
    projectName
    authorNames
    date  
    globalSurvey 
    libraryIntro : config -> string
/* %provide access to the global @string-based informations stored in the
configuration structure. */

FUN functionalityIndexGeneral?     -- comprehends the following 3 functions
    functionalityIndex?            -- full functionality index
    functionalityIndexMediumInst?
    functionalityIndexNoInst?

    conceptIndex?

    applicationIndexGeneral?       -- comprehends the following 7 functions
    applicationIndex?              -- full application index
    applicationIndexMediumInst?
    applicationIndexNoInst?
    applicationIndexNoLibsGeneral?
    applicationIndexNoLibs?
    applicationIndexNoLibsMediumInst?
    applicationIndexNoLibsNoInst?

    propertiesInclude?
    libraryInclude?
    subsystemsInclude?
    onlyInterfaces?

    hierarchyVisuGeneral?           -- comprehends the following 3 functions
    hierarchyVisu?                  -- full hierarchy visualization
    hierarchyVisuNoStructs?
    hierarchyVisuNoSubs?

    newPages?

    importReferencesGeneral?       -- comprehends the following 2 dunctions
    importReferences?              -- full import references
    importReferencesNoLibs?

    usedFunctionTablesGeneral?     -- comprehends the following 9 functions
    usedFunctionTables?            -- full used function tables
    usedFunctionTablesMediumInst?
    usedFunctionTablesLowInst?
    usedFunctionTablesNoInst?
    usedFunctionTablesNoLibsGeneral?
    usedFunctionTablesNoLibs?
    usedFunctionTablesNoLibsMediumInst?
    usedFunctionTablesNoLibsLowInst?
    usedFunctionTablesNoLibsNoInst?

    sortStructuresGeneral?
    sortStructuresTopDown?
    sortStructuresBottomUp?
    sortStructuresAlphabetically?
    sortStructuresUserDefined?

    dropEmptyLines?
    english?
    german? : config -> bool

/* %Extract the sequence of level-descriptors specified for the structure 
denoted as @string. The function fails if no levels are specified! So one has to
check the presence of level definition via @c{levelsOn?} first! */
FUN levels    : config -> seq[string]
FUN levelsOn? : config -> bool

FUN isSelectedLevel? : config ** option[string] -> bool

-- %Handling access to macro-definitions:
FUN macroNames : config -> set[string,<]
FUN getMacroDef : config ** string -> macroDef

-- %$Generation of a Configuration Dependend Output Stream$
-- %-------------------------------------------------------

-- %The function 
FUN outputStreamCreate : config -> com[output]
/* %generates an output stream depending on the global option setting of the
@config-structure. 

@Precondition: The option @c{OutputStream} has to be set 
to a valid value (see structure @c{Config}). */


-- %$Miscellaneous$
-- %retrieve all structures as a set
FUN allUsrStructures: config -> set[string, <]
