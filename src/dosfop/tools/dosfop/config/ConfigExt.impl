IMPLEMENTATION ConfigExt

IMPORT ComState[option[set[string, <]]]  COMPLETELY
       Option COMPLETELY
       OptionMap ONLY *
       Com ONLY com EXEC fail? okay? data succeed ans
       Stream ONLY load
       SetConv ONLY asSet
       Set[string,<] ONLY set in +
       String ONLY string ! <
       ComCompose ONLY & ;
       Set ONLY incl

FUN ceStateId: stateId
DEF ceStateId == EXEC(stateId(nil))



DEF init(fn) ==
       load(fn); (\\ onlys? .
       IF onlys? fail? THEN ceStateId => (\\ _ . nil)
       IF onlys? okay? THEN ceStateId => (\\ _ . avail(asSet(data(onlys?))))
       FI
       )

DEF incl(name) == ceStateId => (\\ old. incl(name, _) * old)
DEF incl(names) == ceStateId => (\\ old. (asSet(names) +  _) * old)

DEF all() == ceStateId => (\\ _ . nil)

FUN toplevel: string
DEF toplevel == !(".")

DEF includeToplevel? == 
  get(ceStateId) & (\\ externalOnlys.
  IF externalOnlys nil? THEN succeed(true)
  ELSE succeed(toplevel in cont(externalOnlys))
  FI
  )

DEF include?(s) == 
  get(ceStateId) & (\\ externalOnlys.
  IF externalOnlys nil? THEN succeed(true)
  ELSE succeed(s in cont(externalOnlys))
  FI
  )
