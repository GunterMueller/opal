/* %InterOpal contains context information for each @OPAL-module in a 
special @OPAL-accessable structure. As one of the goals of our DOSFOP
documentation system is the exploitation of inherent documentation information,
we use as much context information of this database as possible. Unluckily the
internal representations have to be worked off in order to be presentable to
human documentation readers.

The present module provides conversion functions that compile the InterOpal
internal representation to human readable string notatations. Furthermore 
functions for calculations on InterOpal-generated positions of program-objects
are supplied in order to merge the token-representations produced during the
DOSFOP scanning-process with the context information produced by the Opal
Compilation System at compilation time. This amalgamation is realized in the 
higher-level context-generating modules. */
SIGNATURE InterOpalFun
-- %- $Id$

-- %We only have to import the sorts from the InterOpal-interface!
IMPORT InterOpal ONLY interOpal:SORT name:SORT formula:SORT kind:SORT
                      pos:SORT eqn:SORT part:SORT object:SORT fct:SORT
   
IMPORT String      ONLY string
       Seq[pos]    ONLY seq
       Seq[eqn]    ONLY seq
       Seq[name]   ONLY seq
       Seq[string] ONLY seq
       Option[interOpal] ONLY option

-- %$Information Extraction$
-- %------------------------
-- %Given a concrete InterOpal representation the function
FUN getImports : interOpal -> seq[string]
/* %extracts the names of the imported structures. They are stored into a
sequence of string s and do not contain any parameter information in case of
parameterized strutures. The names of the structures are sorted in alphbetical
order and every name occurs only once in the list. */

/* %The following variant treats a non-available InterOpal correctly. */
FUN getImports : option[interOpal] -> seq[string]

-- %$String Conversions$
-- %--------------------
/* %As the internal representation of the InterOpal database is not readable
by humans, conversion functions for ingredients relevant to the DOSFOP
documentation process have to be provided: */

/* %The following functions translate internal representations for @c{kind}, @c{name},
and @c{seq[name]} into a @string. A @c{verboseLevel} has to be given so that
each function can vary the extent of annotation. The @c{interOpal}-parameter has to
be given in order to extract functionalities of the main structure as well as for the
imported structures. */
FUN kind2String : kind      ** verboseLevel ** interOpal -> string
FUN fct2String  : fct ** verboseLevel ** interOpal -> string
FUN name2String : name      ** verboseLevel ** interOpal -> string
FUN inst2String : seq[name] ** verboseLevel ** interOpal -> string

/* %The user can specify three levels to influence the extent of annotation
conversion, realized by the conversion functions above. 
@table @code
@item v1
The conversion is done w.r.t. a @emph{complete annotation} that can be extracted
from the InterOpal-database.
@item v2
The kind is omitted.
@item v3
Just the @SORT-names and the instantiations are converted.
@end table
*/
TYPE verboseLevel == v1    -- complete names 
                     v2    -- no kind
                     v3    -- no kinds and no origins

/* %The conversion of formulas into @TeX{} and Info compilable representation is not
fully implemented as complete expressions are not handled. They can be considered as
protypes: */
FUN formula2TeX : formula ** interOpal -> string
FUN formula2Info: formula ** interOpal -> string

-- %$Calculations on InterOpal Positions$
-- %-------------------------------------
/* %As the relationship between the scanned source code and the InterOpal
information is established mainly by position matching, the following functions
provide some functionalities needed in connection with the DOSFOP context generation. */

/* %In the InterOpal representation each position has a data-field that indicates
the referenced structure-module. By providing a decision-function */
FUN extractValidPosSeq  : seq[pos] ** (part->bool) -> seq[pos]
/* % reduces a given @c{seq[pos]} to the positions that are denoted by the given
boolean function. */

/* %For a given @c{object} and the InterOpal representation where it is implemented
the position of the first implementing equation and @emph{all} implementing
equations are delivered. If no equations can be found the returned positon
is @c{unknown} and the @c{seq[eqn]} is empty: */
FUN getPosAndEquations  : object ** interOpal -> pos ** seq[eqn]

/* %A less-relationship based on the row of a position needed for application
of positions as domains in maps: */
FUN < : pos ** pos -> bool

/* %Get the minimal position of two positions. The comparison is based on rows 
@emph{and} columns! Notice that @c{unknown}-positions are always less than any
other position. */
FUN minPos : pos ** pos -> pos









