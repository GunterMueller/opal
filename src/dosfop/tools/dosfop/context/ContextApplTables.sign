/* %Application Tables (ofter named Used-Function-Tables) are one element
in out concept of generated documentation. They provide a small index
encompassing the implementation of one single function. This mini-index
provides an overview of the  applied functions in one function implementation. This
module provides all means that are necessary for storing and building internal
representations for application tables that can be used during translation 
later on. */ 
SIGNATURE ContextApplTables
-- %- $Id$

IMPORT String 				ONLY string
       Nat				ONLY < nat
       Seq[application] 		ONLY seq
       Seq[applContextEntry] 		ONLY seq
       Map[nat,<,seq[applContextEntry]] ONLY map
       InterOpal			ONLY interOpal:SORT object:SORT

IMPORT Config 				ONLY config:SORT

/* %This @TYPE stores the application information of one single function
implementation. The @c{identifier} element stores the name and the
functionality of the implemented function. The @c{applications} contain
the names and origins of all applied functions. */ 
TYPE applContextEntry == applContextEntry(
                           identifier   : string,
                           applications : seq[application] 
                         )
/* %The variant @c{defModuleName} stores the origin of the applied identifier
with configurable verbosity in case of parameterized modules. */ 
TYPE application == application( appliedFunctionName : string,
                                 defModuleName       : string )


-- %Based on the given @c{interOpal} structure the function
FUN updateApplMap : 
      object ** interOpal ** map[nat,<,seq[applContextEntry]] ** config ->
        map[nat,<,seq[applContextEntry]]
/* %builds up the mapping from source-code lines to the sequence of 
application table structures for a given @c{object}. There has 
to be a @emph{sequence} of @c{applContextEntry} because the
@OPAL language definition allows the implementation of more than one
function in one source-code line. The @c{config} parameter influences the
verbosity of the annotation for references parametized structure as well
as the distinction between library- and user-implemented structures and
its occurence in the used-function-table. */  
