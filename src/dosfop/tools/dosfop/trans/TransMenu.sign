/* %Menus provide a powerful means to browse through the contents of a project 
implementation. They are used in connection with the generated info file that
enables the reader to examine the project sources as a hypertext. Menus administrate
references between different modules of the documented project. DOSFOP uses
menus in nearly all generated Info nodes, so it seems to be adequate to define
a particular data-type for menus. As menus are constructed by strings that
represent pointers to Info nodes we need constructor-functions that build up
sequences of single menu entries. 

During the translation process we need a textual representation of the internally
constructed sequence of menu entries. We implemented functions that realize 
a conversion in this opposite direction, too. */
SIGNATURE TransMenu
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/trans/TransMenu.sign,v 1.1.1.1 1998-06-16 16:00:41 wg Exp $

IMPORT String          			ONLY string:SORT
       Seq[menuEntry]  			ONLY seq:SORT
       Seq[string]     			ONLY seq:SORT
       Seq[subsystem[usrSourceInfo]] 	ONLY seq:SORT
       Seq[subsystem[libSourceInfo]] 	ONLY seq:SORT
     
IMPORT SourceTab 			ONLY libSourceInfo:SORT 
                                             usrSourceInfo:SORT
       SubsystemType[libSourceInfo] 	ONLY subsystem:SORT
       SubsystemType[usrSourceInfo] 	ONLY subsystem:SORT
       Config				ONLY config:SORT

/* %A single menu entry consists of a @c{nodeName} that is used as a node reference and
an arbitrary @c{nodeNameComment} that can be applied to formulate some explanations
on the node referenced by @c{nodeName}. */
TYPE menuEntry == menuEntry( 
                    nodeName        :string, 
                    nodeNameComment :string 
                  )

-- %$Build Internal Representations$
-- %--------------------------------
/* %The first parameter for all of the following functions is handled
   as a sequence of node reference and is mapped into the @c{nodeName}
   component of the a @c{menuEntry} element.

 The first @string-parameter is used as an extension for all
 @c{nodeName} components and is simply appended to each element in the
 @c{seq[string]}. The second @string-parameter specifies an arbitrary
 comment that is inserted in each @c{nodeNameComment} comment
 component. This is the only function that inserts a non-empty string
 in the second @c{menuEntry} type: 
*/

FUN strings2MenuEntries : seq[string] ** string ** string -> seq[menuEntry]

-- %The insertion of @c{nodeNameComment} is not supported by the following function:
FUN strings2MenuEntries : seq[string] ** string -> seq[menuEntry]

/* %Rather than appending the string, we supply a function to be
   applied on the elements */
FUN strings2MenuEntries : seq[string] ** (string -> string) -> seq[menuEntry]

/* %The @string-sequence is directly transformed into the @c{nodeName} component
of each element of the @c{menuEntry}-sequence: */

FUN strings2MenuEntries : seq[string] -> seq[menuEntry]

-- %$Conversion of Subsystems$
-- %--------------------------
/* %Given a sequence of user-defined or library-subsystem specifications 
the following two
functions construct menu references to all lower-level subsystem nodes as well as all
structure overviews for structures appearing in the specified subsystem source table. 
The abstraction levels of nested subsystem menus are visualized by indentation. */
FUN subsystems2MenuEntries : 
      seq[subsystem[usrSourceInfo]] ** config -> seq[menuEntry]

FUN subsystems2MenuEntries : 
      seq[subsystem[libSourceInfo]] ** config -> seq[menuEntry]

-- %$Build Texinfo Strings$
-- %-----------------------
-- %The function
FUN buildMenu        : seq[menuEntry] -> string
/* %constructs a Texinfo-translateable menu-specification given an internal 
menu-entry-sequence representation. Whereas the function */
FUN buildMenuEntries : seq[menuEntry] -> string
/* %only translates an internal menu representation into the successive Texinfo
menu entries. The construction of a menu-context does not occur! This is useful
for handmade menus that are built by concatenation of many independent
internal menu representations or for te inclusion of specific internal
explanation into a menu (e.g. a headline). */



