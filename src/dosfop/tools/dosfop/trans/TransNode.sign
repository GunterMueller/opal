/* %The fundamental translation algorithm of the contents of an 
@OPAL-module is not depending on its type (SIGNATURE, IMPLEMENTATION, ...). Due to this
fact, this module provides a function that translates the contents of any
given structure and adds context-information that has been deduced in previous
stages of the DOSFOP compilation process. 

Moreover, subsectioning of @OPAL modules is translated into the Texinfo intermediate
representation considering the appropriate node-content w.r.t. Info and the correct
sectioning depth w.r.t. the printable @TeX{} documentation.

A data-structure for node-environment specification and a corresponding function
for compiling the node-context information into Texinfo is implemented, too. */
SIGNATURE TransNode
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/trans/TransNode.sign,v 1.1.1.1 1998-06-16 16:00:41 wg Exp $

IMPORT String          ONLY string
       Seq[token]      ONLY seq
       Seq[string]     ONLY seq
       Seq[outputElem] ONLY seq
       Seq[seq[token]] ONLY seq

IMPORT Token            ONLY token:SORT
       TransType        ONLY outputElem:SORT
       TransHelp        ONLY partType:SORT
       Context          ONLY context:SORT
       Config           ONLY config:SORT
       Content          ONLY content:SORT

/* %For each Texinfo-node a specific hypertext environment has to be defined. The
@TYPE @c{environment} defines a concise data-structure needed for the 
compilation of a node into the Texinfo intermediate language. The first four elements
denote names of Texinfo nodes, whereas @c{partType} and @c{partName} are used for
headline definition for the printable documentation. */

TYPE environment == env( 
                      nodeName : string,
                      nextNode : string,
                      prevNode : string,
                      upNode   : string,
                      partType : partType,
                      partName : string
                    )

-- %The subsequent functions
FUN buildHeader buildHeaderO: environment -> outputElem
/* %translates a given @c{environment}-structure into a @c{texinfo}
    @c{outputElem}ent that contains a Texinfo @c{@@node}-specification as
    well as a Texinfo structuring command (e.g. @c{@@section}) for the
    @TeX{}-translation. 

    The @code{O} variant allows exclusion of the node line by setting the
    flag @code{dfSingleNode}.
*/

-- %This variant
FUN buildHeader: partType ** string -> outputElem
/* %omits the @c{@@node} specification. */

/* %@Specification:

@c{buildBody(content,context,nextNode,prevNode,partType,moduleName,config)}

@table @code
@item content
Denotes the complete source-code of the considered module named @c{moduleName}.
@item context
The context structure of the module named @c{moduleName}.
@item nextNode
The name of the node that follows the translation of the @c{contents}.
@item prevNode
The node-name that preceeds the translation done by @c{buildBody}.
@item partType
The parameter indicates the basic structuring depth of the translation. Further
substructuring is based on the value of this parameter.
@item config
The global configuration database.
@end table

The function delivers a sequence of output-elements that can be integrated into the
translation context. */ 
FUN buildBody : content ** context ** string ** string ** partType **
                    string ** config -> 
                      seq[outputElem]

