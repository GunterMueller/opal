/* %Based on the information extracted from the InterOpal intermediate
representation this module implements the construction of tables that contain
the @emph{origin} of every applied function identifier.
Line numbers in the source-code serve as reference between the scanned source 
code and the
application positions stored in the application map constructed during the DOSFOP
context-generation process. */ 
SIGNATURE TransApplTab
-- %- $Id$

IMPORT Nat 				ONLY nat <
       Map[nat,<,seq[applContextEntry]]	ONLY map
       Seq[applContextEntry] 		ONLY seq
       Seq[outputElem] 			ONLY seq
       Seq[token] 	 		ONLY seq

IMPORT Config		ONLY config:SORT
       Token 		ONLY token:SORT
       Context 		ONLY applContextEntry:SORT
       TransType	ONLY outputElem:SORT

/* %This function looks up all relevant application information stored in a
context-@c{map}. The context map encompasses application information for a
complete source-code module. As modules can be split by special DOSFOP
documentaries, not all the application information is relevant, because we want to
locate the generated application-tables at the end of each sub-part or at the end
of the complete module if no subsectioning occurred. By examining the line-positions
in the given @c{seq[token]}, be decide which map-elements have to be extracted and
put into a separate so called @emph{used-function-table}. 

We have to look at the @c{config}uration-database to decide on the 
language that has to be used for the typesetting of the table headline. The extent and
the verbosity of origin-annotation has already been considered during the
construction of the map! 

The result contains @c{texinfo} and @c{documentation} @c{outputElem}ents specifying the 
Texinfo string for the typesetting of all relevant tables. The @c{token}
contents are @emph{not} copied to the output stream. */

FUN buildAllApplTables :
  seq[token] ** map[nat,<,seq[applContextEntry]] ** config -> seq[outputElem]
