/* %This module is based on the platform of the functionalities provided by the
structures @c{MyString} and @c{CharClass}. It lifts some of the measures implemented
by @c{CharClass} to strings.

Moreover the administration of special Texinfo properties is done in this module. This
comprises both string convenience functions as well as constants storing some
basic lexicalic units of the intermediate language Texinfo. */
SIGNATURE SpecialString
-- %- $Id$

IMPORT String  		ONLY string <
       Nat     		ONLY nat
       Set[string, <] 	ONLY set

/* %The following functions realize the application of an escape-mechanism for
the languages @TeX{} as well as Texinfo according to an appropriate set
of special characters defined in the module @c{CharClass}. These functions have to
be applied for all string translation processes that produce terminal output
for the respective languages. */
FUN escTeX : string -> string
FUN escTexinfo : string -> string

/* % This function surrounds all words (sequences of non-space characters)
with @code{w@{} @dots{} @code{@}} and thus prevents texinfo from 
breaking these words. */
FUN noBreakTexinfo: string -> string

/* %The two constants */
FUN texinfoSpecialCommands : set[string,<]
FUN texinfoCommands        : set[string,<]
/* %contain all Texinfo commands that are valid in the context of DOSFOP. There
is a distinction between so called "special commands" constructed by 
non-letter-characters and general Texinfo commands that are bases upon
letter sequences. All string elements start with the special Texinfo-character
@c{@@}. 
*/


/* %DOSFOP 1.77 and newer check not whether commands are valid, but what checks
what commands are forbidden. The forbidden commands are assembled
here. */
FUN forbiddenTexinfoCommands: set[string,<]


/* %The functions */
FUN prefill postfill : string ** nat -> string
/* %implement a formatted output of a given string w.r.t. a special
length delimiter (@c{nat}). The @c{string}-parameter is filled up with additional
whitespace characters if its orininal length is less than the given delimiter.
The filling-up-process is done in pre-order or in post-order depending on the
applied function.

If the length of the given string is larger than the demanded maximal width
both functions cut off the string at its end. */

FUN optInBrackets : bool ** string -> string


