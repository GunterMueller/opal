IMPLEMENTATION MyMap[data1,<,data2]
-- %- $Id$

IMPORT Set	COMPLETELY
       Seq	COMPLETELY
       Map	COMPLETELY


/* %All elements of @c{map1} are to be integrated into @c{map2}. Initially the
complete domain of @c{map1} has to be passed to @c{mergeByDomain} as parameter. */
DEF merge( map1, map2 ) == mergeByDomain(map1, map2, dom(map1))

/* %The function */
FUN mergeByDomain : map[data1,<,seq[data2]] ** map[data1,<,seq[data2]] ** 
                      set[data1,<] ->
                        map[data1,<,seq[data2]]
/* %does a concatenation of the two maps @c{map1} and @c{map2}, based upon the
parameter @c{dom1}. Each element of @c{dom1} is subsequently handled as a starting
point of one concatenation process. Of course @c{dom1} has to be a subset
of the domain of @c{map1}. 

If the considered domain @c{dom1} is empty, the concatenation process terminates
and @c{map2} contains the complete concatenation of @c{map1} and @c{map2}.
Otherwise the concatenation is done for an arbitrary element of the considered
domain @c{dom1}. If the considered element is @emph{not} member of the domain of
@c{map2}, the mapping of @c{map1} is copied into @c{map2}. If the considered 
domain element ist defined for both maps, the concatenation of the respective
codomains is copied into @c{map2}. */
DEF mergeByDomain( map1, map2, dom1 ) ==
  IF {}?(dom1) THEN
    map2
  ELSE
    LET
      actElem == arb(dom1)
      newMapElem == IF def?(actElem, map2) THEN
                      (map1 ! actElem) ++ (map2 ! actElem)
                    ELSE
                      map1 ! actElem
                    FI
    IN
      mergeByDomain(
        map1, 
        def(actElem, newMapElem, map2), 
        actElem excl dom1
      )
  FI








