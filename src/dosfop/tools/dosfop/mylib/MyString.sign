/* %
This module provides some basic functionalities on strings often referred to in our
DOSFOP implementation. Therefore a short-hand notatation has to be realized in the
higher-level modules which cannot be achieved by the direct usage of the library
functions of the Bibliotheca-Opalica and the fundamental @OPAL language
mechanisms. */
SIGNATURE MyString
-- %- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/dosfop/tools/dosfop/mylib/MyString.sign,v 1.1.1.1 1998-06-16 16:00:36 wg Exp $

IMPORT String         ONLY string
       Seq[string]    ONLY seq
       Char 	      ONLY char
       Nat ONLY nat
       Option[string] ONLY option

/* %The following functions provide a concise notatation for the usage of
the characters @c{newline} and @c{space} in the process of string concatenations
as the type conversion from @c{char} to @c{string} is done implicitly: */
FUN nl : string
FUN sp : string

/* %Function for the Conversion of a single @c{denotation} into a string followed by
a @c{newline}-character: */
FUN line : denotation -> string

/* %@OPAL has some difficulties to recognize and translate a large number of
subsequent infix-notations in the progress of compilation. Especially string-processing
often demands a lot of infixes in concatenations. The ---heavily overloaded---
function @c{conc} provides a convenient measure to concatenate sequences of
substrings to a resulting string, without missing the notational ease of
@OPAL infix notation. This implementation is a compromise between lots of opening- and 
closing-bracket brackets when using infix notation efficiently and the 
unsatisfactory performance of the @OPAL compiler when decomposing subsequent
infix notations. */
FUN conc : string ** string -> string
FUN conc : string ** string ** string -> string  
FUN conc : string ** string ** string ** string -> string 
FUN conc : string ** string ** string ** string ** string -> string
FUN conc : string ** string ** string ** string ** string ** string 
           -> string
FUN conc : string ** string ** string ** string ** string ** string **
           string -> string
FUN conc : string ** string ** string ** string ** string ** string **
           string ** string -> string
FUN conc : string ** string ** string ** string ** string ** string **
           string ** string ** string -> string
FUN conc : string ** string ** string ** string ** string ** string **
           string ** string ** string ** string -> string 


/* %The following function supplies the functionality of splitting of a string
into a sequence of substrings. The division takes place due to a 
splitting-character (@c{char}) given as the second parameter of the function. The 
splitting-character does not occur in the resulting substrings anymore. An empty
string produces an empty sequence of substrings. */
FUN list2StringSeq : string ** char -> seq[string]


/* %Replace all nasty characters by underscore, so that a valid filename
    results. This function should work the same way as @code{asFilename}
    in @code{texi2html}. */
FUN asFilename: string -> string

/* %Repeat string as often as indicated. */
FUN x : nat ** string -> string

/* %generate a space, if the last character of the string is a special
character to @OPAL . */

FUN optionalSpace: string -> string

/* %Check, whether @code{s1} is prefix of @code{s2}.
    If so, return the reast of @code{s2}, else return nil. Takes @OPAL
    conventions into account. Does not macth the empty string as prefix. */
FUN <?| : string ** string -> option[string]

/* %As above, but do not take @OPAL conventions into account and
    do match the empty string as prefix. */
FUN <??| : string ** string -> option[string]

/* %Mirror for @code{<??|}: match a suffix and return the non-suffix part. 
  Note: the second string is the suffix candidate! */
FUN |??> : string ** string -> option[string]

/* %@ignore
copied from current version of BIBLIOTHECA OPALICA, to ensure backwards
compatibility with 2.1-e */

/* %Concatenate: @code{+/+(d)(s1, s2)} concatenate strings, put
@code{d} inbetween, if both are nonempty. */
FUN +/+ : char -> string ** string -> string 
FUN +/+ : denotation -> string ** string -> string 
FUN +/+ : string -> string ** string -> string 

FUN split   : (char -> bool) ** string -> seq[string]
-- %@end ignore

