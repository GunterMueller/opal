IMPLEMENTATION WinTclTk
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  DEBUG           COMPLETELY

IMPORT  Void            COMPLETELY
        ProcessArgs     ONLY    arg

IMPORT  Nat             COMPLETELY
        NatConv         COMPLETELY
        Real            COMPLETELY
        BTUnion         COMPLETELY
        Array           COMPLETELY
        Denotation      COMPLETELY
        Char            COMPLETELY
        String          COMPLETELY
        StringConv      COMPLETELY
        StringFormat    COMPLETELY
        StringFilter    COMPLETELY
        StringMap       COMPLETELY
        Seq             COMPLETELY
        Option          COMPLETELY
        Pair            COMPLETELY

IMPORT  Com             COMPLETELY
        ComCompose      COMPLETELY
        ComAction       ONLY    done
        ComState        COMPLETELY
        ComStateWith    COMPLETELY


IMPORT  Tk[void]        ONLY    createApp
                                retain submit update

        Tcl[void]       COMPLETELY




-- %$Callbacks and Widgets$ ==================================================

DATA callback   == callback(no: nat, asTk: string)
DATA widget     == widget(parent: widget, callback: callback, asTk: string)
                   root(asTk: string)

FUN callback    : nat   -> callback
DEF callback(No) == callback(No, !("@") :: !(`(No)))

FUN widget      : widget ** callback -> widget
DEF widget(Parent, Callback) ==
    widget(Parent, Callback, asTk(Parent) ++ (!(".") :: asTk(Callback)))
DEF root        == root(<>)

DATA oper       == oper(com: seq[string] -> com[string])
FUN  nop        : oper
DEF  nop        == oper(\\ _ . succeed(<>))

DATA state      == state(
                        opers           : array[oper],
                        nextNo          : nat,
                        freeList        : seq[callback]
                   )

FUN state       : stateId[state]
DEF state       == EXEC(stateId(state(init(100, nop), 0, <>)))



DEF callback ==
    with(state, \\ S .
        -- the following calculation must be atomic!
        IF ::?(freeList(S)) THEN
            (state(opers(S), nextNo(S), rt(freeList(S))), 
             ft(freeList(S)) & done)
        ELSE
            LET NewOpers == IF nextNo(S) >= #(opers(S)) THEN
                                extend(opers(S), #(opers(S)) / 2, nop)
                            ELSE opers(S) FI
                Callback == callback(nextNo(S))
            IN
            (state(NewOpers, succ(nextNo(S)), freeList(S)),
             Callback & define(tclTk, `(asTk(Callback)), call(nextNo(S))))
        FI
    )                                                   & (\\ Callback_Act .
    2nd(Callback_Act)                                   &
    succeed(1st(Callback_Act))
    )

    FUN call : nat -> interpreter ** seq[string] -> com[string]
    DEF call(No)(_, Args) ==
        get(state, \\ S . opers(S) ! No)                & (\\ Oper .
        com(Oper)(rt(Args))
        )

DEF freeCallback(Callback) ==
    with(state, \\ S. state(upd(no(Callback), nop, opers(S)),
                            nextNo(S), Callback :: freeList(S)))

DEF widget(Parent) ==
    callback                                                    & (\\ Callback.
    succeed( widget(Parent, Callback) )
    )

DEF freeWidget(Wid) ==
    freeCallback(callback(Wid))


DEF define(Com : seq[string]->com[string]) ==
    callback & (\\ Callback. define(Callback, Com) & succeed(Callback))

DEF define(Com : com[string]) ==
    callback & (\\ Callback. define(Callback, Com) & succeed(Callback))

DEF define(Com : com[void]) ==
    callback & (\\ Callback. define(Callback, Com) & succeed(Callback))


DEF define(Callback, Com : seq[string]->com[string]) ==
    with(state, \\ S. state(upd(no(Callback), oper(Com), opers(S)),
                            nextNo(S), freeList(S)))

DEF define(Callback, Com : com[string]) ==
    with(state, \\ S. state(upd(no(Callback), oper(\\ _ . Com), opers(S)),
                            nextNo(S), freeList(S)))

DEF define(Callback, Com : com[void]) ==
    with(state, \\ S. state(upd(no(Callback), 
                                oper(\\ _ . Com & succeed(<>)), opers(S)),
                            nextNo(S), freeList(S)))

DEF extDefine(Callback, Act:com[void]) ==
    with(state, \\ S. state(upd(no(Callback),
                                \\Oper. oper(\\Args. Act; com(Oper)(Args)),
                                opers(S)),
                            nextNo(S), freeList(S)))

DEF extDefine(Callback, Act:seq[string]->com[void]) ==
    with(state, \\ S. 
         state(upd(no(Callback),
                   \\Oper . oper(\\Args. Act(Args); com(Oper)(Args)),
                   opers(S)),
               nextNo(S), freeList(S))
    )



-- %$Scripts$ ==============================================================

DATA script == mkScript(pattern:denotation, args: seq[union])

-- FUN eval: script -> com[string]
DEF eval(Script:script) == tclTk @ format(Script)
-- FUN eval: denotation -> com[string]
DEF eval(Script:denotation) == tclTk @ Script


-- FUN act: script -> com[string]
DEF act(Script:script) == tclTk @ format(Script) & done
-- FUN act: denotation -> com[string]
DEF act(Script:denotation) == tclTk @ Script & done


-- FUN format: script -> string

-- FUN <- : denotation ** denotation -> script
-- FUN <- : denotation ** string -> script
-- FUN <- : denotation ** real -> script
-- FUN <- : denotation ** nat -> script

-- FUN + : script ** denotation -> script
-- FUN + : script ** string -> script
-- FUN + : script ** real -> script
-- FUN + : script ** nat -> script

DEF format(mkScript(Pattern,Args)) ==
        format'StringFormat(Pattern, revert(Args))

DEF mkScript(Pattern,Args) + Den == mkScript(Pattern, denotation(Den)::Args)
DEF mkScript(Pattern,Args) + Str == mkScript(Pattern, string(Str)::Args)
DEF mkScript(Pattern,Args) + Rea == mkScript(Pattern, real(Rea)::Args)
DEF mkScript(Pattern,Args) + Nat == mkScript(Pattern, nat(Nat)::Args)
DEF mkScript(Pattern,Args) + (Callback:callback) == 
    mkScript(Pattern, string(asTk(Callback))::Args)
DEF mkScript(Pattern,Args) + (Widget:widget) == 
    mkScript(Pattern, string(asTk(Widget))::Args)


DEF Pattern <- Den == mkScript(Pattern, denotation(Den) :: <>)
DEF Pattern <- Str == mkScript(Pattern, string(Str) :: <>)
DEF Pattern <- Rea == mkScript(Pattern, real(Rea) :: <>)
DEF Pattern <- Nat == mkScript(Pattern, nat(Nat) :: <>)

DEF Pattern <- (Callback:callback) == 
    mkScript(Pattern, string(asTk(Callback)):: <>)
DEF Pattern <- (Widget:widget) == 
    mkScript(Pattern, string(asTk(Widget)):: <>)

-- %$Conversions $ =========================================================

-- FUN convList: string -> seq[string]
DEF convList(String) ==
        LET Ans == asList(String) IN
        IF okay?(Ans) THEN data(Ans) ELSE <> FI

-- FUN convNat: string -> nat
DEF convNat(Number) ==
        LET Ans == asNat(Number) IN
        IF okay?(Ans) THEN data(Ans) ELSE 0 FI  -- "0" may be a bad choice

-- FUN convReal: string -> real
DEF convReal(Number) ==
        LET Ans == asReal(Number) IN
        IF okay?(Ans) THEN data(Ans) ELSE 0 FI  -- "0" may be a bad choice


-- %$TclTk Interpreter $ ====================================================

FUN tclTk: interpreter
DEF tclTk ==
    EXEC(
        arg(0)                                  & (\\ ApplName .
        -- create interpreter 
        create(nil)                             & (\\ Interp .
        -- create Tk application
        -- we should consider "-screen" option
        -- of application ??
        createApp(Interp, nil, ApplName)        & (\\ _ .
        -- set main window to state withdrawn; 
        -- we dont need it for displaying
        Interp @ ("wm withdraw .")              & (\\ _ .
        succeed(Interp)
        ))))
    )


DEF retain == retain'Tk
DEF submit == submit'Tk
DEF update == update'Tk

