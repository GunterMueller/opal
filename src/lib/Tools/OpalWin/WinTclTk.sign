/* % 
This structure provides the interface to Tcl/Tk used by @value{OPALWIN}.
It internally allocates a Tcl/Tk interpreter where all Tcl/Tk operations
implicitely are addressed to.

@emph{Note}: this structure is not if interest for using @value{OPALWIN},
it is only relevant for extending @value{OPALWIN}.

@emph{Note}: documentation for new @code{callback} / @code{widget}
types and operations missing.
*/

SIGNATURE WinTclTk
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:22 $ ($Revision: 1.1.1.1 $)

IMPORT	Void		ONLY	void
	Com[void]	ONLY	com:SORT
	Com[string]	ONLY	com:SORT
	Com[callback]	ONLY	com:SORT
	Com[widget]	ONLY	com:SORT

IMPORT	String		ONLY	string:SORT
	Seq[string]	ONLY	seq
	Real		ONLY	real
	Nat		ONLY	nat


-- %$Definitions$ ===========================================================

SORT callback
SORT widget

FUN root		: widget
FUN parent		: widget -> widget
FUN callback		: widget -> callback

FUN asTk		: callback	-> string
FUN asTk		: widget	-> string

FUN callback		: com[callback]
FUN widget		: widget -> com[widget]

FUN freeCallback	: callback	-> com[void]
FUN freeWidget		: widget	-> com[void]

FUN define		: callback ** (seq[string]->com[string]) -> com[void]
FUN define		: callback ** com[string] -> com[void]
FUN define		: callback ** com[void] -> com[void]

FUN define		: (seq[string]->com[string]) -> com[callback]
FUN define		: com[string] -> com[callback]
FUN define		: com[void] -> com[callback]

FUN extDefine		: callback ** (seq[string]->com[void]) -> com[void]
FUN extDefine		: callback ** com[void] -> com[void]


-- %$Scripts$ =============================================================

/* %
The type of scripts is used for the convenient notation of
Tcl scripts.
*/

SORT script

FUN <- : denotation ** denotation -> script
FUN <- : denotation ** string -> script
FUN <- : denotation ** real -> script
FUN <- : denotation ** nat -> script
FUN <- : denotation ** widget -> script
FUN <- : denotation ** callback -> script

FUN + : script ** denotation -> script
FUN + : script ** string -> script
FUN + : script ** real -> script
FUN + : script ** nat -> script
FUN + : script ** widget -> script
FUN + : script ** callback -> script

FUN format: script -> string

/* %
In general, the expression @code{format(Pattern <- Val1 + Val2 + ... + ValN)}
is equivalent to 
@code{format'StringFormat(Pattern, %(t1(Val1),t2(Vale),...,tN(ValN)))},
where @code{tI} is the according union constructor from @code{BTUnion}.
*/

-- %$Evaluation$ ===========================================================

/* %
The function @code{eval} evaluates the given script or denotation
in the Tcl/Tk interpreter and returns its result. The 
function @code{act} evaluates and forgets the result.
*/

FUN eval: script -> com[string]
FUN eval: denotation -> com[string]
FUN act : script -> com[void]
FUN act : denotation -> com[void]



-- %$Conversions$ ===========================================================

/* %
The function @code{convList} converts a textual representation of
a Tcl list into a sequence of strings, including the proper handling
of quotings. The functions @code{convNat} and @code{convReal} convert
naturals and reals, respectively.
*/

FUN convList	: string -> seq[string]
FUN convNat	: string -> nat
FUN convReal	: string -> real



-- %$Retaining Event Scheduling$ ===========================================

/* %
The functions @code{retain} and @code{submit} suspend and resume
the scheduling of Tk events. This may be useful to perform a
sequence of Tk commands whose result should not become immediatly
visible to the user (normally, inbetween the execution of each atomic 
command event scheduling is performed using @code{Tk_DoOneEvent}).

Both functions may be nested: event dispatching is retained unless
the number of @code{submit} calls is equal  to the number of
@code{retain} calls.
*/

FUN retain  : com[void]
FUN submit  : com[void]
FUN update  : com[void]


/* %
@page
*/
