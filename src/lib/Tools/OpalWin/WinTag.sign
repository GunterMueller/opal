/* %
This structure provides the type of tags, which is used to identify
sub-objects of views.
*/

SIGNATURE WinTag
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT	Com[tag] 	ONLY com


/* %
The type of tags is re-exported from the internal level:
*/

IMPORT	WinInternal	ONLY tag  : SORT 
			     tag  : denotation -> tag
			     name : tag -> denotation

FUN  = < 	: tag ** tag	-> bool

/* %
The developer may freely create tags from denotations such as in 
@code{tag("myTag")}, in which case he is responsible for correctly 
managing the tag name spaces. Usually, each view which uses tags
(such as canvases or text views) has its own name space. The names
admissable for tags must start with a lower or upper letter (but 
@emph{not} with @code{"_"}), and continue with digits or letters.

@sp 1
If one just wants to create some distinct tags and the naming doesn't 
matter, the command @code{genTag} is appropriate:
*/

FUN  genTag	: com[tag]

/* %
This command creates an application unique tag distinct from all other tags.
Generated tags start with an @code{"_"}. This command may e.g. be used in
constant definitions such as

@example
DEF myTag == EXEC(genTag)
@end example

*/


/* %
@page
*/
