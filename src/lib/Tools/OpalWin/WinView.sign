/* % 
This structure provides basic views and operations on them.
*/

SIGNATURE WinView
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  WinInternal     ONLY    view:SORT
        WinConfig       ONLY    anchor:SORT

-- %$Views in General$ ==================================================

/* %
A view is an abstract type which describes the @emph{layout} of the
contents of a window. Note that this layout description is not the
contents of the window itself: rather, the contents is created
on the base of the layout by the command @code{window} 
(@pxref{@Overview{WinWindow}}).

Some basic views are provided by this structure, other ones elsewhere.
Views can be configured by a general configuration mechanism 
(@pxref{@Overview{WinConfig}}).

The following functions allow to modify and compose given views:
*/

FUN  expand             : view                          -> view
FUN  fillX              : view                          -> view
FUN  fillY              : view                          -> view
FUN  fill               : view                          -> view
FUN  anchor             : anchor ** view                -> view
FUN  << ^^              : view  ** view                 -> view
FUN  @< @/\ @\/ @>      : view  ** view                 -> view

      
/* %
@code{expand(View)} lets the view demand all 
available space in its context (though it does not necessarily fill out the 
space).  @code{fillX(View)} and @code{fillY(View)} 
define a view which will be streched to fill out 
the acquired space in the horizontal or vertical direction, respectively. 
@code{anchor(Dir, View)} defines how to position a view in its parcel if
it doesn't fills out the acquired space.

@code{View1 << View2} provides the horizontal composition of views,
placing @code{View2} at the right side of @code{View1}.  @code{View1 ^^
View2} is vertical composition. The operators starting with @code{@@}
provide hierarchical composition: in @code{Master @@< Slave}, slave
is placed at the left side of the master, in @code{Master @@> Slave}
at the right side, in @code{Master @@/\ Slave} at the upper side,
and in @code{Master @@\/ Slave} at the lower side.
An expression such as @code{Master @@< Slave1 @@< Slave2 ...} behaves
as to be expected, in that all slaves are packed in the given master.

A view composed by @code{<<} or @code{^^} does by default fills out its 
acquired space. It will expand if one of its components does expand.
The compositions @code{<<} and @code{^^} are associative.

@sp 1
The following shortcuts are provided:
*/


FUN  * | - + *+         : view                          -> view
FUN  <|< <-< <+< <*+<   : view  ** view                 -> view
FUN  ^|^ ^-^ ^+^ ^*+^   : view  ** view                 -> view

/* %
Here, @code{*} abbreviates expansion, @code{|} vertical fill, 
@code{-} horzontal fill, @code{+} fill in both directions and @code{*+}
expansion and fill. The versions for binary composition apply the
according modifications to their operands.  These operations behave 
associative: the expression @code{V1 <|< V2 <|< V3}, 
for example, equals to @code{fillX(V1) << fillX(V2) << fillX(V3)}, 
and @emph{not} to @code{fillX(V1 << V2) << fillX(V3)}.
*/


-- %$Frame Views$ ========================================================

/* %
The constant @code{frame} represents a frame view.
*/

FUN frame       : view

/* %
The following configurations are sensitive:
@table @emph
@item Graphical Appearence
@example
background borderWidth cursor geo relief unitGeo
@end example
@item Dynamic Behavior
@example
bind regulate 
@end example
@end table
*/


-- %$Label Views$ ========================================================

/* %
The constant @code{label} represents a label view.
*/

FUN label : view

/* %
The following configurations are sensitive:
@table @emph
@item Graphical Appearence
@example
anchor background bitmap borderWidth cursor font foreground
height padX padY relief text unitWidth unitHeight width
@end example
@item Dynamic Behavior
@example
bind regulate 
@end example
@end table
*/



/* %
@page
*/
