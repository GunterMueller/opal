/* %
This structure provides the gate of regulators.
*/

SIGNATURE WinRegulator
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:22 $ ($Revision: 1.1.1.1 $)

IMPORT	Com[regulator]		ONLY com
	Com[void]		ONLY com
	Com[config]		ONLY com
	Com[pair[config,version]] ONLY com
	Pair[config,version]	ONLY pair
	Void			ONLY void

IMPORT	WinConfig		ONLY config:SORT

-- %$Regulator Gate$ =======================================================

/* %
A regulator is a gate which represents an adjustable
configuration.  Agents may get or set the configuration,
or may synchronize with state changes.
*/

SORT regulator

FUN  regulator	: com[regulator]

FUN  set	: regulator ** config	-> com[void]
FUN  get	: regulator 		-> com[config]

SORT version
FUN  first	: version
FUN  next	: version 		-> version
FUN  <		: version ** version	-> bool
FUN  sync	: regulator ** version  -> com[pair[config,version]]

/* %
The basic idea of synchronizing with a regulator is to tag
configuration settings with abstract versions. The command
@code{sync(R,V)} will be provided by the regulator only if the current
version of the regulator configuration is more recent than the passed
one. 
*/


-- %$Regulator Configuration$ ==============================================

/* %
Regulators may be attached to views or to items via their configuration, such 
that each time the regulator is changed the view or item will synchronize its
configuration.  
*/

FUN  regulate	: regulator		-> config

/* %
@page
*/
