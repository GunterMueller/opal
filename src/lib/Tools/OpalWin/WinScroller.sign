
/* %
This structure provides the gates of scrollers.
*/

SIGNATURE WinScroller
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT	Void				ONLY void
	Real				ONLY real
	Int				ONLY int

IMPORT	Com[scroller]			ONLY com
	Com[void]			ONLY com
	Com[scrollWindow]		ONLY com
	Com[scrollView]			ONLY com


IMPORT	WinConfig			ONLY orient:SORT
	WinInternal			ONLY config:SORT


-- %$Scroller Gate$ =======================================================

/* %
A scroller gate represents an adjustable @emph{viewpoint} on a linear
piece of information. It is used e.g. as a mediator between 
views such as canvases and scrollbars.
*/


SORT scroller

/* %
A new scroller is created by the command @code{scroller}:
*/

FUN  scroller		: com[scroller]


/* %
A scrollbar-like view is managed by the commands below. The command
@code{setWindow} defines the visual window as it is shown
by the slider of the scrollbar. The command @code{awaitWindow} is
enabled every time the command @code{setWindow} has been called.
The window is specified as a pair of fractions in range @code{0.0 .. 1.0}:
@code{window(0.5,0.75)}, for example, defines a window which covers
@code{50-75%} percent of the displayed information.
*/ 

TYPE scrollWindow 	== window (first: real, last: real)

FUN  setWindow		: scroller ** scrollWindow 	-> com[void]
FUN  awaitWindow	: scroller			-> com[scrollWindow]



/* %
The view which displays the scrolled information is managed by the
commands below. The command @code{setView} adjusts the scrolling position,
the command @code{awaitView} is enabled every time @code{setView} has
been called. The scrolling position may be adjusted either absolutely
by @code{moveto(First)}, where @code{First} is a fraction in range 
@code{0.0 .. 1.0}, or relatively by specifying a unit (e.g. line)
or page offset.
*/

TYPE scrollView		== moveto 	(pos: real)  
			   shiftUnits  	(int: int)
			   shiftPages  	(int: int)

FUN  setView		: scroller ** scrollView 	-> com[void]
FUN  awaitView		: scroller 			-> com[scrollView]


-- %$Attaching Scroller Gates$ ==============================================

/* %
The configuration @code{scroll(Scroller, Orient)} attaches a scroller gate
to a view which displays scrollable information, such as a canvas. The 
configuration @code{scrollControl(Scroller)} attaches to a scrollbar-like 
view.
*/

FUN scroll		: scroller ** orient	-> config
FUN scrollControl	: scroller 		-> config

/* %
@page
*/
