/* %
This structure provides the gate of emitters.
*/

SIGNATURE WinEmitter[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

SORT data

IMPORT	Com[emitter]		ONLY com
	Com[data]		ONLY com
	Void			ONLY void
	Com[void]		ONLY com

IMPORT	
	WinInternal		ONLY wconfig:SORT config:SORT
	WinEvent		ONLY event:SORT


/* %
An emitter is just an asynchronous channel: each time it is triggered 
with a value it asynchronously throws out the given value.
*/

SORT emitter

FUN  emitter	: com[emitter]
FUN  emit	: emitter ** data	-> com[void]
FUN  await	: emitter		-> com[data]

/* %
@sp 1
An emitter may be attached to a view like a button via its configuration.
Each time the button is pressed, the emitter is triggered. 
The configuration @code{bind(E, X)} is equivalent to
@code{bind'WinButton(emit(E, X))}.
*/

FUN  bind	: emitter ** data	-> config


/* %
@sp 1
An emitter may be also bound to an event associated with a view,
the window or the entire application. 
The configuration @code{bind(Event, E, X)} is equivalent to
@code{bind'WinEvent(bind(Event, emit(E, X))}, and so on.
*/

FUN   bind	: event ** emitter ** data 		-> config
FUN   bind	: event ** emitter ** data 		-> wconfig
FUN   bind	: event ** emitter ** data 		-> com[void]

/* %
@page
*/
