IMPLEMENTATION ParserCombinators

IMPORT Nat      COMPLETELY
       Identity COMPLETELY
       Option   COMPLETELY
       Seq      COMPLETELY
       

DATA state == alive(input:seq[token],store:store)
              dead(input:seq[token],msg:option[msg])

DATA parser == parser(parser: state -> state)

DATA result == ok(store:store)
               error(msg:option[msg])

DEF p1 ; p2 == SUSPEND(parser(\\st.
    LET st1 == parser(FORCE(p1))(st)
    IN IF st1 dead?  THEN st1
       IF st1 alive? THEN parser(FORCE(p2))(st1)
       FI
    ))

DEF p1 | p2 == SUSPEND(parser(\\st.
    LET st1 == parser(FORCE(p1))(st)
    IN IF st1 dead?  THEN parser(FORCE(p2))(st)
       IF st1 alive? THEN st1
       FI
    ))

DEF p1 |^ p2 == SUSPEND(parser(\\st.
    LET st1 == parser(FORCE(p1))(st)
    IN IF st1 dead? THEN 
         IF #(input(st1)) =  #(input(st)) THEN parser(FORCE(p2))(st)
         IF #(input(st1)) |= #(input(st)) THEN st1
         FI
       IF st1 alive? THEN st1
       FI
    ))

DEF fail(genmsg) == SUSPEND(parser(\\st.
    dead(input(st), avail(genmsg(input(st),store(st))))))

DEF eps == SUSPEND(parser(id))

DEF eof == SUSPEND(parser(\\st.
    IF input(st) <>? THEN st
    IF input(st) ::? THEN dead(input(st),nil)
    FI
    ))

DEF reject(p) == SUSPEND(parser(\\st.
    LET st1 == parser(FORCE(p))(st)
    IN IF st1 dead?  THEN st
       IF st1 alive? THEN dead(input(st),nil)
       FI
    ))

DEF action(a) == SUSPEND(parser(\\st.
    IF st alive? THEN
      LET store1 == a(store(st))
      IN alive(input(st),store1)
    IF st dead? THEN st
    FI
    ))

DEF shift(f) == SUSPEND(parser(\\st.
    IF input(st) <>? THEN dead(input(st),nil)
    IF input(st) ::? THEN
      LET inp1   == rt(input(st))
          store1 == f(ft(input(st)),store(st))
      IN alive(inp1,store1)
    FI
    ))

DEF drop == SUSPEND(parser(\\st.
    IF input(st) <>? THEN dead(input(st),nil)
    IF input(st) ::? THEN alive(rt(input(st)),store(st))
    FI
    ))

DEF peek(p?) == SUSPEND(parser(\\st.
    IF input(st) <>? THEN
      dead(input(st),nil)
    IF input(st) ::? THEN
      IF p?(ft(input(st))) THEN
        st
      ELSE
        dead(input(st),nil)
      FI
    FI
    ))

DEF run(p,inp,store0) ==
  LET st0 == alive(inp,store0)
      st1 == parser(FORCE(p))(st0)
  IN IF st1 alive? THEN ok(store(st1))
     IF st1 dead?  THEN error(msg(st1))
     FI


-- %@ignore
-- Local variables:
-- coding: latin-1-unix
-- mode: opal
-- End:
-- %@end ignore
