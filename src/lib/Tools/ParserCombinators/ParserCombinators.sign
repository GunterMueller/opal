/* %
A parser combinator library with stack based semantic actions
*/

SIGNATURE ParserCombinators[token:SORT,store:SORT,msg:SORT]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date: 2012-10-02 14:17:54 +0200 (Tue, 02 Oct 2012) $ ($Revision: 838 $)

/* % This parser combinator library is an alternative to the more "monadic"
ParserLight library. It is very similar to the combinators developed in
the lecture "Compiler Construction 1" at TU Berlin. */

IMPORT Seq    ONLY  seq[token]
       Option ONLY option[msg]


SORT token store msg

TYPE result == ok(store:store)
               error(msg:option[msg])

SORT parser


FUN ; : LAZY[parser] ** LAZY[parser] -> LAZY[parser]

FUN | : LAZY[parser] ** LAZY[parser] -> LAZY[parser]

FUN |^ : LAZY[parser] ** LAZY[parser] -> LAZY[parser]

FUN fail: (seq[token] ** store -> msg) -> LAZY[parser]

FUN eps: LAZY[parser]

FUN eof: LAZY[parser]

FUN reject: LAZY[parser] -> LAZY[parser]

FUN action: (store -> store) -> LAZY[parser]

FUN shift: (token ** store -> store) -> LAZY[parser]

FUN drop: LAZY[parser]

FUN peek: (token -> bool) -> LAZY[parser]

FUN run: LAZY[parser] ** seq[token] ** store -> result


-- % @code{;} has higher precedence than @code{|}
/$ BRACKET LEFT [ ; ] [ | ] $/
/$ BRACKET RIGHT [ | ] [ ; ] $/

-- % @code{;} has higher precedence than @code{|^}
/$ BRACKET LEFT [ ; ] [ |^ ] $/
/$ BRACKET RIGHT [ |^ ] [ ; ] $/


-- %@ignore
-- Local variables:
-- coding: latin-1-unix
-- mode: opal
-- End:
-- %@end ignore
