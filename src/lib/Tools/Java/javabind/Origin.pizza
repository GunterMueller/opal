/** Class representing origins of OPAL.
  *
  * @author Wolfgang Grieskamp
  * @version $Id: Origin.pizza,v 1.2 2000-05-24 18:06:31 kd Exp $ */

package opal.javabind;

import java.lang.*;
import pizza.lang.*;
import pizza.newutil.*;


public class Origin {

  public case Origin(String base, List<Name> acts);

  public String toString(){
    switch (acts){
    case List.Nil:
      return base;
    default:
      return base + "[" + 
	acts.map(fun (Name n)->String {return n.toSortString();})
            .elementsToString(",") + 
	"]";
    }
  }

  public String toStringInName(){
    if (this == FORMAL){
      return "";
    } else {
      return "'" + toString();
    }
  }

  /** special constant representing the origin of a formal parameter. */
  public static final Origin FORMAL =
    new Origin("FORMAL", List.Nil);

  /* to expansive ... 
  public boolean equals(Object other){
    return AuxJ.structuralEquality(this, other);
  }
  */

  public boolean equals(Object other){
    if (other instanceof Origin){
      Origin oorigin = (Origin)other;
      if (base.equals(oorigin.base)){
	Enumerator<Name> eacts = new pizza.newutil.ListEnumerator(acts);
	Enumerator<Name> eoacts = new pizza.newutil.ListEnumerator(oorigin.acts);
	while (eacts.hasMoreElements()){
	  if (eoacts.hasMoreElements()){
	    if (!eacts.nextElement().equals(eoacts.nextElement())){
	      return false;
	    }
	  } else {
	    return false;
	  }
	}
	return !eoacts.hasMoreElements();
      } else {
	return false;
      }
    } else {
      return false;
    }
  }

  public int hashCode(){
    return base.hashCode();
  }

  /*
  public static Origin Origin(String s){
    // FIXME: handle instantiation (requires stack ...)
    int i = s.indexOf("[");
    if (i >= 0){
      return new Origin(s.substring(0,i).trim(), List.Nil);
    } else {
      return new Origin(s.trim(), List.Nil);
    }
  }
  */

}
