/** Class representing names of OPAL.
  *
  * @author Wolfgang Grieskamp
  * @version $Id$
  */

package opal.javabind;

import java.lang.*;
import pizza.lang.List;


public class Name {
  public case Name(String base, Kind kind, Origin origin);

  /** Converting to a string. */
  public String toString(){
    if (base.equals("ans") && origin.base.equals("Com")){
      return "void'Void -> " + base +  "'" + origin.toString() + " :SORT";
    } else {
      return base + origin.toStringInName() + " : " + kind.toString();
    }
  }

  /** Converting to a string in a context where only sorts are expected
    * (the kind is omitted).
    */
  public String toSortString(){
    if (base.equals("ans") && origin.base.equals("Com")){
      return "void'Void -> " + base +  "'" + origin.toString();
    } else {
      return base + origin.toStringInName();
    }
  }

  /* This one is to expansive ...
  public boolean equals(Object other){
    return AuxJ.structuralEquality(this, other);
  }
  */
  public boolean equals(Object other){
    if (other instanceof Name){
      Name oname = (Name)other;
      return base.equals(oname.base) && kind.equals(oname.kind) 
	                             && origin.equals(oname.origin);
    } else {
      return false;
    }
  }

  public int hashCode(){
    return base.hashCode();
  }
    
  /*
  public static Name Name(String s){
    int i = s.indexOf("'");
    int j = s.indexOf(":");
    String base = s.substring(0,i);
    String orig = s.substring(0,j).substring(i+1);
    return new Name(base.trim(), 
		    Kind.Kind(s.substring(j+1)),
		    Origin.Origin(orig));
  }
  */

  /** Name constants. */

  public static final Name bool = 
     new Name("bool", Kind.Sort, new Origin("PREDEF_BOOL", List.Nil));
  public static final Name denotation = 
     new Name("denotation", Kind.Sort, new Origin("DENOTATION", List.Nil));
  public static final Name xvoid = 
     new Name("void", Kind.Sort, new Origin("Void", List.Nil));
  public static final Name unit =
     new Name("()", Kind.Sort, new Origin("", List.Nil));

}
