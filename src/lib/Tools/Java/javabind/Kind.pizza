/** Class representing kinds of OPAL.
  *
  * @author Wolfgang Grieskamp
  * @version $Id$ 
  */

package opal.javabind;

import java.lang.*;
import pizza.lang.List;


public class Kind {

  /** The case of sorts. */
  public case Sort;

  /** The case of functions (only first-order functions considered 
    * currently). */
  public case Fun(List<Name> params, Name result);

  /** Converting to a string. */
  public String toString(){
    switch (this){
    case Sort:
      return "SORT"; 
    case Fun(List<Name> params, Name result):
      switch (params){
      case List.Nil:
	return result.toSortString();
	// return "() -> " + result.toSortString();
      default:
	return params.map(fun (Name n)->String { return n.toSortString(); })
	             .elementsToString(" ** ") + 
		                       " -> " + result.toSortString();
      }
    }
  }

  public boolean equals(Object other){
    return AuxJ.structuralEquality(this, other);
  }

  private static String toFctString(Name name){
    return name.base + "'" + name.origin.toString();
  }

  /*
  public static Kind Kind(String s){
    s = s.trim();
    if (s.equals("SORT")){
      return Sort;
    } else {
      List<Name> args = List.Nil;
      Name res;
      do {
	int i;
	if ((i = s.indexOf("**")) >= 0){
	  args = args.concat(parseFctName(s.substring(0,i)));
	  s = s.substring(i+2);
	  continue;
	} else 
	  if ((i = s.indexOf("->")) >= 0){
	    args = args.concat(parseFctName(s.substring(0,i)));
	    res = parseFctName(s.substring(i+2));
	    break;
	  } else {
	    res = parseFctName(s);
	    break;
	  }
      } while (true);
      return new Fun(args, res);
    }
  }

  private static Name parseFctName(String s){
    int i = s.indexOf("'");
    System.out.println("parsing " + s);
    return new Name(s.substring(0,i).trim(), 
		    Sort,
		    Origin.Origin(s.substring(i+1)));
  }
  */
    
} 
