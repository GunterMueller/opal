/** Interface describing the generator for bindings in the
  * functional language. This interface needs to be implemented by
  * particular language backends.
  *
  *
  * @author Wolfgang Grieskamp
  * @version $Id: FunGenerator.pizza,v 1.1 1999-10-16 17:32:05 wg Exp $
  */

package opal.javabind;

import java.lang.*;
import java.lang.reflect.*;
import java.io.*;
import pizza.lang.*;
import pizza.newutil.*;

public interface FunGenerator {

  /** Begin generating bindings. */
  public abstract void beginAll() 
    throws IOException;

  /** End generating bindings. */
  public abstract void endAll() 
    throws IOException;

  /** Begin generating bindings in structure.
    */
  public abstract void beginStruct(String struct,
				   boolean genSorts,
				   boolean genMethods) 
    throws IOException;

  /** End generating bindings in structure.
    */
  public abstract void endStruct() 
    throws IOException;

  /** Begin generating bindings for class. */
  public abstract void beginClass(Class target) 
    throws IOException;

  /** End generating bindings for class. */
  public abstract void endClass() 
    throws IOException;

  /** Generate type for class. */
  public abstract void classType()
    throws IOException;

  /** Generate upwards cast for the current class. */
  public abstract void upCast(Class to) 
    throws IOException;

  /** Generate downwards cast for the current class. 
    */
  public abstract void downCast(Class from) 
    throws IOException;

  /** Generate downwards test for the current class. 
    */
  public abstract void downTest(Class from) 
    throws IOException;

  /** Generate free type for the current class. */
  public abstract void freeType(List<Config.Variant> variants)
    throws IOException;

  /** Generate constructor for the current class. 
    */
  public abstract void constructor(Constructor cons, 
				   Set<BindProp> props) 
    throws IOException;

  /** Generate field access function for the current classs. 
    */
  public abstract void getField(Field field, Set<BindProp> props) 
    throws IOException;

  /** Generate field update function for the current classs. 
    */
  public abstract void setField(Field field, Set<BindProp> props)
    throws IOException;


  /** Generate method for the current class. 
    */
  public abstract void method(Method method, Set<BindProp> props)
    throws IOException;

  /** Tell whether the given class should not be processed
    * since it is represented by a special type in the functional
    * language (typically applies to java.lang.String)
    */
  public abstract boolean isSpecialClass(Class clazz);

  /** Generate cluster structure. */
  public abstract void clusterStruct(String structName, Set<Class> contents)
  throws IOException;
}
