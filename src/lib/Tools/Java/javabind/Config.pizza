/** Configuration of opal.javabind run. */

package opal.javabind;

import java.lang.*;
import java.lang.reflect.*;
import pizza.lang.*;
import pizza.newutil.*;

public class Config {

  /** The OCS system to be generated. */
  public static String system = ".";

  /** The list of OCS subsystems included in addition to the
    * standard library. */
  public static List<String> subsystems = List.Nil;

  /** The list of OPAL libraries included in addition to the
    * standard library. */
  public static List<String> libraries = List.Nil;

  /** A Hashtable of package-cluster structure descriptions. */
  public static Hashtable<String, Set<Class>> clusters = new Hashtable();

  /** Mapping of classes to structures which contain bindings for them. */
  public static Hashtable<Class,String> structOfClass = new Hashtable();

  /** Mapping of structure names to the set of classes
    * they contain. */
  public static Hashtable<String,Set<Class>> classesOfStruct = new Hashtable();

  /** Map of classes which have a canonical sort structure introduced
    * in another subsystem. */
  public static Hashtable<Class,String> subsysOfSort = new Hashtable();

  /** Map of classes which have a canonical method structure introduced
    * in another subsystem. */
  public static Hashtable<Class,String> subsysOfMethods = new Hashtable();

  
  /** Description of a free type variant. */
  static class Variant {
    public case Subclass(Class clazz, Constructor cons, List<Field> fields);
    public case Constant(Field field);
  }

  /** Classes which shall be represented as free types, with
    * their variants. */
  public static Hashtable<Class,List<Variant>> freeTypes = new Hashtable();

  /** Classes which are variants of free types. */
  public static Hashtable<Class,Class> variants = new Hashtable();

  /** Classes for which inherited fields and methods should be
    * generated. */
  public static Set<Class> inherits = new Set();

  /** Classes for which only the minimal set of declarations
    * (sorts and casts) shall be generated. */
  public static Set<Class> minimal = new Set();

  /** Structures which should be splitted over a sort and method
    * structure. */
  public static Set<String> splittedStructs = new Set();

  /** Dependencies of classes. */
  public static Hashtable<Class,Set<Class>> deps = new Hashtable();

  /** Names of classes whose objects should be treated as
      immutable. */
  public static Set<Class> immutables = new Set();

  /** Whether transient inclusion of dependencies should be performed. */
  public static boolean _transient = true;

  /** Whether a fmt-function shall be generated for free types. */
  public static boolean genFmtFun = true;

  /** Default class-to-structure mapping (used for transient structures). */
  public static List<Pair<String,String>> defaults = List.Nil;

  /** The generator for the functional language. */
  public static FunGenerator gen;

  /** Suffix to be used for sort structures. */
  public static String sortStructSuffix = "_SORT";

  /** The opal.javabind version. */
  public static final String version = "1.1a";

  /** Build a default structure name for class. */
  public static String defaultStruct(Class clazz){
    String name = clazz.getName();
    List<Pair<String,String>> d = defaults;
    while (d != List.Nil){
      String pattern = d.head().fst;
      if (pattern.endsWith(".*"))
	pattern = pattern.substring(0, pattern.length()-2);
      if (name.startsWith(pattern))
	return d.head().snd;
      d = d.tail();
    }
    Class outer =  Aux.getDeclaringClass(clazz);
    if (outer != null)
      return defaultStruct(outer);
    else
      return clazz.getName().replace('.','_');
  }

}
  
