package pizza.newutil;

/** a class the concats two more more eneumerators
 */
class CompositeEnumerator<A> extends Enumerator<A> {

    private Enumerator<A>[] enums;
    private int index;

    /** concat all enumerators in array `enums'
     */
    public CompositeEnumerator(Enumerator<A>[] enums) {
	this.enums = enums;
	this.index = 0;
    }

    /** concat two enumerators
     */
    public CompositeEnumerator(Enumerator<A> enum0, Enumerator<A> enum1) {
	this.enums = new Enumerator[2];
	this.enums[0] = enum0;
	this.enums[1] = enum1;
	this.index = 0;
    }

    public boolean hasMoreElements() {
	while (index < enums.length && !enums[index].hasMoreElements()) 
	    index++;
	return index < enums.length;
    }

    public A nextElement() {
	if (hasMoreElements()) return enums[index].nextElement();
	else throw new NoSuchElementException();
    }

    public Object clone() {
	if (index < enums.length){
            Enumerator<A>[] copy = new Enumerator[enums.length - index];
	    for (int i = 0; i < copy.length; i++){
	        copy[i] = enums[index+i];
	    }
	    return new CompositeEnumerator(copy);
	} else {
	    return new EmptyEnumerator();
	}
    }

}

