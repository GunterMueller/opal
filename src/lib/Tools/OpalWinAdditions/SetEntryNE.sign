/* % This structure provides a view for sets as listbox. The entries 
     cannot be edited.
*/

SIGNATURE SetEntryNE[data, <, print]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)


-- %$Parameter$
SORT data
FUN < : data ** data -> bool
FUN print: data -> denotation

-- %$Imports$
IMPORT Com[setEntry] ONLY com
       Com[void] ONLY com
       Com[data] ONLY com
       Com[set[data, <]] ONLY com
       Void ONLY void
       WinConfig ONLY point
       WinInternal ONLY view:SORT config:SORT
       WinEmitter[nat] ONLY emitter:SORT
       WinEmitter[data] ONLY emitter:SORT
       Nat ONLY nat
       Set[data, <] ONLY set
       Pair[nat, nat] ONLY pair
       WinEvent ONLY event:SORT eventInfo:SORT
       WinRegulator ONLY regulator: SORT

-- %$The new sort and its constructors$

SORT setEntry

/* %There are three versions available for setEntries:
@itemize @bullet
@item
default version */
FUN setEntry: set[data, <] -> com[setEntry]
/* %@item
specify width, height 
*/
FUN setEntry: set[data, <] ** nat ** nat -> com[setEntry]
/* %@item
specify configuration. Use any configuration appropriate for a text view
except @i{edit}. */
FUN setEntry: set[data, <] **config -> com[setEntry]
-- %@end itemize

FUN defaultDim: pair[nat, nat]
FUN defaultConfig: config


-- %$Control for OpalWin$
FUN view: setEntry -> view
FUN regulator: setEntry -> regulator

-- %$Accessing contents$
-- %Note: @code{getXXX} and @code{upd} fail, if text cannot be parsed as data.

/* %set the displayed value (blocked until setEntry is displayed!, spwan an
agent to initialize the entry!) */
FUN set: setEntry ** set[data, <] -> com[void]

-- %get the displayed set or selected set
FUN get: setEntry -> com[set[data, <]]
FUN getSelection: setEntry -> com[set[data, <]]

/* %get entry in line which contains point */
FUN get: setEntry ** point -> com[data]
-- %update data as specified by function
FUN upd: setEntry ** (set[data, <] -> set[data, <]) -> com[void]

-- %$Binding Events$
FUN bind: setEntry ** event ** 
          (setEntry ** eventInfo -> com[void]) -> com[void]
FUN bind: setEntry ** event ** 
          (setEntry ** eventInfo ** set[data, <] -> com[void]) -> com[void]

-- %$Synchronize with Data Changes$
/* %Specify a command, which is called, whenever @code{set} or @code{upd} have
been called. This may be repeated for different commands. Note that direct
changes by the user do not trigger the command (but you could @code{bind} the
return key to a similar command). */

FUN sync: setEntry ** (set[data, <] -> com[void]) -> com[void]
