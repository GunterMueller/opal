/* % This structure provides a view for sequences as listbox.
     The entries cannot be edited by the user.
*/

SIGNATURE SeqEntryNE[data, print]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- %$Parameter$
SORT data
FUN print: data -> denotation

-- %$Imports$
IMPORT Com[seqEntry] ONLY com
       Com[void] ONLY com
       Com[data] ONLY com
       Com[seq[data]] ONLY com
       Com[pair[nat, data]] ONLY com
       Void ONLY void
       WinConfig ONLY point
       WinInternal ONLY view:SORT config:SORT
       WinEmitter[nat] ONLY emitter:SORT
       WinEmitter[data] ONLY emitter:SORT
       Nat ONLY nat
       Seq[data] ONLY seq
       Pair[nat, nat] ONLY pair
       Pair[nat, data] ONLY pair
       WinEvent ONLY event:SORT eventInfo:SORT 
       WinRegulator ONLY regulator: SORT
       

-- %$The new sort and its constructors$

SORT seqEntry

/* %There are three versions available for seqEntries:
@itemize @bullet
@item
default version */
FUN seqEntry: seq[data] -> com[seqEntry]
/* %@item
specify width, height 
*/
FUN seqEntry: seq[data] ** nat ** nat -> com[seqEntry]
/* %@item
specify configuration. Use any configuration appropriate for a text view
except @i{edit}. */
FUN seqEntry: seq[data] ** config -> com[seqEntry]
-- %@end itemize

FUN defaultDim: pair[nat, nat]
FUN defaultConfig: config


-- %$Control for OpalWin$
FUN view: seqEntry -> view
FUN regulator: seqEntry -> regulator

-- %$Accessing contents$
-- %Note: @code{getXXX} and @code{upd} fail, if text cannot be parsed as data.

/* %set the displayed value (blocked until mapEntry is displayed!, spwan an
agent to initialize the entry! */
FUN set: seqEntry ** seq[data] -> com[void]

-- %get the displayed map or selected map
FUN get: seqEntry -> com[seq[data]]
FUN getSelection: seqEntry -> com[seq[data]]

/* %get index and entry in line which contains point */
FUN get: seqEntry ** point -> com[pair[nat, data]]
-- %update data as specified by function
FUN upd: seqEntry ** (seq[data] -> seq[data]) -> com[void]

-- %$Binding Events$
FUN bind: seqEntry ** event ** 
          (seqEntry ** eventInfo -> com[void]) -> com[void]
FUN bind: seqEntry ** event ** 
          (seqEntry ** eventInfo ** seq -> com[void]) -> com[void]

-- %$Synchronize with Data Changes$
/* %Specify a command, which is called, whenever @code{set} or @code{upd} have
been called. This may be repeated for different commands.  */

FUN sync: seqEntry ** (seq -> com[void]) -> com[void]
