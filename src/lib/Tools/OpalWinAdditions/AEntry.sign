/* % This structure provides an abstract entry for arbitrary data types,
provided the user supplies a parse and a print function */

SIGNATURE AEntry[data, parse, print]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-07 15:29:17 $ ($Revision: 1.2 $)

-- %$Parameter$
SORT data
FUN parse: parser[data]
FUN print: data -> denotation

IMPORT ParserL[data] ONLY parser:SORT

-- %$Imports$
IMPORT Com[aEntry] ONLY com
       Com[void] ONLY com
       Com[data] ONLY com
       Void ONLY void
       WinRegulator ONLY regulator:SORT
       WinEvent ONLY event:SORT eventInfo:SORT
       WinInternal ONLY view:SORT config:SORT
       Nat ONLY nat

-- %$The new sort and its constructors$

SORT aEntry

/* %There are three versions available for aEntries:
@itemize @bullet
@item
default version */
FUN aEntry: com[aEntry]
/* %@item
specify width
*/
FUN aEntry: nat -> com[aEntry]
/* %@item
specify configuration. Use any configuration appropriate for an entry view
except @i{edit}. */
FUN aEntry: config -> com[aEntry]
-- %@end itemize

/* %The ``long'' versions can be used, if the representation is longer than the
available space. A horizontal scroller is attached to the entry, otherwise
there is no difference. */

FUN aEntryLong: com[aEntry]
FUN aEntryLong: nat -> com[aEntry]
FUN aEntryLong: config -> com[aEntry]
 

FUN defaultDim: nat
FUN defaultConfig: config


-- %$Control for OpalWin$
FUN view: aEntry -> view
FUN regulator: aEntry -> regulator

-- %$Accessing contents$
-- %Note: @code{get} and @code{upd} fail, if text cannot be parsed as data.

/* %set the displayed value (blocked until aEntry is displayed!, spawn an agent
to initialize the entry! */
FUN set: aEntry ** data -> com[void]

-- %get the displayed value
FUN get: aEntry -> com[data]

-- %update data as specified by function
FUN upd: aEntry ** (data -> data) -> com[void]

-- %$Binding Events$
FUN bind: aEntry ** event ** 
          (aEntry ** eventInfo -> com[void]) -> com[void]
FUN bind: aEntry ** event ** 
          (aEntry ** eventInfo ** data -> com[void]) -> com[void]

-- %$Synchronize with Data Changes$
/* %Specify a command, which is called, whenever @code{set} or @code{upd} have
been called. This may be repeated for different commands. Note that direct
changes by the user do not trigger the command (but you could @code{bind} the
return key to a similar command). */

FUN sync: aEntry ** (data -> com[void]) -> com[void]
