IMPLEMENTATION MapEntry
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:26 $ ($Revision: 1.1.1.1 $)

IMPORT Map[data1, <, data2] ONLY map extend {}
       MapConv ONLY asSeq
       Seq ONLY seq :: <>
       Option ONLY option nil nil? cont avail avail?
       SeqZip ONLY unzip
       Pair ONLY pair 1st 2nd unpair &
       Com ONLY com succeed break
       ComCompose ONLY &
       Nat ONLY nat 0 1 2 10 15
       ComAgent ONLY agent
       Char ONLY char ! |= =
       ParserL ONLY parser @
       ParserLBasic ONLY ws
       ParserLCombinator ONLY *

       WinTextEditor COMPLETELY
       WinText ONLY text wrap wrapStyle none real
       WinView ONLY view <|< ^-^ frame @< fillX *+ expand
       WinConfig ONLY config with unitHeight ++ point 
                        orient vertical horizontal unitWidth
       WinEmitter ONLY emitter await emit
       WinScroller ONLY scroll scroller scrollControl 
       WinScrollbar ONLY scrollbar
       WinEvent ONLY event button double 
                     eventInfo point modifier bind - wconfig
       WinRegulator ONLY regulator regulate set
       Option ONLY option nil nil? cont
       String ONLY string ! <>
       StringConv ONLY `
       StringFilter ONLY split drop
       OptionMap ONLY *
       SeqConv ONLY `
       Void ONLY void nil

-- %$The new entry and its contructors$

DATA mapEntry == mapEntry(view: view,
                          textEditor1: textEditor,
                          textEditor2: textEditor,
                          sync: emitter[map[data1, <, data2]],
                          regulator1: regulator,
                          regulator2: regulator,
                          hscroll1: scroller,
                          hscroll2: scroller,
                          vscroll2: scroller)

DEF mapEntry == mapEntry(defaultConfig)
DEF mapEntry(n1, n2) == mapEntry(unitWidth(n1) ++ unitHeight(n2))
DEF mapEntry(tC) ==
    textEditor & (\\tE1.
    textEditor & (\\tE2.
    emitter[map[data1, <, data2]] & (\\sy.
    regulator & (\\r1.
    regulator & (\\r2.
    scroller & (\\h1.
    scroller & (\\h2.
    scroller & (\\v2.
    LET
        tC1 == edit(tE1) ++ scroll(h1, horizontal) ++ regulate(r1) ++ tC 
                ++ scroll(v2, vertical) ++ wrap(none)
        tC2 == edit(tE2) ++ scroll(h2, horizontal) ++ regulate(r2) ++ tC
                ++ scroll(v2, vertical) ++ wrap(none)
        tV1 == expand(fillX(text with tC1))
        tV2 == expand(fillX(text with tC2))
        hV1 == scrollbar with horizontal ++ scrollControl(h1)
        hV2 == scrollbar with horizontal ++ scrollControl(h2)
        vV2  == scrollbar with vertical ++ scrollControl(v2)
        v == (tV1 ^-^ hV1) <|< (tV2 ^-^ hV2) <|< vV2
    IN
       succeed(mapEntry(*+(frame @< v), tE1, tE2, sy, r1, r2, h1, h2, v2))
    ))))))))

DEF defaultDim == &(10,15)
DEF defaultConfig == unitWidth(1st(defaultDim)) ++ unitHeight(2nd(defaultDim))

-- FUN view: mapEntry -> view
-- FUN regulator1: mapEntry -> regulator
-- FUN regulator2: mapEntry -> regulator
-- selectors

-- %$access or change contents$
-- FUN set: mapEntry ** map[data1, <, data2] -> com[void]
DEF set(mE, M) ==
    LET (S1, S2) == unzip(unpair)(asSeq(M))
        tE1 == textEditor1(mE)
        tE2 == textEditor2(mE)
    IN
      tE1 delete range(pos(1,0), end) & (\\ _ .
      tE2 delete range(pos(1,0), end) & (\\ _ .
      tE1 insert(!(`("", "\n", "")(print1)(S1))) & (\\ _ .
      tE2 insert(!(`("", "\n", "")(print2)(S2))) & (\\ _ .
      sync(mE) emit M
      ))))


/* %get displayed map or selected map; fail if some entry is not
parsed as data; if  */
-- FUN get: mapEntry -> com[map[data1, <, data2]]
DEF get(mE) ==
    textEditor1(mE) get range(pos(1,0), end) & (\\t1.
    textEditor2(mE) get range(pos(1,0), end) & (\\t2.
    getParse(t1, t2)
    ))

-- FUN getSelection: mapEntry -> com[map[data1, <, data2]]
DEF getSelection(mE) ==
    LET 
      tE1 == textEditor1(mE) 
      tE2 == textEditor2(mE) 
    IN
    -- %we expand slection to whole lines and therefore expand tags
    tE1 tag (range(linestart(first(selection)), 
                 lineend(last(selection))), selection) & (\\ _ .
    tE1 get range(linestart(first(selection)), 
                 lineend(last(selection))) & (\\t1.
    tE2 tag (range(linestart(first(selection)), 
                 lineend(last(selection))), selection) & (\\ _ .
    tE2 get range(linestart(first(selection)), 
                 lineend(last(selection))) & (\\t2.
    getParse(t1, t2)
    ))))
    


/* %get entry in line which contains point */
-- FUN get: mapEntry ** point -> com[pair[data1, data2]]
DEF get(mE, pt) ==
    LET 
      tE1 == textEditor1(mE) 
      tE2 == textEditor2(mE) 
    IN
    tE1 get range(linestart(point(pt)), 
                 lineend(point(pt))) & (\\t1.
    (tE2 get range(linestart(point(pt)), 
                 lineend(point(pt)))) & (\\t2.
    IF (parse1 @ t1) nil? THEN 
        break("get'mapEntry: could not parse domain")
    IF (parse2 @ t2) nil? THEN 
        break("get'mapEntry: could not parse codomain")
    ELSE
      succeed(cont(parse1 @ t1) & cont(parse2 @ t2))
    FI
    ))
    

FUN getParse: string ** string -> com[map[data1, <, data2]]
DEF getParse(s1, s2) ==
    LET S1 == parse1 * ws @ s1
        S2 == parse2 * ws @ s1
    IN
      IF S1 nil? THEN break("getParse'mapEntry: could not parse domain")
      IF S2 nil? THEN break("getParse'mapEntry: could not parse codomain")
      ELSE
        succeed(extend({}, cont(S1), cont(S2)))
      FI

-- FUN upd: mapEntry ** 
--         (map[data1, <, data2] -> map[data1, <, data2]) -> com[void]
DEF upd(mE, f) ==
    get(mE) & (\\M.  set(mE, f(M)))


-- %$Binding Events$
DEF bind(mE, ev, cmd) ==  
    regulator1(mE) set bind(ev, \\eI. cmd(mE, eI)) & ( \\ _ .
    regulator2(mE) set bind(ev, \\eI. cmd(mE, eI)))

DEF bind(mE, ev, cmd) == 
    regulator1(mE) set bind(ev, \\ eI. get(mE) & (\\mp. cmd(mE, eI, mp)))
    & ( \\ _ .
    regulator2(mE) set bind(ev, \\ eI. get(mE) & (\\mp. cmd(mE, eI, mp)))
    )

-- %$Synchronize with Data Changes$

DEF sync(mE, cmd) == agent(isync(mE, cmd)) & (\\ _ . succeed(nil))

FUN isync: mapEntry ** (map -> com[void]) -> com[void]
DEF isync(mE, cmd) ==
    await(sync(mE)) & (\\mp.
    agent(isync(mE, cmd)) & (\\ _ .
    cmd(mp)
    ))
