SIGNATURE ParserLCombinator[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:24 $ ($Revision: 1.1.1.1 $)

-- %$Parameter$
SORT data

-- %$Imports$
IMPORT 
       Nat ONLY nat
       Option[data] ONLY option
       ParserL[void] ONLY parser
       ParserL[data] ONLY parser
       ParserL[seq]  ONLY parser
       ParserL[option] ONLY parser
       Seq[data] ONLY seq
       String ONLY string
       Void ONLY void


-- %$Sequencing$
-- % lift functions from sequences
FUN <> : parser[seq[data]]
FUN :: : parser[data] ** parser[seq[data]] -> parser[seq[data]]
FUN ++ : parser[seq[data]] ** parser[seq[data]] -> parser[seq[data]]

-- %$Repeaters$
-- % repeat parser at most/at least this much
FUN max: nat ** parser[data] -> parser[seq[data]]
FUN min: nat ** parser[data] -> parser[seq[data]]

-- % @code{(from, to) x P} between from and to times (inclusive)
FUN x : nat ** nat ** parser[data] -> parser[seq[data]]
-- % exactly this much
FUN x : nat ** parser[data] -> parser[seq[data]]

-- %repeat any time as long as possible
FUN * : parser[data] -> parser[seq[data]]
-- %at least once
FUN + : parser[data] -> parser[seq[data]]
-- %once or never
FUN ? : parser[data] -> parser[option[data]]

-- %Repeat until context fulfills predicate or parser[void] succeeds
FUN until: parser[data] ** (string -> bool) -> parser[seq[data]]
FUN until: parser[data] ** parser[void] -> parser[seq[data]]

-- %$Pre- and Postfixes$

-- %add Prefix
FUN <| : parser[void] ** parser[data] -> parser[data]
-- %add postfix
FUN |> : parser[data] ** parser[void] -> parser[data]
-- %add as pre- and postfix
FUN <|> : parser[data] ** parser[void] -> parser[data]


-- %like the functions above, but with parser[void] as separator
FUN * : parser[data] ** parser[void] -> parser[seq[data]]
FUN + : parser[data] ** parser[void] -> parser[seq[data]]


-- %$Ignoring$

-- %map returned data to void type
FUN ignore: parser[data] -> parser[void]
-- %recognize the string, return the data, but do not change context
FUN phantom: parser[data] -> parser[data]


