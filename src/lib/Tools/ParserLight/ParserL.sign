SIGNATURE ParserL[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

-- %$Parameter$
SORT data

-- %$Imports$
IMPORT String ONLY string
       Option[data] ONLY option

-- %$Data Type$

/* %The function should remove the prefix it recognizes from the string, and 
return @code{avail} of the data in question. The law @*
asFct(s) === (nil, s1) ==> s === s1@*
is expected to hold; note that the converse is not true! */

TYPE parser == asParser(asFct: string -> option[data] ** string)

-- %$Basic Parsers$

-- %always succeeds, recognizes the empty string and returns @code{data}.
FUN succeed: data -> parser
-- %never succeeds
FUN break: parser

-- %recognizes the given denotation, returns data
FUN |-> : denotation ** data -> parser

-- %$Applying Parsers$

-- %just forget the second component of the @code{asFct} result
FUN @ : parser ** string -> option[data]
-- %unpack the result, abort if parser failed
FUN @! : parser ** string -> data

-- %$Alternative$

-- %order matters, first parser is tried first
FUN | : parser ** parser -> parser
