IMPLEMENTATION Nat
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:56 $ ($Revision: 1.1.1.1 $)

IMPORT ABORT[nat] 	ONLY ABORT
       INLINE[nat]      ONLY INLINE


DATA nat 	== primitive	-- simulate primitive storage class
		
-- DEF 0	== ...

DEF succ(x) 	== IF x < max THEN uncheckedSucc(x)
	       	   ELSE ABORT("succ'Nat: applied to max") FI
DEF pred(x)	== IF x |= 0 THEN uncheckedPred(x)
	       	   ELSE ABORT("pred'Nat: applied to zero") FI

FUN uncheckedSucc uncheckedPred : nat -> nat
-- DEF uncheckedSucc(x) == ...
-- DEF uncheckedPred(x) == ...

-- DEF 0?(x)	== ...
-- DEF succ?(x)	== ...

DEF 1 		== succ(0)
DEF 2		== succ(1)
DEF 3		== succ(2)
DEF 4		== succ(3)
DEF 5		== succ(4)
DEF 6		== succ(5)
DEF 7		== succ(6)
DEF 8		== succ(7)
DEF 9		== succ(8)
DEF 10		== succ(9)
DEF 11		== succ(10)
DEF 12		== succ(11)
DEF 13		== succ(12)
DEF 14		== succ(13)
DEF 15		== succ(14)
DEF 16		== succ(15)
DEF 17		== succ(16)
DEF 18		== succ(17)
DEF 19		== succ(18)
DEF 20		== succ(19)
DEF 21		== succ(20)
DEF 22		== succ(21)
DEF 23		== succ(22)
DEF 24		== succ(23)
DEF 25		== succ(24)
DEF 26		== succ(25)
DEF 27		== succ(26)
DEF 28		== succ(27)
DEF 29		== succ(28)
DEF 30		== succ(29)
DEF 31		== succ(30)
DEF 32		== succ(31)
DEF 64		== 2 * 32
DEF 128		== 2 * 64
DEF 256		== 2 * 128
DEF 512		== 2 * 256
DEF 1024	== 2 * 512
DEF 100		== 10*10
DEF 1000	== 100*10
DEF 10000	== 1000*10
DEF 100000	== 10000*10
DEF 1000000	== 100000*10

DEF min		== 0
-- DEF max	== ...

DEF x+y		== IF max uncheckedSub y >= x THEN uncheckedAdd(x,y)
		   ELSE ABORT("+'Nat: sum is too large") FI
DEF x-y		== IF y<=x THEN uncheckedSub(x,y)
			   ELSE ABORT("-'Nat: right operand greater then left")
			   FI
DEF x*y		== 
		   LET ok? == IF y 0? THEN true
				      ELSE max uncheckedDiv y >= x FI
		   IN
		   IF ok? THEN uncheckedMul(x,y)
		   ELSE ABORT("*'Nat: product too large") FI
DEF x/y		== IF succ?(y) THEN uncheckedDiv(x,y)
			       ELSE ABORT("/'Nat: divisor zero") FI
DEF x div y	== IF succ?(y) THEN uncheckedDiv(x,y)
			       ELSE ABORT("div'Nat: divisor zero") FI
DEF x%y		== IF succ?(y) THEN uncheckedMod(x,y)
			       ELSE ABORT("%'Nat: divisor zero") FI
DEF x mod y		== IF succ?(y) THEN uncheckedMod(x,y)
			       ELSE ABORT("mod'Nat: divisor zero") FI

FUN uncheckedAdd uncheckedSub uncheckedMul uncheckedDiv
    uncheckedMod : nat ** nat -> nat
-- DEF uncheckedAdd(x1,x2) == ...
-- DEF uncheckedSub(x1,x2) == ...
-- DEF uncheckedMul(x1,x2) == ...
-- DEF uncheckedDiv(x1,x2) == ...
-- DEF uncheckedMod(x1,x2) == ...

DEF x double	== IF max uncheckedSub x > x THEN x uncheckedAdd x ELSE 
		   ABORT("double'Nat:operand too large") FI
DEF x half	== x uncheckedDiv 2

DEF x min y	== IF x<=y THEN x ELSE y FI
DEF x max y	== IF x>=y THEN x ELSE y FI

-- DEF x even?	== ..
-- DEF x odd?	== ..

-- DEF x<=y	== ..
-- DEF x=y	== ..
-- DEF x>=y	== ..
-- DEF x<y	== ..
-- DEF x>y	== ..
-- DEF x|=y	== ..

DEF d !	== INLINE("inline_opal_nat", "inline_c_nat:(NAT)", d)


