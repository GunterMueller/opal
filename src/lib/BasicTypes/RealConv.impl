IMPLEMENTATION RealConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:57 $ ($Revision: 1.1.1.1 $)
-- converting real numbers

IMPORT Real ONLY abs / floor - neg? 10 1 * = < >= 0
       Char ONLY min !
       Nat ONLY 0 succ < 16 >= + ! 
       Int ONLY + - 1 0 % zero? abs 10 100 pos? >= /
       Denotation ONLY init := # delete
       Char ONLY char min
       IntConv ONLY asNat
       CharConv ONLY asNat
       NatConv ONLY asChar
       

-- converting to denotations
DEF r` == r`16
-- DEF r`n == ...

DEF r`` == r``16
-- DEF r``n == ... 

/* ********
LET d == init(maxlenReal, min)
	      p == 0
	      rr == abs(r)
	      (nr, exp) == normalisiert(rr, 0)
	      (d1, p1) == IF r neg? THEN ((d,0) := ("-"!), succ(p)) ELSE (d,p) FI
	      d2 == (d1, p1) := asChar(asNat(nr) + asNat("0"!))
	      p2 == succ(p1)
	      d3 == (d2, p2) := ("."!)
	      p3 == succ(p2)
	      (d4, succlast) == addNachkomma(d3,p3,nr - floor(nr), 0)
	      (d5, succlast1) == addExp(d4, succlast, exp)
          IN
	  	delete(d5, succlast1, #(d5))


/* r >= 0 */
FUN normalisiert: real ** int -> real ** int
DEF normalisiert(r, exp) ==
    IF r < 10 and r >= 1 THEN (r, exp)
    IF r >= 10 THEN normalisiert(r / 10, exp + 1)
    IF r < 1  THEN normalisiert(r * 10, exp - 1)
    FI

/* 1 > r >= 0 */
-- 1. nat: Position, auf die naechste Stelle kommt
-- 2. nat: anzahl bisher erzeugter Stellen (max. 16 Stellen)
FUN addNachkomma: denotation ** nat ** real ** nat -> denotation ** nat
DEF addNachkomma(d, pos, r, ns) == 
    IF 0 = r or ns >= 16 THEN (d, pos)
    ELSE LET rneu == 10 * r
	     n == asNat(rneu)
	     d1 == (d,pos) := asChar(n + asNat("0"!)) 
	 IN addNachkomma(d1, succ(pos), rneu, succ(ns))
    FI
	       	 
-- exponenten benoetigen hoechstens "e"+vorzeichen+drei stellen
FUN addExp: denotation ** nat ** int -> denotation ** nat
DEF addExp(d, pos, exp) ==
    IF exp zero? THEN (d, pos)
    ELSE LET (d1, p1) == ((d, pos) := ("e"!), succ(pos))
	     vz == IF exp pos? THEN "+"! ELSE "-"! FI
	     (d2, p2) == ((d1, p1) := vz, succ(p1))
	     ae == abs(exp)
	     (d3, p3) == IF ae >= 100 THEN 
			   ((d2,p2) := asChar(asNat(ae / 100) + asNat("0"!)),
		            succ(p2))
			 ELSE (d2, p2)
			 FI
             ae1 == ae % 100
	     (d4, p4) == IF ae1 >= 10 THEN 
			   ((d3,p3) := asChar(asNat(ae1 / 10) + asNat("0"!)),
		            succ(p3))
			 ELSE (d3, p3)
			 FI
	     ae2 == ae % 10
	     (d5, p5) == ((d4,p4) := asChar(asNat(ae2) + asNat("0"!)),
		            succ(p4))
         IN
	     (d5, p5)
    FI

********* */

-- DEF asNat(r) == ...
-- DEF asInt(r) == ...

DEF trunc == asNat


-- /!\ This is implementation dependent
FUN maxlenReal : nat
DEF maxlenReal == "24"!

