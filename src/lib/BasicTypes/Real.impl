IMPLEMENTATION Real
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-10-12 18:40:03 $ ($Revision: 1.2 $)

IMPORT INLINE ONLY INLINE
       ABORT ONLY ABORT

DATA real == product(a: bool, b: bool)	
		-- simulate storage class of flat product

-- DEF 0 == ...

                  DEF 1 ==  "1"! DEF 2 ==  "2"! DEF 3 ==  "3"! DEF 4 ==  "4"!  
   DEF  5 == "5"! DEF 6 ==  "6"! DEF 7 ==  "7"! DEF 8 ==  "8"! DEF 9 ==  "9"!
   DEF 10 =="10"! DEF 11 =="11"! DEF 12 =="12"! DEF 13 =="13"! DEF 14 =="14"!  
   DEF 15 =="15"! DEF 16 =="16"! DEF 17 =="17"! DEF 18 =="18"! DEF 19 =="19"!
   DEF 20 =="20"! DEF 21 =="21"! DEF 22 =="22"! DEF 23 =="23"! DEF 24 =="24"!  
   DEF 25 =="25"! DEF 26 =="26"! DEF 27 =="27"! DEF 28 =="28"! DEF 29 =="29"!
   DEF 30 =="30"! DEF 31 =="31"! DEF 32 =="32"!  
   DEF 64 =="64"! DEF 128 =="128"! DEF 256 =="256"! 
   DEF 512 =="512"! DEF 1024 =="1024"!
   DEF 100 =="100"! DEF 1000 =="1000"! DEF 10000 =="10000"! 
   DEF 100000 =="100000"! DEF 1000000 =="1000000"!

-- DEF max == ...
-- DEF min == ...
-- DEF pi == ...
-- DEF e  == ...
-- DEF eps == ...

DEF a + b ==  LET ok? == IF a >= 0  THEN uncheckedSub(max,a) > b
                         ELSE uncheckedSub(max-,a) < b FI
              IN
                IF ok? THEN uncheckedAdd(a,b) 
                ELSE ABORT("+'Real: sum out of range") FI

DEF a - b ==  LET ok? == IF a > 0 THEN uncheckedSub(max,a) > -(b)
                         IF a < 0 THEN uncheckedSub(max-,a) < -(b)
                         ELSE b |= max FI
              IN
                IF ok? THEN uncheckedSub(a,b) 
                ELSE ABORT("-'Real: difference out of range") FI

DEF a * b ==  LET ok? == IF abs(a) < 1 THEN true
                         ELSE max uncheckedDiv abs(a) >= abs(b)
                         FI
              IN
                IF ok? THEN uncheckedMul(a,b)
                ELSE ABORT("*'Real: product out of range") FI

DEF a / b == IF b = 0 THEN ABORT("/'Real: divisor zero") 
             IF abs(b) < 1 ANDIF
                abs(a) > max uncheckedMul abs(b)
                THEN ABORT("/'Real: quotient out of range")
             ELSE uncheckedDiv(a,b)
             FI

DEF a pow b == IF a > 0 THEN uncheckedPow(a,b)
               IF a = 0 THEN IF b > 0 THEN uncheckedPow(a,b)
                             ELSE ABORT("pow'Real: cannot raise zero to a negative power") 
                             FI
               IF a < 0 THEN IF b = ceil(b) THEN uncheckedPow(a,b)
                             ELSE ABORT("pow'Real: cannot raise negative number to a non-integer power")
                             FI
               FI

FUN uncheckedAdd uncheckedSub 
    uncheckedMul uncheckedDiv 
    uncheckedPow              : real ** real -> real
-- DEF uncheckedXXX == ...

-- DEF exp(a) == ...

DEF sqrt(a) == IF a >= 0 THEN uncheckedSqrt(a)
               ELSE ABORT("sqrt'Real: square root not defined for negative numbers")
               FI

DEF ln(a) == IF a > 0 THEN uncheckedLn(a)
             ELSE ABORT("ln'Real: logarithm only for positive numbers")
             FI

DEF log(a) == IF a > 0 THEN uncheckedLog(a)
              ELSE ABORT("log'Real: logarithm only for positive numbers")
              FI

FUN uncheckedSqrt uncheckedLn uncheckedLog : real -> real
-- DEF uncheckedXXX == ...

-- DEF -(a) == ...
-- DEF abs(a) == ...
-- we assume that max and min are integer numbers, otherwise ceil and floor
-- must be equipped with tests also
-- DEF ceil(a) == ...
-- DEF floor(a) == ...

DEF sign(a) == IF pos?(a) THEN 1
	       IF neg?(a) THEN -(1)
	       IF zero?(a)THEN 0
	       FI

DEF min(a, b) == IF a < b THEN a ELSE b FI
DEF max(a, b) == IF a > b THEN a ELSE b FI
DEF pos?(a) == a > 0
DEF neg?(a) == a < 0
DEF zero?(a) == a = 0

-- DEF a <= b == ...
-- DEF a <  b == ...
-- DEF a =  b == ...
-- DEF a |= b == ...
-- DEF a >= b == ...
-- DEF a >  b == ...


-- DEF sin(a) == ...
-- DEF cos(a) == ...
-- DEF tan(a) == ...
DEF arcsin(a) == IF a >= -(1) ANDIF a <= 1 THEN uncheckedArcsin(a)
                 ELSE ABORT("arcsin'Real: argument must be in [-1,1]")
                 FI
DEF arccos(a) == IF a >= -(1) ANDIF a <= 1 THEN uncheckedArccos(a)
                 ELSE ABORT("arccos'Real: argument must be in [-1,1]")
                 FI

-- DEF arctan(a) == ...
-- DEF sinh(a) == ...
-- DEF cosh(a) == ...
-- DEF tanh(a) == ...

FUN uncheckedArcsin uncheckedArccos : real -> real
-- DEF uncheckedXXX == ...

DEF deg(r) == r * ("180"!) / pi
DEF rad(d) == d * pi / ("180"!)

DEF d! == INLINE("inline_opal_real","inline_c_real:(double)",d)

