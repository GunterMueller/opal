IMPLEMENTATION Int
/* %- Copyright 1989 - 1999 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT 	ABORT[int]	ONLY ABORT

DATA int == primitive	-- simulate primitive storage class

DEF succ(x)     == IF x < max THEN uncheckedSucc(x)
                   ELSE ABORT("succ'Int: applied to max") FI
DEF pred(x)     == IF x > min THEN uncheckedPred(x)
                   ELSE ABORT("pred'Int: applied to min") FI

FUN uncheckedSucc uncheckedPred : int -> int
/$ handcoded [uncheckedSucc] $/
/$ handcoded [uncheckedPred] $/


/$ handcoded [0, min:int, max:int] $/

DEF 1 		== succ(0)
DEF 2		== succ(1)
DEF 3		== succ(2)
DEF 4		== succ(3)
DEF 5		== succ(4)
DEF 6		== succ(5)
DEF 7		== succ(6)
DEF 8		== succ(7)
DEF 9		== succ(8)
DEF 10		== succ(9)
DEF 11		== succ(10)
DEF 12		== succ(11)
DEF 13		== succ(12)
DEF 14		== succ(13)
DEF 15		== succ(14)
DEF 16		== succ(15)
DEF 17		== succ(16)
DEF 18		== succ(17)
DEF 19		== succ(18)
DEF 20		== succ(19)
DEF 21		== succ(20)
DEF 22		== succ(21)
DEF 23		== succ(22)
DEF 24		== succ(23)
DEF 25		== succ(24)
DEF 26		== succ(25)
DEF 27		== succ(26)
DEF 28		== succ(27)
DEF 29		== succ(28)
DEF 30		== succ(29)
DEF 31		== succ(30)
DEF 32		== succ(31)
DEF 64		== 2 * 32
DEF 128		== 2 * 64
DEF 256		== 2 * 128
DEF 512		== 2 * 256
DEF 1024	== 2 * 512
DEF 100		== 10*10
DEF 1000	== 100*10
DEF 10000	== 1000*10
DEF 100000	== 10000*10
DEF 1000000	== 100000*10

/$ handcoded [abs, - : int -> int] $/
-- checks are formulated such that -op can eliminate them.

-- assert: x >= 0 => DFD(x + min)
--         x <  0 => DFD(x + max)

DEF x+y	== 
    LET ok? == 
	    IF x >= 0  THEN uncheckedSub(max,x) > y
		       ELSE uncheckedSub(min,x) < y FI
    IN
    IF ok? THEN uncheckedAdd(x,y) 
   	   ELSE ABORT("+'Int: sum out of range") FI

DEF x-y	== 
    LET ok? ==
	    IF x > 0   	THEN uncheckedSub(max,x) > -(y)
	    IF x < 0   	THEN uncheckedSub(min,x) < -(y)
		   	ELSE y |= max FI
    IN
    IF ok? THEN uncheckedSub(x,y) 
   	   ELSE ABORT("-'Int: difference out of range") FI


DEF x*y	== 
    LET ok? ==
		IF x = 0	     THEN true
		OTHERWISE
		IF sign(x) = sign(y) THEN max uncheckedDiv abs(x) >= abs(y)
				     ELSE -(min) uncheckedDiv abs(x) >= abs(y)
				     FI
    IN
    IF ok? THEN uncheckedMul(x,y)
	   ELSE ABORT("*'Int: product out of range") FI
		   

DEF x/y		== IF y |= 0 THEN uncheckedDiv(x,y)
			     ELSE ABORT("/'Int: divisor zero") FI
DEF x div y		== IF y |= 0 THEN uncheckedDiv(x,y)
			     ELSE ABORT("div'Int: divisor zero") FI
DEF x%y		== IF y |= 0 THEN uncheckedMod(x,y)
			     ELSE ABORT("%'Int: divisor zero") FI
DEF x mod y		== IF y |= 0 THEN uncheckedMod(x,y)
			     ELSE ABORT("mod'Int: divisor zero") FI

FUN uncheckedAdd uncheckedSub uncheckedMul uncheckedDiv
    uncheckedMod : int ** int -> int
/$ handcoded [uncheckedAdd] $/
/$ handcoded [uncheckedSub] $/
/$ handcoded [uncheckedMul] $/
/$ handcoded [uncheckedDiv] $/
/$ handcoded [uncheckedMod] $/

DEF x ^ y == pow(x, y)
/$ handcoded [pow] $/

DEF x double == 
    LET ok? == 	IF x >= 0 THEN max uncheckedSub x > x  
		          ELSE min uncheckedSub x < x FI
    IN
    IF ok? THEN x uncheckedAdd x
	   ELSE ABORT("double'Int: operand out of range") FI

DEF x half	== x / 2

/$ handcoded [sign] $/

DEF x min y	== IF x<=y THEN x ELSE y FI
DEF x max y	== IF x>=y THEN x ELSE y FI

/$ handcoded [even?, odd?, neg?, zero?, pos?] $/
/$ handcoded [<=, = : int ** int -> bool, >=, <, >, |= : int ** int -> bool] $/
/$ handcoded [!] $/
