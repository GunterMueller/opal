/* %More functions on denotations. These functions are modelled after
funtions on arrays. Denotations should be used for constant text which
is not modified very often; otherwise the usage of tpe @code{string}
is recommended. */

SIGNATURE Denotation
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

/* %Denotations are a special kind of strings of characters. The
    characters are counted from position 0 (at the left) to position
    n-1 at the right, where n is the length of the denotation. If not
    mentioned otherwise, functions which take an index as argument
    will abort if the index is not in the range 0 ... n-1. */


IMPORT	Nat	ONLY nat
        Char ONLY char

-- %$Constructing New Denotations$

/* %@code{init (n, c)}: generate denotation of size @code{n} and
initial characters @code{c} */
FUN init        : nat ** char -> denotation

/* %@code{init(n, f)}: generate denotation of size @code{n} and
initial data ccode{f(i)} */
FUN init        : nat ** (nat -> char) -> denotation

FUN empty	: denotation


-- %$Combining Denotations$

-- %Concatentation of two denotations. 
FUN ++          : denotation ** denotation -> denotation

/* %Concatenate: @code{+/+(d)(d1, d2)} concatenate both denotations, put
@code{d} inbetween, if both are nonempty. */
FUN +/+          : char -> denotation ** denotation -> denotation
FUN +/+          : denotation -> denotation ** denotation -> denotation

/* %Concatenate: @code{+%+(d)(d1, d2)} concatenate both denotations, put
@code{d} inbetween unconditionally. */
FUN +%+         : char -> denotation ** denotation -> denotation
FUN +%+         : denotation -> denotation ** denotation -> denotation

-- %$Working On a Denotation$

/* %@code{upd(i, c, d) = (d, i) := c}: update @code{i}th character of
denotation @code{d} with value @code{c} */
FUN :=          : denotation ** nat ** char -> denotation
FUN upd		: nat ** char ** denotation -> denotation

/* %@code{slice (d, i, j)}: give the slice of denotation @code{d} from
position @code{i} upto @code{j} (both inclusive). If @code{i > j}
return the empty denotation. The function is total: values greater than
@code{n-1} are treated as equal to @code{n-1}. */
FUN slice       : denotation ** nat ** nat -> denotation

/* %@code{delete(d, i, j)}: delete @code{slice(d, i, j)} from a
denotation. This function is total. */
FUN delete      : denotation ** nat ** nat  -> denotation

/* %@code{insert(d1, i, d2)}: insert denotation @code{d2} in @code{d1}
at position @code{i}. If @code{i >= n} then insert is equal to
concatenation. */
FUN insert      : denotation ** nat ** denotation -> denotation

-- %$Accessing Chars in a Denotation$

-- %Select character at position @code{i} in @code{d}.
FUN !           : denotation ** nat -> char

-- %$Information About a Denotation$

-- %Length of denotation @code{d}
FUN #           : denotation -> nat

-- %Test for emptyness
FUN empty?	: denotation -> bool


-- %$Comparing Denotations$

-- %Lexicographic orderings
FUN < <= >= >   : denotation ** denotation -> bool

-- %Equality, Inequality
FUN = |=        : denotation ** denotation -> bool

-- %$Compatibility to Former String Type$

-- %Make denotation consisting of single character @code{c}
FUN %		: char -> denotation

-- %Identity
FUN !		: denotation -> denotation

-- %@ignore
FUN uncheckedUpd : denotation ** nat ** char -> denotation
FUN uncheckedSel : denotation ** nat -> char
-- %@end ignore
