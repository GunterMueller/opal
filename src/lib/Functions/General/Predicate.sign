/* %Functions on predicates, where predicate is synonym for
    type @code{data -> bool}. */

SIGNATURE Predicate[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

SORT data

-- %$Boolean Functions$
/* %Similarly to the simple boolean functions,
     e.g. @code{(f and g)(x) == f(x) and g(x)} */

FUN true false    :                                     (data -> bool)
FUN ~             :                   (data -> bool) -> (data -> bool)
FUN and or        : (data -> bool) ** (data -> bool) -> (data -> bool)
  
-- %$Categories$
/* %Construct equivalence functions from predicates. Two data are
    equivalent if they both fulfill the same predicate. */

-- %Full relation: all combinations yield true
FUN equiv : data ** data -> bool
/* %Empty relation: all combinations yield false. (This ain't no equivalence
    relation, but may still come in handy for using @code{components},
    @pxref{@Overview{SeqFilter}} or @ref{@Overview{StringFilter}}.) */
FUN unequiv: data ** data -> bool
-- %Let @code{~ = %(P)}, then @code{x ~ y} is true, iff @code{P(x) and P(y)}.
FUN % : (data -> bool) -> data ** data -> bool
/* %Let @code{~ = P :: ~~}, then @code{x ~ y} is true, iff
    @code{P(x) and P(y)},
    is false, iff @code{P(x) xor P(y)}, is @code{x ~~ y} else. */ 
FUN :: : (data -> bool) ** (data ** data -> bool) -> data ** data -> bool
/* %Let @code{~ = P :: ~~}, then @code{x ~ y} is true, iff
    @code{P(x,y)}, is @code{x ~~ y} else. */ 
FUN :: : (data ** data -> bool) ** (data ** data -> bool) ->
          data ** data -> bool
