IMPLEMENTATION RUNTIME

IMPORT	
	CAST		COMPLETELY
	Com		ONLY call ans
	Nat		COMPLETELY
	Denotation	COMPLETELY
	NatConv		COMPLETELY
	Map		COMPLETELY
	Option		COMPLETELY
	Pair		COMPLETELY
	Void		COMPLETELY

DEF _|_				== undefObj
DEF link(Struct)		== call(cLink(makeStructSym(Struct)))
DEF lookup(Struct, No)		== call(cLookup(makeSym(Struct, No)))
DEF redefine(Struct, No, Obj)	== call(cRedefine(makeSym(Struct, No), Obj))

FUN makeStructSym : denotation -> denotation
DEF makeStructSym(Struct) == 
    LET Map? == symMap !? Struct
    IN
    IF avail?(Map?) THEN
	1st(cont(Map?))
    ELSE
	Struct
    FI

FUN makeSym : denotation ** nat -> denotation
DEF makeSym(Struct, No)	== 
    LET Map? == symMap !? Struct
    IN
    IF avail?(Map?) THEN
	"__A" ++ 1st(cont(Map?)) ++ "_" ++ `(2nd(cont(Map?)) ! No)
    ELSE
	"__A" ++ Struct ++ "_" ++ `(No)
    FI


FUN symMap : map[denotation,<,pair[denotation,map[nat,<,nat]]]

DEF symMap ==
    def("PREDEF_BOOL",
	    "BUILTIN" & def(2, 3,	-- false
			def(3, 4,	-- false?
			def(4, 5,	-- true
			def(5, 6,	-- false?
			def(6, 7,	-- ~
			def(7, 9,	-- and
			def(8, 8,	-- or
			def(9, 10,	-- =
			def(10, 11,
			    {}))))))))),
    def("DENOTATION",
	    "BUILTIN" & def(2, 1,	-- tl
			def(3, 2,	-- <|
			    {})),
    def("ABORT",
	    "BUILTIN" & def(2, 12,	-- ABORT
			    {}),
    {})))		



FUN cLink	: denotation		-> void -> ans[void]
FUN cLookup	: denotation		-> void -> ans[obj]
FUN cRedefine	: denotation ** obj	-> void -> ans[void]
FUN undefObj	: obj

DEF asObj(X:bool)		== cast(X)
DEF asObj(X:denotation)		== cast(X)
DEF asBool(X)			== cast(X)
DEF asDenotation(X)		== cast(X)

/$ handcoded [obj, tag, cLookup, cLink, cRedefine, undefObj, 
   cons, test?, sel] $/
