/* %
The structure @code{ComCheck} defines several command monad
combinators which deal with failures.
*/

SIGNATURE ComCheck[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

SORT data

IMPORT	Void		ONLY void
	Com[void] 	ONLY com
	Com[data] 	ONLY com



/* %
@code{Com1 | Com2} executes @code{Com1}. If @code{Com1} fails,
@code{Com2} is executed, otherwise the answer of @code{Com1}
is yielded. @code{Com1 breaks Com2} is an alternative notation
for @code{Com2 | Com1}.
*/

FUN | 		: com[data] ** com[data] -> com[data]
FUN breaks   	: com[data] ** com[data] -> com[data]

/* %
@code{section(Enter, Exit, Com}) ensures that the execution
of @code{Com} is surrounded by the execution of @code{Enter}
and @code{Exit}. It first executes @code{Enter}.
If @code{Enter} succeeds @code{Com} is executed. 
Afterwards @code{Exit} is executed, independent of the result
of @code{Com}. The answer is either the failure of @code{Enter},
or, if there wasn't any, the failure of @code{Com}, or, if
there wasn't any, the failure of @code{Exit}, or finally,
if no failure at all occured, the success of @code{Com}. 

@example
section(Enter, Exit, Com) == 
    Enter & (Com ; (\\Ans. IF okay?(Ans) THEN Exit & yield(Ans)
					 ELSE Exit ; yield(Ans) FI))
@end example
*/

FUN section: com[void] ** com[void] ** com[data] -> com[data]


/* %
@code{Aug check Com} executes the given command @code{Com}. If 
@code{Com}  fails, the error description of the failure is augmented by 
@code{Aug} (which usually is just the identity @code{\\X.X}),
the result together with the program name is printed to @code{stdErr}, 
and program execution is terminated with result code 1. Otherwise the 
answer is yielded.
*/

FUN check : (denotation -> denotation) ** com[data] -> com[data]
