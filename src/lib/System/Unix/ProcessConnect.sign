/* % This structure provides a bidirectional connection between two
OPAL processes. */

SIGNATURE ProcessConnect[inData,outData]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

SORT inData outData

IMPORT	Com[channel]	ONLY	com
	Com[void]	ONLY	com
	Com[bool]	ONLY	com
	Com[inData]	ONLY	com ans:SORT
	Com[option[inData]]
			ONLY	com
	Void		ONLY	void
	Option[inData]	ONLY	option
	
/* %
 channel representing a connection between two processes:
*/
SORT channel

/* %
 @code{open} establishes the connection. The @code{SymbolicKey} is the
name of a nonexistent file in the filesystem (usually a named pipe).

Successful opening is not a guarantee for an existing partner process.

 @code{close} closes a channel, and removes resource references. Only when 
both partner processes have closed a channel, the associated resources
will be actually freed.
 */

TYPE role      == client server
FUN open       : denotation ** role	-> com[channel]
FUN close      : channel		-> com[void]

/* %
 @code{incoming?} checks if there is an unread data item from partner.

 @code{read} waits for an incoming data item whereas @code{read?} returns
immediately either with the read data item or with @code{nil}.
@smallexample
	      'read? =^= IF incoming? THEN read ELSE nil FI'
@end smallexample

 @code{write} writes some data into channel.
 */
FUN incoming? : channel			-> com[bool]
FUN read      : channel			-> com[inData]
FUN read?     : channel			-> com[option[inData]]
FUN write     : channel ** outData	-> com[void]

