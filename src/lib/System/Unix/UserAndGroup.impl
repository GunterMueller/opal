IMPLEMENTATION UserAndGroup
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
-- user and group management

IMPORT
  Void                ONLY void nil
  Denotation	      ONLY < 
  Com                 ONLY com ans yield okay call
  ComCompose          ONLY &
  Option              ONLY option
  OptionMap           ONLY *
  Array               ONLY array
  ArrayConv           ONLY asSeq
  Seq                 ONLY seq
  Set                 ONLY set
  SetConv             ONLY asSet

  UnixFailures	      ONLY someError?	-- enforce dep. by dummy import

-- EXPORTED TYPES --

/$ handcoded [userid:SORT] $/

DATA user == user( userName : denotation,
                   userId   : userid,
                   iGroupId : groupid,
                   homeDir  : denotation,
                   shell    : denotation
                 )

/$ handcoded [groupid:SORT] $/

DATA group == group( groupName    : denotation,
                     groupId      : groupid,
                     groupMembers : set[denotation,<]
                   )

-- INTERNAL TYPES --

DATA hc_group == hc_group( groupName    : denotation,
                           groupId      : groupid,
                           groupMembers : array[denotation]
                         )

-- EXPORTED FUNCTIONS --

FUN < = : userid ** userid -> bool
/$ handcoded [< : userid ** userid -> bool,
              = : userid ** userid -> bool] $/

FUN < : user ** user -> bool
DEF User1 < User2 == userId(User1) < userId(User2)
FUN = : user ** user -> bool
DEF User1 = User2 == userId(User1) = userId(User2)

FUN getUser : userid -> com[option[user]]
DEF getUser(UId) == call( hc_getpwuid(UId) )

FUN getUser : denotation -> com[option[user]]
DEF getUser(UName) == call( hc_getpwnam(UName) )

FUN < = : groupid ** groupid -> bool
/$ handcoded [< : groupid ** groupid -> bool,
              = : groupid ** groupid -> bool] $/

FUN < : group ** group -> bool
DEF Group1 < Group2 == groupId(Group1) < groupId(Group2)
FUN = : group ** group -> bool
DEF Group1 = Group2 == groupId(Group1) = groupId(Group2)

FUN getGroup : groupid -> com[option[group]]
DEF getGroup(GId) ==
  call( hc_getgrgid(GId) ) & (\\HCGrpOpt.
  yield(okay( HCGrpOpt convertGroup ))
  )

FUN getGroup : denotation -> com[option[group]]
DEF getGroup(GName) ==
  call( hc_getgrnam(GName) ) & (\\HCGrpOpt.
  yield(okay( HCGrpOpt convertGroup ))
  )

FUN getGroups : com[set[groupid,<]]
DEF getGroups ==
  call( hc_getgroups ) & (\\GArray.
  yield(okay( asSet(asSeq(GArray)) ))
  )


-- INTERNAL FUNCTIONS --

FUN convertGroup : option[hc_group] -> option[group]
DEF convertGroup(GrpOpt) ==
  (\\Grp.
     group(Grp groupName,
           Grp groupId,
           asSet(asSeq(Grp groupMembers))
          )
  ) * GrpOpt

FUN hc_getpwuid : userid -> void -> ans[option[user]]
FUN hc_getpwnam : denotation -> void -> ans[option[user]]
FUN hc_getgrgid : groupid -> void -> ans[option[hc_group]]
FUN hc_getgrnam : denotation -> void -> ans[option[hc_group]]
FUN hc_getgroups : void -> ans[array[groupid]]

/$ handcoded [hc_getpwuid, hc_getpwnam, hc_getgrgid, hc_getgrnam, 
   hc_getgroups] $/
