/* % This structure provides access to the environment and the
arguments of an OPAL Process. 
*/

SIGNATURE ProcessArgs
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Nat             	ONLY nat
       	Void			ONLY void 
	Seq[denotation]		ONLY seq
        Com[denotation] 	ONLY com ans
        Com[seq]        	ONLY com
       	Com[nat]        	ONLY com
	Com[seq[denotation]]	ONLY com
	Com[void]		ONLY com


/* % NOTE: this structure replaces the structure @code{Env} in
the OPAL library. All references to @code{Env} should be replaced
to references to this structure, since structure @code{Env} will
go away in the near future.
*/


-- %$Process Arguments$ 

/* % @code{argCount} returns the number of process arguments
including the process name: */

FUN argCount    : com[nat]

/* % @code{arg(N)} returns the @code{N}th argument. Note that the 0th 
argument is the program name. @code{noSuchArg} tests for the failure that 
the nth argument doesn't exists: */

FUN arg         : nat->com[denotation]
FUN noSuchArg?  : ans[denotation] -> bool

/* % @code{args} returns the sequence of all arguments including the
program name: */

FUN args        : com[seq[denotation]]

/* % @code{shift(N)} shifts the sequence of arguments attached to
the running process by the specified amount @code{N}, dropping the
first @code{N} arguments for subsequent calls to @code{arg} or
@code{args}: */

FUN shift	: nat -> com[void]

/* % @code{setArgs(Args)} completely replaces the arguments of
the running process for subsequent calls to @code{arg} or @code{args}: */

FUN setArgs	: seq[denotation]	-> com[void]


-- %$Environment Variables$

/* % @code{env} returns the value of an environment variable.
@code{noSuchEnvVar} tests for the failure that an environment variable
of the given name  doesn't exists: */

FUN env         : denotation		-> com[denotation]
FUN noSuchEnvVar? : ans[denotation] 	-> bool


/* % @code{setEnv(Var, Val)} defines the value of an environment
variable. If a value for @code{Var} does already exists, it will
be overwritten, otherwise a new variable will be created: */

FUN setEnv	: denotation ** denotation	-> com[void]

