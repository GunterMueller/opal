IMPLEMENTATION File
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-06 15:08:53 $ ($Revision: 1.2 $)
-- files

IMPORT	Char ONLY char
	Com ONLY com ans:SORT call succeed
       	ComCompose ONLY &
       	ComAction ONLY done
	Nat ONLY nat
	Int ONLY int
       	Seq ONLY seq revert <> ::
	String ONLY string asString
	UnixFailures COMPLETELY
	Void ONLY void

DATA file == primitive	-- simulate storage class 

FUN stdIn stdOut stdErr : file
/$ handcoded [stdIn, stdOut, stdErr] $/

DEF open(fn,kind) == call(xopen(fn,kind))
    FUN xopen: denotation ** denotation -> void -> ans[file]

DEF reopen(fn,kind,file) == call(xreopen(fn,kind,file))
    FUN xreopen: denotation ** denotation ** file -> void -> ans[void]

DEF flush(f) == call(xflush(f))
    FUN xflush: file -> void -> ans[void]

DEF close(f) == call(xclose(f))
    FUN xclose : file -> void -> ans[void]

DEF eof?(f) == call(xeof?(f))
    FUN xeof? : file -> void -> ans[bool]

DEF error?(f) == call(xerror?(f))
    FUN xerror? : file -> void -> ans[bool]

DEF size(f) == call(xsize(f))
    FUN xsize : file -> void -> ans[nat]

DEF tell(f) == call(xtell(f))
    FUN xtell : file -> void -> ans[nat]

DEF seek(f,p,m) == call(xseek(f,p,m))
    FUN xseek : file ** int ** seekMode -> void -> ans[void]
    DATA seekMode == fromStart fromCurrent fromEnd

DEF rewind(f) == call(xrewind(f))
    FUN xrewind : file -> void -> ans[void]

DEF unread(f,c) == call(xunreadChar(f,c))
    FUN xunreadChar : file ** char -> void -> ans[void]

DEF read(f) == call(xreadChar(f))
    FUN xreadChar : file -> void -> ans[char]

DEF read(f,n) == call(xreadString(f,n))
    FUN xreadString : file ** nat -> void -> ans[string]

DEF read(f,p) == call(xreadWhile(f,p))
    FUN xreadWhile : file ** (char -> bool) -> void -> ans[string]

DEF readLine(f) == call(xreadLine(f))
    FUN xreadLine : file -> void -> ans[string]

DEF readLines(f) == readLines(f, <>)

FUN readLines: file ** seq[string] -> com[seq[string]]
DEF readLines(f, acc) ==
    eof?(f) & (\\ e? .
    IF e? THEN succeed(revert(acc))
    ELSE readLine(f) & (\\ str.
         readLines(f, str :: acc))
    FI)

DEF write(f,c) == call(xwriteChar(f,c))
    FUN xwriteChar : file ** char -> void -> ans[void]

DEF write(f,s) == call(xwriteString(f,s))
DEF write(f,d) == call(xwriteString(f,asString(d)))
    FUN xwriteString : file ** string -> void -> ans[void]

DEF writeLine(f,s) == call(xwriteLine(f,s))
DEF writeLine(f,d) == call(xwriteLine(f,asString(d)))
    FUN xwriteLine : file ** string -> void -> ans[void]

DEF writeLines(_, <>) == done
DEF writeLines(f, a :: R) == writeLine(f, a) & writeLines(f, R)

/$ handcoded [xopen, xreopen, xflush, xclose, xeof?, xerror?, xsize,
   xtell, xseek, xrewind, xunreadChar, xreadChar, xreadString, 
   xreadWhile, xreadLine, xwriteChar, xwriteString, xwriteLine] $/