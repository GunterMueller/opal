/* %Functions from this structure are @emph{outdated}, use instead
    functions from @ref{@Overview{ProcessCtrl}}.

*/
SIGNATURE Process
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:19 $ ($Revision: 1.1.1.1 $)
-- unix like processes

IMPORT  Nat                ONLY  nat
	Void               ONLY  void
	String             ONLY  string
	Seq[string]        ONLY  seq
	Option[seq[string]] ONLY option
	Pair[process,nat]  ONLY  pair
        Com[process]       ONLY  com
        Com[pair]          ONLY  com
        Com[void]          ONLY  com
	File	   	   ONLY  file
	Com[file]	   ONLY  com




SORT process 
/$ WARNING [process] structure Process is outdated, use functions from structure ProcessCtrl instead $/
/$ WARNING [popen] structure Process is outdated, use functions from structure ProcessCtrl instead $/
/$ WARNING [pclose] structure Process is outdated, use functions from structure ProcessCtrl instead $/

FUN self           : process
		   -- myself

FUN self?          : process -> bool
		   -- process in hand myself?

FUN fork           : com[process]
		   -- fork & (\\ P . ...)
                   -- create new process: on success, self?(P) is true
                   -- for the child, P is the childs pid for the parent.

FUN execve         : denotation ** seq[string] ** option[seq[string]]
							-> com[void]
		   -- execve(Prog, ArgS, EnvS?)
		   -- transforms calling process into new process with
		   -- image Prog und arguments ArgS
		   -- new process has the same environment as the calling
		   -- process if EnvS? is not avail

FUN kill           : process ** nat -> com[void]
		   -- kill(P,s) & (\\ - . ...)
		   -- send signal s to process 

FUN wait           : com[pair[process,nat]]
		   -- wait & (\\Pair . ...)
	           -- wait for termination of some child: 1st(Pair) is the 
		   -- terminated child, 2nd(Pair) its status.
  

FUN popen   	   : denotation ** denotation -> com[file]
		   -- popen(Command,Type) & (\\ File. ...)
		   -- excute Command under sh(1), with File
		   -- input from its standard output (Type = "r")
		   -- or File output to its standard input (Type = "w")

FUN pclose	   : file -> com[void]
		   -- must be used to close file
		   -- obtained by pin / pout 

