/* %This structure provides access to the UNIX filehandling interface.
*/
SIGNATURE File
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT  Char            ONLY char
        Void            ONLY void
        Nat             ONLY nat
        Int             ONLY int
        String          ONLY string
        Com[bool]       ONLY com
        Com[char]       ONLY com
        Com[void]       ONLY com
        Com[string]     ONLY com
        Com[nat]        ONLY com
        Com[file]       ONLY com
       Com[seq[string]] ONLY com
       Seq[string] ONLY seq

SORT file

-- %$Standard Files$
FUN stdIn stdOut stdErr : file

-- %$Opening and Closing Files$
/* %@code{open(fn,kind)} opens file named @code{fn}, @code{kind}
   indicates the allowed operations (similar to @code{fopen(3)}):
@table @samp
@item "r"
open for reading
@item "w"
 open for writing
@item "a"
open for writing, append, if file exists
@item "...+"
open for reading and writing
@item "...b"
binary file
@end table */
FUN open        : denotation ** denotation -> com[file]
/* %@code{reopen(fn, kind, file)} reopens @code{file} under name
   @code{fn} and @code{kind}. */
FUN reopen      : denotation ** denotation ** file -> com[void]
-- %Close given file
FUN close       : file -> com[void]

-- %$Positioning in a File$
/* %True, iff file pointer is at end? @footnote{Unlike C @code{feof},
   this function checks whether the next character does exist.} */
FUN eof?        : file -> com[bool]
-- %Return current position in file
FUN tell        : file -> com[nat]
-- %Seek to specified position.
FUN seek        : file ** int ** seekMode -> com[void]
TYPE seekMode == fromStart fromCurrent fromEnd
-- %Rewind file to the beginning.
FUN rewind      : file -> com[void]

-- %$Reading$
/* %NOTE: Processing files character-by-character will be slow because
   of the overhead involved by command evaluation. */
-- %Read next character-by-character.
FUN read        : file -> com[char]
-- %Unread last read character.
FUN unread      : file ** char -> com[void]
/* %Read at most number characters. Use @code{max'Nat} to read the
   whole file into a string. */
FUN read        : file ** nat -> com[string]
-- %Read string while predicate holds or until EOF occurs.
FUN read        : file ** (char -> bool) -> com[string]
-- %Read next line or until EOF. Result will not contain the newline.
FUN readLine    : file -> com[string]
-- %Read following lines until EOF.
FUN readLines      : file -> com[seq[string]]

-- %$Writing$
/* % NOTE: Processing files character-by-character will be slow because
 of the overhead involved by command evaluation. */
-- %Write a character, a denotation, a string to file.
FUN write       : file ** char -> com[void]
FUN write       : file ** denotation -> com[void]
FUN write       : file ** string -> com[void]
-- %Write a denotation or a string, followed by a newline.
FUN writeLine   : file ** denotation -> com[void]
FUN writeLine   : file ** string -> com[void]
-- %Write lines to file
FUN writeLines  : file ** seq[string] -> com[void]

-- %$Miscellaneous$
/* %@code{flush(f)} writes buffered data, if @code{f} is opened for
   writing. Ffect is undefined, if @code{f} is opened for reading! */
FUN flush       : file -> com[void]
-- %True, if last operation failed?
FUN error?      : file -> com[bool]
-- %Size of file
FUN size        : file -> com[nat]





-- ... more functions to come ...

