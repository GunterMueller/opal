/* %Binary I/O of (nearly) arbitrary data objects. */
SIGNATURE BinStream[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:17 $ ($Revision: 1.1.1.1 $)


SORT data

IMPORT  Void            ONLY void            
        String          ONLY string        
        Stream          ONLY input output
        Com[void]       ONLY com
        Com[data]       ONLY com
        Com[input]      ONLY com
        Com[output]     ONLY com

-- %$Using Directions$
/* % Strong typing is @i{violated} by functions from this
   structure. The user is responsible to perform type checks. Reading
   and writing functions have an additional @var{tag} argument, which
   may be used by the user for type checks.

  A tag mismatch error has the format 
  @code{"binary IO tag mismatches, found '%%', expected '&&'"}.
  @code{%%} is the tag found in the file,
  @code{&&} is the tag given in the call of read,
       both contain also an internal tag.

       Written objects must not contain functions, but this is not
       guaranteed to be checked by implementations.
*/

-- %$Opening Binary Streams$
-- %Open stream for reading in binary mode
FUN openBin     : denotation -> com[input]
-- %Open stream for writing in binary mode
    createBin   : denotation -> com[output]
    appendBin   : denotation -> com[output]

-- %$Writing to binary streams$

/* %@code{write(output, tag, data)}: write @code{data} to
   @code{output}, tagging it with @code{tag}. */
FUN write : output ** denotation ** data -> com[void]
/* %@code{store(file, tag, data)}: write @code{data} to file named
   @code{file}, tagging it with @code{tag}. */
FUN store: denotation ** denotation ** data -> com[void]

-- %$Reading from binary streams$
/* %@code{read(input, tag)}: read data from @code{input} which was
   written with the @code{tag} (aborts otherwise) */
FUN read : input ** denotation -> com[data]
/* %@code{load(file, tag)}: read data from file named @code{file}which
   was written with the @code{tag} (aborts otherwise) */ 
FUN load: denotation ** denotation -> com[data]

