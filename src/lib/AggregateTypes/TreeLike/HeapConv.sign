/* % Heaps can can be converted
@itemize
@item
to a textual representation,
@item
to a sequence of datas, 
@item
or to a tree.
@end itemize
*/

SIGNATURE HeapConv[data, <]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT Heap[data, <] ONLY heap
       Tree[data] ONLY tree
       Seq[data] ONLY seq
       Seq[seq[data]] ONLY seq
       String ONLY string

-- %$Parameter$
SORT data
FUN < : data ** data -> bool


-- %$Converting into Textual Representation$
/* % Heaps are represented as follows:
@table @asis
@item empty Heaps
are translated to "H[/\]"
@item leaves
are translated to "H[/@i{data}\]"
@item other heaps
are represented as "H[/@i{data},@i{left child},@i{right child}\]"
@end table
*/
FUN ` : (data -> denotation) -> heap -> denotation

FUN ` : (data -> string)     -> heap -> string

/* %These functions produce a twodimensional output of the heap. This
works only for fixed width fonts, of course. The output assumes
arbitrarily long lines. The function aborts, if one representation has
zero length. */
FUN graphic : (data -> denotation) -> heap -> denotation
FUN graphic : (data -> string    ) -> heap -> string


-- %$Converting into a Sequence$
/* % There are three possibilities: you can get the datas either in
@emph{inorder} -- left/node/right, in @emph{preorder} --
node/left/right, or in @emph{postorder} -- left/right/node.
*/
FUN asSeqIn  asSeqPre asSeqPost : heap -> seq[data]

/* % @code{asSeqBreadth} gives you a sequence of sequence of
datas. The ith element of the sequence contains all elements of level
i from left to right. */
FUN asSeqBreadth : heap -> seq[seq[data]]

-- %$Converting into a Tree$
/* %You can get the underlying tree structure or convert a tree to a heap */
FUN asHeap: tree -> heap
FUN asTree: heap -> tree
