IMPLEMENTATION BSTreeConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-05 14:10:04 $ ($Revision: 1.2 $)

IMPORT Tree ONLY tree node val left right nil
       TreeMap ONLY *
       TreeConv ONLY ` asSeqIn asSeqPre asSeqPost asSeqBreadth graphic
       BSTree ONLY bstree bstree? abs rep incl nil
       Denotation ONLY ++ 
       Char ONLY char
       Nat ONLY nat
       PrintableChar ONLY H B S
       String ONLY string :: 
       Seq ONLY seq
       SeqMap ONLY *
       SeqReduce ONLY /
       Pair ONLY pair 1st
       ABORT ONLY ABORT


-- %$Converting into textual representation$
DEF `(f: data -> denotation)(bst) == "BS" ++ `(f)(1st * (bst rep))
DEF `(f: data -> string)(bst) == B :: S :: `(f)(1st * (bst rep))

DEF graphic(f: data -> denotation)(bst) == graphic(f)(1st * (bst rep))
DEF graphic(f: data -> string)(bst) == graphic(f)(1st * (bst rep))

-- %$Converting into a sequence$

DEF asSeqIn(bst) == 1st * asSeqIn(bst rep)
DEF asSeqPre(bst) == 1st * asSeqPre(bst rep)
DEF asSeqPost(bst) == 1st * asSeqPost(bst rep)

DEF asSeqBreadth(bst) == asSeqBreadth(1st * (bst rep))

-- %$Converting to a Tree$
DEF asTree(bst) == 1st * (bst rep)
DEF asBSTree(t) == (incl, nil) / asSeqPost(t)

