IMPLEMENTATION BSTreeMapEnv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:10 $ ($Revision: 1.1.1.1 $)

IMPORT Tree ONLY tree
       TreeMapEnv COMPLETELY
       BSTreeConv ONLY asBSTree
       BSTree ONLY bstree rep
       Pair ONLY pair 1st 2nd &
       Nat ONLY nat

DEF f *_V (e, h) == asBSTree((f`) *_V (e, h rep))
DEF f *_^ (e, h) == LET (ee, t) == (f`) *_^ (e, h rep) IN (ee, asBSTree(t))

DEF f *_pre (e, h)  == 
    LET (ee, t) == (f`) *_pre (e, h rep)  IN (ee, asBSTree(t))
DEF f *_in (e, h)   == 
    LET (ee, t) == (f`) *_in (e, h rep)   IN (ee, asBSTree(t))
DEF f *_post (e, h) == 
    LET (ee, t) == (f`) *_post (e, h rep) IN (ee, asBSTree(t))

FUN ` : (env ** from -> env ** env ** to) -> 
        (env ** pair[from, nat] -> env ** env ** to)
DEF (f`)(e, a & _) == (f(e, a)): env ** env ** to 
FUN ` : (env ** env ** from -> env ** to) -> 
        (env ** env ** pair[from, nat] -> env ** to)
DEF (f`)(e1, e2, a & _) == f(e1, e2, a) 
FUN ` : (env ** from -> env ** to) -> 
        (env ** pair[from, nat] -> env ** to)
DEF (f`)(e, a & _) == (f(e, a)): env ** to
