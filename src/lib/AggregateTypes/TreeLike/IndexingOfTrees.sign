/* % This structure contains all functions for computing indices of
trees and which do not depend on the particular data type stored in
the nodes of the tree. */
SIGNATURE IndexingOfTrees
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT Nat ONLY nat

-- %$Handling Indices$
/* %@code{root} is the index of the root, @code{left} and @code{right}
produce the index of the left and right child respectively. */
FUN root: nat
FUN up: nat -> nat
FUN left: nat -> nat
FUN right: nat -> nat

/* % These functions check, whether the index points to the root, to a
location in the left or a location in the subtree. */
FUN root? : nat -> bool
FUN left? : nat -> bool
FUN right? : nat -> bool

/* % These functions adjust the index, so that it points to the same
location in the subtree, as the original index did, i.e. @code{t!i} is
equal to @code{left(t)!unleft(i)}. The functions are undefined, if the
index does not point into the left (right) subtree). */
FUN unleft: nat -> nat
FUN unright: nat -> nat
