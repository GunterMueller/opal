IMPLEMENTATION BSTreeIndex
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:10 $ ($Revision: 1.1.1.1 $)

IMPORT Nat ONLY nat 0 succ double half pred odd? even? 0?
       BSTree[data, <] ONLY bstree val node nil nil? :=_val bstree? abs rep
       OptionMap ONLY *
       ABORT ONLY ABORT
       Option ONLY option cont avail nil nil? avail?
       Tree ONLY tree
       Denotation ONLY ++
       Compose ONLY o
       TreeIndex ONLY !?
       Pair ONLY pair 1st 2nd
       IndexingOfTrees COMPLETELY



-- %$Handling Indices$

/* %If the index points to root, nothing happens. Otherwise, returns
the left or right subtree according to index, and adjusts the index by
@code{unleft} or @code{unright}. */
DEF step(bst AS node(_, l, r), i) ==
    IF i root? THEN (bst, 0)
    IF i left? THEN (l, unleft(i))
    IF i right? THEN (r, unright(i))
    FI
DEF step(nil, succ(_)) == 
    (ABORT("step'BSTreeIndex: cannot step from empty tree"), 0)

-- %$Accessing Values by Indices$
/* %@code{!} returns the value of the subtree with the given index,
which must exist. @code{!?} returns @code{nil}, if the index does not
exist. */
DEF t!i == val(t!i)

DEF t!?i == val * (t!?i)

/* %@code{upd} replace the val at the given index (which must exist)
either by the given data or by the result of applying the
function to the old value. */
DEF upd(i, d, t) == 
    repl("upd", t, i,
           \\tr. IF tr nil? THEN 
                     ABORT("upd'BSTreeIndex: cannot update empty tree")
                 ELSE tr :=_val d FI)

DEF upd(i, f, t) == 
    repl("upd", t, i, 
           \\tr. IF tr nil? THEN 
                    ABORT("upd'BSTreeIndex: cannot update empty tree")
                 ELSE tr :=_val f(val(tr)) FI)

-- %$Accessing trees by Indices$
/* %These functions return the subtrees instead of the values of the
subtrees */
DEF t!i == LET s == t!?i 
           IN 
           IF s nil? THEN ABORT("!'BSTreeIndex: index does not exist") 
           ELSE (cont(s)):bstree
           FI

DEF h !? i == abs * ((h rep) !? i)

/* % all of the following functions are replacements of subtrees and
mapped to the internal function @code{repl} */

DEF repl(t, i, new) == repl("repl", t, i, \\ _ . new)
DEF repl(t, i, f) == repl("repl", t, i, f)
DEF insert(t, i, new) == 
    repl("insert", t, i, 
         \\tr. IF tr nil? THEN new 
               ELSE ABORT("insert'BSTreeIndex: must replace an empty tree") 
               FI)
DEF delete(t, i) == repl("delete", t, i, \\ _ . nil)


/* % The internal function called by @code{upd}, @code{repl},
@code{insert}, @code{delete} */

FUN repl: denotation ** bstree[data, <] ** nat ** (bstree[data, <] -> 
                                        bstree[data, <]) -> bstree[data, <]
DEF repl(fctname, nil, i, f) == 
    IF i root? THEN f(nil)
    ELSE ABORT(fctname ++ "'BSTreeIndex: index does not exist")
    FI
DEF repl(fctname, t AS node(v, l, r), i, f) ==
    IF i root? THEN f(t)
    IF i left? THEN node(v, repl(fctname, l, unleft(i), f), r)
    IF i right? THEN node(v, l, repl(fctname, r, unright(i), f))
    FI



