IMPLEMENTATION BSTreeZip
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-05 14:10:11 $ ($Revision: 1.2 $)

IMPORT Nat ONLY nat
       BSTree ONLY bstree rep abs bstree? balanced?
       Tree ONLY tree
       TreeMap ONLY *
       BSTreeConv ONLY asBSTree
       TreeZip ONLY zip unzip
       Pair ONLY pair 1st &

DEF f zip (h1, h2) == 
    LET bst == (f`) zip (h1 rep, h2 rep)
    IN  
    IF (bst bstree?[to, <]) and (bst balanced?[to, <]) THEN abs(bst) 
    ELSE asBSTree(1st * bst) 
    FI

DEF f unzip h == 
    LET (bst1, bst2) == (f`) unzip (h rep)
        t1 == IF (bst1 bstree?[from1, <]) and 
                 (bst1 balanced?[from1, <]) THEN abs(bst1) 
              ELSE asBSTree(1st * bst1) 
              FI
        t2 == IF (bst2 bstree?[from2, <]) and 
                 (bst2 balanced?[from2, <]) THEN abs(bst2) 
              ELSE asBSTree(1st * bst2) 
              FI
    IN
        (t1, t2)

FUN ` : (from1 ** from2 -> to) -> 
            (pair[from1, nat] ** pair[from2, nat] -> pair[to, nat])
DEF (f`)(f1 & n, f2 & _) == f(f1, f2) & n

FUN ` : (to -> from1 ** from2) -> 
            (pair[to, nat] -> pair[from1, nat] ** pair[from2, nat])
DEF (f`)(t & n) == LET (f1, f2) == f(t) IN (f1 & n, f2 & n)
