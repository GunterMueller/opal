/* % Trees can be indexed by the following scheme: The root has index
0, and if i is the index of some subtree, the left child of the
subtree has index 2i+1, the right child has index 2i+2.
*/
SIGNATURE TreeIndex[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:07 $ ($Revision: 1.1.1.1 $)

IMPORT Tree[data] ONLY tree
       Nat ONLY nat
       Option[data] ONLY option
       Option[tree] ONLY option

-- %$Parameter$
SORT data

-- %$Handling Indices$
/* %Functions for handling indices are located in the structure
@code{IndexingOfTrees}. */

/* %If the index points to root, nothing happens. Otherwise, returns
the left or right subtree according to index, and adjusts the index by
@code{unleft} or @code{unright}. */
FUN step: tree ** nat -> tree ** nat

-- %$Accessing Values by Indices$
/* %@code{!} returns the value of the subtree with the given index,
which must exist. @code{!?} returns @code{nil}, if the index does not
exist. */
FUN ! : tree ** nat -> data
FUN !? : tree ** nat -> option[data]

/* %@code{upd} replace the value at the given index (which must exist)
either by the given data or by result of applying the
function to the old value. */
FUN upd: nat ** data ** tree -> tree
FUN upd: nat ** (data -> data) ** tree -> tree

-- %$Accessing Trees by Indices$
/* %These functions return the subtrees instead of the values of the
subtrees */
FUN ! : tree ** nat -> tree
FUN !? : tree ** nat -> option[tree]

/* %@code{repl(t,idx,new)} replaces the subtree at index @code{idx}
with the @code{new} tree. @code{insert} does the same, but aborts if
the index does not point to an empty tree. @code{delete} replaces the
subtree by an empty tree. All functions abort, if the index does not
exist. 

@code{repl(t, idx, fct)} replaces the subtree at position @code{idx}
with @code{f(idx)}.
*/
FUN repl: tree ** nat ** tree -> tree
FUN repl: tree ** nat ** (tree -> tree) -> tree
FUN insert: tree ** nat ** tree -> tree
FUN delete: tree ** nat -> tree

