IMPLEMENTATION TreeFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT Tree[data] ONLY tree nil node nil?

-- %$Parameter$
SORT data

-- %$Pruning a Tree$


FUN take: (data -> bool) ** tree -> tree
DEF take(_, nil) == nil
DEF take(P, node(v, l, r)) == 
    IF P(v) THEN node(v, take(P,l), take(P,r)) ELSE nil FI

FUN drop: (data -> bool) ** tree -> tree
-- % empty trees remain empty
DEF drop(_, nil) == nil
-- % leaves are considered and pruned if P(v) holds
DEF drop(P, N AS node(v, nil, nil)) == IF P(v) THEN nil ELSE N FI
-- % non leafs are not touched
DEF drop(P, node(v, l, r)) == node(v, drop(P, l), drop(P, r))

FUN dropall: (data -> bool) ** tree -> tree
DEF dropall(_, nil) == nil
DEF dropall(P, node(v, l, r)) == 
    LET L == dropall(P,l)
        R == dropall(P,r)
    IN
    /* % If new subtrees are empty and value fulfills predicate return
         empty tree */
    IF L nil? ANDIF R nil? ANDIF P(v) THEN nil 
    ELSE node(v, L, R)
    FI
