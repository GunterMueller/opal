/* % balanced search trees can can be converted
@itemize
@item
to a textual representation,
@item
to a sequence of datas, 
@item
or to a tree.
@end itemize
*/

SIGNATURE BSTreeConv[data, <]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:08 $ ($Revision: 1.1.1.1 $)

IMPORT BSTree[data, <] ONLY bstree[data, <]
       Tree[data] ONLY tree
       Seq[data] ONLY seq
       Seq[seq[data]] ONLY seq
       String ONLY string

-- %$Parameter$
SORT data
FUN < : data ** data -> bool


-- %$Converting into Textual Representation$
/* % Trees are represented as follows:
@table @asis
@item empty Trees
are translated to "BS[/\]"
@item leaves
are translated to "BS[/@i{data}\]"
@item other tree[data, <]s
are represented as "BS[/@i{data},@i{left child},@i{right child}\]"
@end table
*/
FUN ` : (data -> denotation) -> bstree[data, <] -> denotation

FUN ` : (data -> string)     -> bstree[data, <] -> string

/* %These functions produce a twodimensional output of the tree. This
works only for fixed width fonts, of course. The output assumes
arbitrarily long lines. The function aborts, if one representation has
zero length. */
FUN graphic : (data -> denotation) -> bstree[data, <] -> denotation
FUN graphic : (data -> string    ) -> bstree[data, <] -> string

-- %$Converting into a Sequence$
/* % There are three possibilities: you can get the datas either in
@emph{inorder} -- left/node/right, in @emph{preorder} --
node/left/right, or in @emph{postorder} -- left/right/node.
*/
FUN asSeqIn  asSeqPre asSeqPost : bstree[data, <] -> seq[data]

/* % @code{asSeqBreadth} gives you a sequence of sequence of
datas. The ith element of the sequence contains all elements of level
i from left to right. */
FUN asSeqBreadth : bstree[data, <] -> seq[seq[data]]

-- %$Converting into a Tree$
/* %You can get the underlying tree structure or convert a tree to a tree[data, <] */
FUN asBSTree: tree[data] -> bstree[data, <]
FUN asTree: bstree[data, <] -> tree[data]

