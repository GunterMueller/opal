/* % Balanced search trees are indexed by the same scheme as
trees. Functions which process the indices only are imported and
reexported from @code{TreeIndex}. 
*/
SIGNATURE BSTreeIndex[data, <]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:09 $ ($Revision: 1.1.1.1 $)

IMPORT BSTree[data, <] ONLY bstree[data, <]
       Nat ONLY nat
       Option[data] ONLY option
       Option[bstree] ONLY option

-- %$Parameter$
SORT data
FUN < : data ** data -> bool

-- %$Handling Indices$ 
/* %Functions for handling indices are located in the structure
@code{IndexingOfTrees}. */

/* %If the index points to root, nothing happens. Otherwise, returns
the left or right subtree according to index, and adjusts the index by
@code{unleft} or @code{unright}. */
FUN step: bstree ** nat -> bstree ** nat

-- %$Accessing Values by Indices$
/* %@code{!} returns the value of the subtree with the given index,
which must exist. @code{!?} returns @code{nil}, if the index does not
exist. */
FUN ! : bstree ** nat -> data
FUN !? : bstree ** nat -> option[data]

/* %@code{upd} replace the value at the given index (which must exist)
either by the given data or by result of applying the
function to the old value. */
FUN upd: nat ** data ** bstree -> bstree
FUN upd: nat ** (data -> data) ** bstree -> bstree

-- %$Accessing balanced search trees by Indices$
/* %These functions return the subtrees instead of the values of the
subtrees */
FUN ! : bstree ** nat -> bstree
FUN !? : bstree ** nat -> option[bstree]

/* %@code{repl(t,idx,new)} replaces the subtree at index @code{idx}
with the @code{new} tree. @code{insert} does the same, but aborts if
the index does not point to an empty tree. @code{delete} replaces the
subtree by an empty tree. All functions abort, if the index does not
exist or the result violates the bs condition.

@code{repl(t, idx, fct)} replaces the subtree at position @code{idx}
with @code{f(idx)}.
*/
FUN repl: bstree ** nat ** bstree -> bstree
FUN repl: bstree ** nat ** (bstree -> bstree) -> bstree
FUN insert: bstree ** nat ** bstree -> bstree
FUN delete: bstree ** nat -> bstree



