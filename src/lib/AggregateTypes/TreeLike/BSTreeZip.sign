/* %Merge two structural isomorphic trees to a single one by combining
the elements pointwise. Or, split a tree up into two structural
isomorphic trees by a splitting function */

SIGNATURE BSTreeZip[from1, < : from1 ** from1 -> bool, 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
                  from2, < : from2 ** from2 -> bool,
                  to,    < : to    ** to    -> bool] 

IMPORT BSTree[from1, <] ONLY bstree[from1, <]
       BSTree[from2, <] ONLY bstree[from2, <]
       BSTree[to, <]    ONLY bstree[to, <] 

-- %$Parameter$
/* % @code{from1} and @code{from2} are the element types of the two
trees to be merged to a tree of type @code{to} or the result types of
the two trees obtained by splitting a tree of type @code{to}. */
SORT from1 from2 to
FUN < : from1 ** from1 -> bool
FUN < : from2 ** from2 -> bool
FUN < : to    ** to    -> bool

-- %$Merging$
/* % @code{zip} combines the corresponding values of the nodes by the
argument function. @code{zip} aborts, if the trees are not structural
isomorphic. Two trees are @dfn{structural isomorphic}, if both are
empty or both are non emptyand their left and right children are
structural isomorphic. */

FUN zip: (from1 ** from2 -> to) ** bstree[from1, <] ** bstree[from2, <] ->
                                                               bstree[to, <]

-- %$Splitting$
/* %@code{unzip} produces two (structural isomorphic) trees by
splitting the values of the nodes with the function. */

FUN unzip: (to -> from1 ** from2) ** bstree[to, <] -> 
                                bstree[from1, <] ** bstree[from2, <]
