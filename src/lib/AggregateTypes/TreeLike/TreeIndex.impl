IMPLEMENTATION TreeIndex
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:09 $ ($Revision: 1.1.1.1 $)

IMPORT Nat ONLY nat 0 succ double half pred odd? even? 0?
       Tree[data] ONLY tree val node nil nil? :=_val
       OptionMap ONLY *
       ABORT ONLY ABORT
/* % das geht wegen Bug oc 1.36 leider nicht
      Option ONLY option cont avail nil nil? avail?
*/
       Option[data] ONLY option cont avail nil nil? avail?
       Option[tree[data]] ONLY option cont avail nil nil? avail?
       Denotation ONLY ++
       Compose ONLY o
       IndexingOfTrees COMPLETELY


-- %$Parameter$
SORT data

-- %$Handling Indices$

/* %If the index points to root, nothing happens. Otherwise, returns
the left or right subtree according to index, and adjusts the index by
@code{unleft} or @code{unright}. */
FUN step: tree ** nat -> tree ** nat
DEF step(t AS node(_, l, r), i) ==
    IF i root? THEN (t, 0)
    IF i left? THEN (l, unleft(i))
    IF i right? THEN (r, unright(i))
    FI
DEF step(nil, succ(_)) == 
    (ABORT("step'TreeIndex: cannot step from empty tree"), 0)

-- %$Accessing Values by Indices$
/* %@code{!} returns the value of the subtree with the given index,
which must exist. @code{!?} returns @code{nil}, if the index does not
exist. */
FUN ! : tree ** nat -> data
DEF t!i == val(t!i)

FUN !? : tree ** nat -> option[data]
DEF t!?i == val * (t!?i)

/* %@code{upd} replace the val at the given index (which must exist)
either by the given data or by the result of applying the
function to the old value. */
FUN upd: nat ** data ** tree -> tree
DEF upd(i, d, t) == 
    repl("upd", t, i, \\tr. IF tr nil? THEN 
                              ABORT("upd'TreeIndex: cannot update empty tree")
                            ELSE tr :=_val d FI)

FUN upd: nat ** (data -> data) ** tree -> tree
DEF upd(i, f, t) == 
    repl("upd", t, i, \\tr. IF tr nil? THEN 
                               ABORT("upd'TreeIndex: cannot update empty tree")
                            ELSE tr :=_val f(val(tr)) FI)

-- %$Accessing Trees by Indices$
/* %These functions return the subtrees instead of the values of the
subtrees */
FUN ! : tree ** nat -> tree
DEF t!i == LET s == t!?i 
           IN 
           IF s nil? THEN ABORT("!'TreeIndex: index does not exist") 
           ELSE (cont(s)):tree
           FI

FUN !? : tree ** nat -> option[tree]
DEF nil!? _ == nil:option[tree[data]]
DEF (t AS node(_, l, r))!?i ==
    IF i root? THEN avail(t)
    IF i left? THEN l!?unleft(i)
    IF i right? THEN (r!?unright(i)):option[tree]
    FI

/* % all of the following functions are replacements of subtrees and
mapped to the internal function @code{repl} */

FUN repl: tree ** nat ** tree -> tree
DEF repl(t, i, new) == repl("repl", t, i, \\ _ . new)

FUN repl: tree ** nat ** (tree -> tree) -> tree
DEF repl(t, i, f) == repl("repl", t, i, f)

FUN insert: tree ** nat ** tree -> tree
DEF insert(t, i, new) == 
    repl("insert", t, i, 
         \\tr. IF tr nil? THEN new 
               ELSE ABORT("insert'TreeIndex: must replace an empty tree") 
               FI)

FUN delete: tree ** nat -> tree
DEF delete(t, i) == repl("delete", t, i, \\ _ . nil)


/* % The internal function called by @code{upd}, @code{repl},
@code{insert}, @code{delete} */

FUN repl: denotation ** tree ** nat ** (tree -> tree) -> tree
DEF repl(fctname, nil, i, f) == 
    IF i root? THEN f(nil)
    ELSE ABORT(fctname ++ "'TreeIndex: index does not exist")
    FI
DEF repl(fctname, t AS node(v, l, r), i, f) ==
    IF i root? THEN f(t)
    IF i left?  THEN node(v, repl(fctname, l, unleft(i), f), r)
    IF i right? THEN node(v, l, repl(fctname, r, unright(i), f))
    FI
