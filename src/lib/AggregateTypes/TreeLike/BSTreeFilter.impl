IMPLEMENTATION BSTreeFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1999-10-05 14:10:05 $ ($Revision: 1.2 $)

IMPORT BSTree[data, <] ONLY bstree rep abs bstree? balanced?
       Tree ONLY tree 
       TreeFilter ONLY take drop dropall
       Pair ONLY pair &
       Nat ONLY nat
       Denotation ONLY ++
       ABORT ONLY ABORT

-- %$Filtering a Tree from the Root$
DEF take(P, h) == check("take", take(P lift, h rep))

-- %$Filtering a Tree from the Leaves$
DEF drop(P, h) == check("drop", drop(P lift, h rep))
DEF dropall(P, h) == check("dropall", dropall(P lift, h rep))

/$ unfold [take'BSTreeFilter, drop'BSTreeFilter, dropall'BSTreeFilter] $/

FUN lift: (data -> bool) -> (pair[data, nat] -> bool)
DEF lift(P)(d & _ ) == P(d)

FUN check: denotation ** tree[pair[data, nat]] -> bstree[data,<]
DEF check(fct, t) ==
    IF bstree?(t) THEN
        IF balanced?(t) THEN abs(t)
        ELSE ABORT(fct ++ "'BSTreeFilter: tree would be unbalanced")
        FI
    ELSE
        ABORT(fct ++ "'BSTreeFilter: tree would violate bs condition")
    FI
