/* % Apply a function to every element of a tree. The map function
handles an additional parameter called @dfn{environment}. You may
either handle both subtrees simultaneously, or you can traverse the
the tree in some given order */

SIGNATURE TreeMapEnv[env,from,to]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT Tree[from] ONLY tree
       Tree[to] ONLY tree

-- %$Parameter$
/* %@code{env} is the data type of the additional parameter,
@code{from} is the original data type of the elements of the tree,
@code{to} is the new data type of the elements. */

SORT env from to

-- %$Handle Subtrees Simultaneously$

/* %@b{Top-Down Direction} 
First, from the current environment, and
the root value, two new environments are computed for the left and
right child respectively and a new value for the current node. The
initial environment is used for computing the value of the root node.
*/ 
FUN *_V : (env ** from -> env ** env ** to) ** 
                                        env ** tree[from] -> tree[to]

/* %@b{Bottom-Up Direction}
First, the children are processed. The environments from the left
and right subtree together with the current value are fed into the
function which then returns a new environment and a new value.
The initial environment is returned for the empty tree. The
environment returned is the result from the root. */
FUN *_^ : (env ** env ** from -> env ** to) ** 
                                 env ** tree[from] -> env ** tree[to]
-- %$Traversing a Tree$
/* % These functions visit the the nodes in preorder, inorder or
postorder, always using the environment from the previous
computation. */

FUN *_pre *_in *_post: 
    (env ** from -> env ** to) ** env ** tree[from] -> env ** tree[to]
