IMPLEMENTATION IndexingOfTrees
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:09 $ ($Revision: 1.1.1.1 $)

IMPORT Nat ONLY nat 0 succ pred half double odd? even? 0?
       ABORT ONLY ABORT

/* %@code{root} is the index of the root, @code{left} and @code{right}
produce the index of the left and right child respectively. */
FUN root: nat
DEF root == 0

FUN up: nat -> nat
DEF up(i) == IF i root? THEN ABORT("up'IndexingOfTrees: no index above root")
             ELSE half(pred(i))
             FI

FUN left: nat -> nat
DEF left(i) == succ(double(i))

FUN right: nat -> nat
DEF right(i) == double(succ(i))

/* % These functions check, whether the index points to the root, to a
location in the left or a location in the subtree. */
FUN root? : nat -> bool
DEF root? == 0?
FUN left? : nat -> bool
DEF left?(0) == false
DEF left?(succ(0)) == true
DEF left?(i) == left?(up(i))
FUN right? : nat -> bool
DEF right?(0) == false
DEF right?(succ(0)) == false
DEF right?(succ(succ(0))) == true
DEF right?(i) == right?(up(i))

/* % These functions adjust the index, so that it points to the same
location in the subtree, as the original index did, i.e. @code{t!i} is
equal to @code{left(t)!unleft(i)}. The functions are undefined, if the
index does not point into the left (right) subtree). */
FUN unleft: nat -> nat
DEF unleft(0) == ABORT("unleft'IndexingOfTrees: no left index")
DEF unleft(succ(0)) == 0
DEF unleft(x) == IF x odd? THEN left(unleft(x up))
                 IF x even? THEN right(unleft(x up))
                 FI

FUN unright: nat -> nat
DEF unright(0) == ABORT("unright'IndexingOfTrees: no right index") 
DEF unright(succ(0)) == ABORT("unright'IndexingOfTrees: no right index") 
DEF unright(succ(succ(0))) == 0
DEF unright(x) == IF x odd? THEN left(unright(x up))
                  IF x even? THEN right(unright(x up))
                  FI
