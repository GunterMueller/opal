IMPLEMENTATION HeapConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT Tree ONLY tree node val left right nil
       TreeConv ONLY ` asSeqIn asSeqPre asSeqPost asSeqBreadth graphic
       Heap ONLY heap heap? abs rep
       Denotation ONLY ++ 
       Char ONLY char
       PrintableChar ONLY H
       String ONLY string :: 
       ABORT ONLY ABORT


-- %$Converting into textual representation$
DEF `(f: data -> denotation)(h) == "H" ++ `(f)(h rep)

DEF `(f: data -> string)(h) == H :: `(f)(h rep)

DEF graphic(f: data -> denotation)(h) ==  graphic(f)(h rep)

DEF graphic(f: data -> string)(h) == graphic(f)(h rep)

-- %$Converting into a sequence$

DEF asSeqIn(h) == asSeqIn(h rep)
DEF asSeqPre(h) == asSeqPre(h rep)
DEF asSeqPost(h) == asSeqPost(h rep)

DEF asSeqBreadth(h) == asSeqBreadth(h rep)

-- %$Converting to a Tree$
DEF asTree(h) == h rep
DEF asHeap(t) == abs(asHeap(t))

FUN asHeap: tree[data] -> tree[data]
DEF asHeap(node(v, l, r)) ==
    sift(v, asHeap(l), asHeap(r))
DEF asHeap(node(v, l, nil)) == sift(v, asHeap(l), nil)
DEF asHeap(node(v, nil, r)) == sift(v, nil, asHeap(r))
DEF asHeap(node(v, nil, nil)) == (node(v, nil, nil)):tree
DEF asHeap(nil) == nil:tree

/* % The trees must fulfill the heap condition */
FUN sift: data ** tree[data] ** tree[data] -> tree[data]
DEF sift(v, l AS node(vl, ll, rl), r AS node(vr, lr, rr)) ==
    IF v <= vl and v <= vr THEN node(v, l, r)
    IF vl < v and vl < vr THEN node(vl, sift(v, ll, rl), r)
    ELSE -- % vr <= v and vr <= vl
        node(vr, l, sift(v, lr, rr))
    FI
DEF sift(v, l AS node(vl, ll, rl), nil) ==
    IF vl < v THEN node(vl, sift(v, ll, rl), nil)
    ELSE node(v, l, nil)
    FI
DEF sift(v, nil, r AS node(vr, lr, rr)) == 
    IF vr < v THEN node(vr, nil, sift(v, lr, rr))
    ELSE node(v, nil, r)
    FI
DEF sift(v, nil, nil) == node(v, nil, nil)


FUN <= : data ** data -> bool
DEF a <= b == ~(b < a)

