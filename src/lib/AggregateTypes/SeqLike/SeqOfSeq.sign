-- % This structure contains functions for sequences of sequences.
SIGNATURE SeqOfSeq[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:59 $ ($Revision: 1.1.1.1 $)

IMPORT Seq[data] ONLY seq ++ <>
       Seq[seq[data]] ONLY seq 

-- %$Parameter$
SORT data

-- %$Combining Sequences of Sequences$
-- %Concatenate sequences (flatten the structure)
FUN flat : seq[seq[data]]->seq[data] 		

-- %$Constructing Sequences of Sequences$
/* % @code{partition(~)(s)} gives a partition of the sequence, if
@code{~} is an equivalence relation. */
FUN partition: (data ** data -> bool) -> seq[data] -> seq[seq[data]]

/* % @code{inits} and @code{tails} return all prefix sequences and
postfix seqences respectively */
FUN inits tails: seq[data] -> seq[seq[data]]

/* % Returns all permutations of the datas in the sequence. */
FUN permutations: seq[data] -> seq[seq[data]]

-- %$Working on Sequences of Sequences$
/* % Transpose sequences: @math{ALL i j. (S!i)!j = (transpose(S)!j)!i}.
     All sequences must be of equal length. */
FUN transpose: seq[seq[data]] -> seq[seq[data]]

/* % Construct the "cross product" of the input sequences. For input
     @code{<A, B, @dots{}, Z>}, where @code{A, B, @dots{}, Z} are sequences,
     return all sequences @code{<a, b, @dots{}, z>}, such that @code{a in A},
     @code{b in B}, @dots{}, @code{z in Z}.

     Returns the empty sequence if at least one of @code{A, B, @dots{}, Z} is
     the empty sequence. */
FUN combinations: seq[seq[data]] -> seq[seq[data]]