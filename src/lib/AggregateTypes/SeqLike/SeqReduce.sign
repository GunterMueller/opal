-- %Reductions of sequences, both left and right.
SIGNATURE SeqReduce [from,to]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
-- reductions of sequences

-- %$Parameter$
SORT from to

-- %$Improts$
IMPORT Seq[from] ONLY seq

-- %$Reduction functions$

/* %@code{(o, e) / s}: reduce @code{s}, bracketing on the
   right. Informally: 
   @code{(o / e)(<a, b,..., y, z>) == a o (b o (...(y o (z o e))...))}. */
FUN / : (from ** to -> to) ** to ** seq[from] -> to             

/* %@code{(o, e) \ s}: reduce @code{s}, bracketing on the left.
   Informally: 
   @code{(o \ e)(<a, b,..., y, z>) == z o (y o ... o (b o (a o
   e)))}. This function is tail-recursive. */
FUN \ : (from ** to -> to) ** to ** seq[from] -> to             

/* %Long name (@code{reduce} is equal to @code{/}) with and without
   currying. */

FUN reduce : (from ** to -> to) ** to ** seq[from] -> to
FUN reduce : (from ** to -> to) ** to -> seq[from] -> to

/* %The function @code{/} is equal to @code{foldr} of @i{Bird, Wadler:
   Introduction to Functional Programming}. The function @code{foldl}
   can be expressed by @code{\} as follows:
   @code{(\\a,b. b o a, e) \ s == foldl(o)(e)(s)}. */


-- %$Old fashioned style$
FUN / \ : (from ** to -> to) ** to -> seq[from] -> to           
        --  (o / e)(s)== (o, e) / s
