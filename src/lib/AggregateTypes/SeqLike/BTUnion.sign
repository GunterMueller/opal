SIGNATURE BTUnion
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
-- provides Union-Datetype of basic types and strings

IMPORT Nat ONLY nat
       Int ONLY int
       Real ONLY real
       Char ONLY char
       String ONLY string
       Seq[union] ONLY seq


TYPE union 	== nat(nat:nat)		-- union of basic types
              	   int(int:int)		-- and strings
              	   real(real:real)
              	   char(char:char)
              	   string(string:string)
		   bool(bool:bool)
		   denotation(denotation:denotation)
		   
		   

-- for easy writing of union-sequences
FUN u : nat        ** seq[union] -> seq[union]   -- n u seq == nat(n) :: seq
    u : int	   ** seq[union] -> seq[union]   -- similar for the other
    u : real	   ** seq[union] -> seq[union]   -- types
    u : char	   ** seq[union] -> seq[union]
    u : string	   ** seq[union] -> seq[union]
    u : bool	   ** seq[union] -> seq[union]
    u : denotation ** seq[union] -> seq[union]

FUN u : nat        -> seq[union]      -- n u == nat(n) :: <>
    u : int	   -> seq[union]      -- similar for the other types
    u : real	   -> seq[union]
    u : char	   -> seq[union]
    u : string	   -> seq[union]
    u : bool	   -> seq[union]
    u : denotation -> seq[union] 

