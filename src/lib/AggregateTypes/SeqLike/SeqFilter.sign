-- %Functions for removing elements of a sequence by a predicate on data.
SIGNATURE SeqFilter[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

-- %$Parameter$
SORT data

-- %$Imports$
IMPORT Seq[data] ONLY seq
       Seq[seq[data]] ONLY seq

-- %$Filter functions$

/* %@code{p | s}: filter, select all elements of @code{s} fulfilling
   predicate @code{p}. */
FUN | 	 	: (data -> bool) ** seq[data] -> seq[data]	
-- %Long name for @code{|} with and without currying
FUN filter  : (data -> bool) ** seq[data] -> seq[data]
FUN filter  : (data -> bool) -> seq[data] -> seq[data]

-- @code{partition (p, s) = (p | s, (\\x. ~(p(x))) | s)}
FUN partition	: (data -> bool) ** seq[data] -> seq[data] ** seq[data]

/* %@code{take (p, s1) = s2}:
 take all components of @code{s1} (from left to right) fulfilling 
predicate @code{p} just upto the first component, which does not
fulfill @code{p}. */
FUN take 	: (data -> bool) ** seq[data] -> seq[data]	

/* %@code{drop (p, s1) = s2}:
drop all components of @code{s1} (from left to right) fulfilling
predicate @code{p} just upto the first component, which does not
fulfill @code{p}. */
FUN drop	: (data -> bool) ** seq[data] -> seq[data]	
		
/* %@code{split (p, s) = (take (p,s), drop (p, s))}:
split @code{s} before the first component (operating from left to 
right) which does not fulfill predicate @code{p}. */
FUN split	: (data -> bool) ** seq[data] -> seq[data] ** seq[data]	

/* %@code{components(~)(s) = s0 :: s1 :: @dots{} :: sn}.
    @code{s = s0 ++ s1 ++ @dots{}}, all elements of @code{si} are related by
    @code{~}, and the last element of @code{si} is not related by @code{~}
    with @code{si+1} */
FUN components: (data ** data -> bool) -> seq[data] -> seq[seq[data]]
