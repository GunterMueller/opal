IMPLEMENTATION StringConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 15:59:59 $ ($Revision: 1.1.1.1 $)

IMPORT String ONLY string ft rt # :: <> rest start data <>?
       Nat    ONLY nat succ = 0 pred 0?
       Char   ONLY char min
       Denotation ONLY init := ! uncheckedUpd delete
       StringMapSeq[char] ONLY *
       Seq[char] ONLY <> ::

DEF s ` ==  
  IF s <>? THEN ""
  ELSE
    IF rest(s) <>? THEN 
      IF start(s) 0? THEN data(s)
      ELSE delete(data(s), 0, pred(start(s)))
      FI
    ELSE
      LET l == #(s)
          d == init(l, min)
      IN copy(0,l,s,d)
    FI
  FI

FUN copy: nat ** nat ** string ** denotation -> denotation
DEF copy(pos, max, s, d) == 
    IF pos = max THEN d
    ELSE copy(succ(pos), max, rt(s), (d,pos) uncheckedUpd ft(s))
    FI


DEF asSeq(s) == (\\c.c) * s

DEF asString(<>) == <>
DEF asString(c :: s) == c :: asString(s)



DEF ! == `
DEF explode == asSeq
DEF implode == asString
