IMPLEMENTATION SeqConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT String ONLY string <> ++ asString
       StringConv ONLY !
       Seq ONLY seq :: <>
       Char ONLY char

DEF `(f)(s) == ! (`(\\x. asString(f(x)))(s))
DEF `(beg,sep,end)(f)(s) == ! (`(beg,sep,end)(\\x. asString(f(x)))(s))


DEF `(f)(s) == `("<", ",", ">")(f:data->string)(s)

DEF `(beg,sep,end)(f)(s) == 
	    asString(beg) ++ (toString(asString(sep),f,s) ++ asString(end))

FUN toString: string ** (data -> string) ** seq[data] -> string 
DEF toString(_, _, <>) == <>
DEF toString(_, f, d :: <>) == f(d)
DEF toString(sep, f, d :: r) == 
		     f(d) ++ (sep ++ toString(sep, f, r))
