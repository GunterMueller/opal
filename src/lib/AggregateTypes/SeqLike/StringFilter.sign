/* %Functions for removing elements of a string by a predicate on char. */

SIGNATURE StringFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)


IMPORT String ONLY string
       Char   ONLY char
       Seq[string] ONLY seq


		-- p | s
/* %filter: @code{p | s} selects all elements of @code{s} fulfilling
predicate @code{p} without changing the order. */
FUN | 	 	: (char -> bool) ** string -> string	

/* %@code{partition (p, s) = (p | s, (\\x. ~(p(x))) | s)} */
FUN partition	: (char -> bool) ** string -> string ** string

/* %take: @code{take (p, s)} takes all components of @code{s} (from
left to right) fulfilling predicate @code{p} just upto the first
component, which does not fulfill @code{p}. */
FUN take 	: (char -> bool) ** string -> string	

/* %drop: @code{drop(p, s)} drops all components of @code{s} (from
left to right) fulfilling predicate @code{p} just upto the first
component, which does not fulfill @code{p}. */
FUN drop	: (char -> bool) ** string -> string	
		
/* %split: @code{split (p, s) = (take (p,s), drop (p, s))}.
Split @code{s} before the first component (operating from left to 
right) which does not fulfill predicate @code{p}. */
FUN split	: (char -> bool) ** string -> string ** string	

/* %split: @code{split(p, s1 ++ P ++ s2 ++ ... ++ P ++ sn) = <s1, s2,
..., sn>}, where @code{P} is some character fulfilling @code{p}.
Split @code{s} at characters (separators) which fulfill
@code{p}. These separators are not part of the strings @code{si}. */
FUN split   : (char -> bool) ** string -> seq[string]

/* %@code{components(~)(s) = s0 :: s1 :: @dots{} :: sn}.
    @code{s = s0 ++ s1 ++ @dots{}}, all elements of @code{si} are related by
    @code{~}, and the last element of @code{si} is not related by @code{~}
    with @code{si+1} */
FUN components: (char ** char -> bool) -> string -> seq[string]
