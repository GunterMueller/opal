IMPLEMENTATION SeqFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT Seq ONLY seq <> ::  % ft rt

-- working on a sequence
DEF _ | <> == <>
DEF P | (f::r) == IF P(f) THEN f::(P|r) ELSE P|r FI

DEF filter(P, s) == P | s
DEF filter(P)(s) == P | s

DEF partition(_,<>) == (<>,<>)
DEF partition(P,f::r) == IF P(f) 
			 THEN (f::p1,p2) WHERE (p1,p2) == partition(P,r)
			 ELSE (p1,f::p2) WHERE (p1,p2) == partition(P,r)
			 FI

DEF take(_ :data->bool,<>) == <>
DEF take(P,f::r) == IF P(f) THEN f::take(P,r) ELSE <> FI

DEF drop(_ :data->bool,<>) == <>
DEF drop(P,s AS f::r) == IF P(f) THEN drop(P,r) ELSE s FI

DEF split(_ :data->bool,<>) == (<>,<>)
DEF split(P,s AS f::r) == 
	IF P(f) THEN (f::s1,s2) WHERE (s1,s2) == split(P,r)
	        ELSE (<>,s) FI

DEF components(_)(<>) == <>
DEF components(_)(S AS (_ :: <>)) == %(S)
DEF components(~)(a :: B AS (b :: _)) ==
  LET R == components(~)(B)
  IN
  IF a ~ b THEN (a :: ft(R)) :: rt(R)
  ELSE %(a) :: R
  FI