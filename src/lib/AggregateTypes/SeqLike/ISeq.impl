IMPLEMENTATION ISeq
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:00 $ ($Revision: 1.1.1.1 $)
--

IMPORT ABORT ONLY ABORT
	Seq ONLY :: <> +%
	Nat ONLY nat succ 0
	Option ONLY option avail

-- the type itself
DATA iseq == ::(ft: () -> data, rt: () -> iseq)

-- constructing a seq from datas
DEF gen(d) == (\\ . d) :: (\\ . gen(d))

DEF repeat(<>) == ABORT("repeat'ISeq: cannot repeat empty sequence")
DEF repeat(f::s) == (\\ . f) :: (\\ . repeat(s +% f))

DEF d :: s == (\\ . d) :: (\\ . s)
DEF cons == ::

DEF s +% _ == s

-- constructing a seq from a function
DEF (n ..)(f) == (\\ . f(n)) :: (\\ . (succ(n) ..)(f))

DEF iter(start, it) == (\\ . start) :: (\\ . iter(it(start), it))

-- combining sequences
DEF <> :seq ++ i == i
DEF (f :: s:seq) ++ i == (\\ . f) :: (\\ . s ++ i)

DEF +/+(d)(s1, s2) == s1 ++ d :: s2
DEF +/+(_ : data)(<>, s) == s

DEF +/+(s)(s1, s2) == s1 ++ s ++ s2
DEF +/+(_ : seq)(<>, s) == s

DEF +%+(d)(s1, s2) == s1 ++ d :: s2
DEF +%+(s)(s1, s2) == s1 ++ s ++ s2


DEF s:iseq ++ _ == s

-- working on a sequence

DEF 0 take _ == <>
DEF succ(n) take s == ft(s) :: n take rt(s)

DEF 0 drop s == s
DEF succ(n) drop s == n drop rt(s)

DEF n split s == (n take s, n drop s)

DEF rt(s) == rt(s)()

-- accessing datas in a sequence

DEF ft(s) == ft(s)()

-- information about a sequence

DEF find?(P, s) == IF P(ft(s)) THEN ft(s) ELSE find?(P, rt(s)) FI

DEF find?(P,s) == avail(find?(P,s))
