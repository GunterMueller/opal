SIGNATURE RelConv[dom:SORT, < : dom ** dom -> bool, 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)
                  codom:SORT, < : codom ** codom -> bool,
                  data]


-- %$Parameter$
/* %@code{dom} and @code{codom} are the domain and codomain of the relation,
    @code{data} is the data type of the associated elements. The
    functions @code{<} are assumed to be total orders. */

SORT dom codom data
FUN < : dom ** dom -> bool
FUN < : codom ** codom -> bool

-- %$Imports$
IMPORT Rel[dom, <, codom, <, data] ONLY rel
       Seq[triple[dom, codom, data]] ONLY seq
       Triple[dom, codom, data] ONLY triple
       String ONLY string

-- %$Converting to and from sequences$
FUN asSeq: rel -> seq
FUN asRel: seq -> rel

-- %$Converting to textual representation$
/* %@code{`(start,comma,end)(convDom, convCodom, convData)(R)} begin
    representation with @code{start}, end it with @code{end}, seperate
    elements with @code{comma}. Use @code{conv} functions to convert an Element
    to @code{(d :-> c)(#)}. 

    Second alternative uses a single function to compute representation
    of en element.
*/
FUN ` : denotation ** denotation ** denotation ->
        (dom -> denotation) ** (codom -> denotation) ** (data -> denotation) ->
        rel -> denotation
FUN ` : denotation ** denotation ** denotation ->
         (dom ** codom ** data -> denotation) ->
         rel -> denotation

-- %As above but use strings.
FUN ` : denotation ** denotation ** denotation ->
        (dom -> string) ** (codom -> string) ** (data -> string) ->
        rel -> string
FUN ` : denotation ** denotation ** denotation ->
         (dom ** codom ** data -> string) ->
         rel -> string

/* %As above, but use standard text for @code{(start, comma, end) = ("@{",
    ",", "@}")}. */
FUN ` : (dom -> denotation) ** (codom -> denotation) ** (data -> denotation) ->
         rel -> denotation

FUN ` : (dom -> string) ** (codom -> string) ** (data -> string) ->
        rel -> string

