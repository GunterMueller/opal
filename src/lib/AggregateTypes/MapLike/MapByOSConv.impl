IMPLEMENTATION MapByOSConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
--

IMPORT Seq ONLY seq <> ::
       Pair ONLY pair & 1st 2nd
       PairConv ONLY `
       MapByOS ONLY map {} rep def
       Set ONLY set rep 
       SetConv ONLY  `
       String ONLY asString 
       StringConv ONLY ! `
       Compose ONLY o
       SeqConv ONLY `

DEF asSeq(M) == rep(rep(M))

DEF asMap(<>) == {}
DEF asMap((d&r)::s) == def(d, r, asMap(s))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: dom -> denotation, fcodom)(M) ==
    LET fpair == `("", arrow, "")(fdom, fcodom)
    IN
    `(lbrace,comma,rbrace)(fpair)(asSeq(M))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: dom -> string, fcodom)(M) == 
	LET fpair == asString o `("", arrow, "")(` o fdom, ` o fcodom)
	IN
    `(lbrace,comma,rbrace)(fpair)(asSeq(M))

DEF `(fdom: dom -> denotation, fcodom)(M) == 
	LET fpair == `("", " -> ", "")(fdom, fcodom)
	IN  `(fpair)(rep(M))

DEF `(fdom: dom -> string, fcodom)(M) == 
	LET fpair == asString o `("", " -> ", "")(` o fdom, ` o fcodom)
	IN  `(fpair)(rep(M))

DEF explode == asSeq
DEF implode == asMap
