IMPLEMENTATION MapConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:04 $ ($Revision: 1.1.1.1 $)
--

IMPORT Seq ONLY seq <> ::
       SeqConv ONLY `
       Pair ONLY pair & 1st 2nd
       PairConv ONLY `
       Map ONLY map {} def
       MapNotForUserPurpose ONLY rep
       SetByBST ONLY set rep 
       SetByBSTConv ONLY  ` asSeq
       BSTree ONLY bstree
       BSTreeConv ONLY asSeqIn
       String ONLY asString 
       StringConv ONLY ! `
       Compose ONLY o

DEF asSeq(M) == asSeq(rep(M))

DEF asMap(<>) == {}
DEF asMap((d&r)::s) == def(d, r, asMap(s))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: dom -> denotation, fcodom)(M) ==
    LET fpair == `("", arrow, "")(fdom, fcodom)
    IN
    `(lbrace,comma,rbrace)(fpair)(asSeqIn(rep(rep(M))))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: dom -> string, fcodom)(M) == 
	LET fpair == asString o `("", arrow, "")(` o fdom, ` o fcodom)
	IN
    `(lbrace,comma,rbrace)(fpair)(asSeqIn(rep(rep(M))))

DEF `(fdom: dom -> denotation, fcodom)(M) == 
    `(" -> ")("{", ",", "}")(fdom, fcodom)(M)

DEF `(fdom: dom -> string, fcodom)(M) == 
    `(" -> ")("{", ",", "}")(fdom, fcodom)(M)

DEF explode == asSeq
DEF implode == asMap
