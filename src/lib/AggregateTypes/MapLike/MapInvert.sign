/* %Inverting Maps. */
SIGNATURE MapInvert[dom,   < : dom ** dom -> bool, 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
		    codom, < : codom ** codom -> bool]

IMPORT Map[dom, <, codom] ONLY map
       Map[codom, <, dom] ONLY map


-- %$Parameter$
/* % @code{dom} is the type of the domain, @code{dodom} the type of
the codomain. @code{<} is a total strict
order: the formula ALL x y. ~(x < y) AND ~(y < x) => x === y must
hold. As the old codomain is the new domain, we need also a strict
order on the codomain. */

SORT dom codom
FUN < : dom ** dom -> bool
FUN < : codom ** codom -> bool

-- %$Inverting Maps$
/* %Informally, @code{ invert{(d1->c1), (d2->c2), ... } = {(c1->d1),
(c2->d2), ...}}; @code{invert} is undefined, if @code{m} is not
injective. */
FUN invert: map[dom, <, codom] -> map[codom, <, dom]
