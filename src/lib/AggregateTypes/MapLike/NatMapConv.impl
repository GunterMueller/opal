IMPLEMENTATION NatMapConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:05 $ ($Revision: 1.1.1.1 $)


IMPORT Seq ONLY seq <> :: ++
       SeqConv ONLY `
       Pair ONLY pair & 1st 2nd
       PairConv ONLY `
       NatMap ONLY natMap {} def
       NatMapNotForUserPurpose ONLY rep
       String ONLY asString 
       StringConv ONLY ! `
       Compose ONLY o
       Array ONLY array
       ArrayMap ONLY *
       ArrayReduce ONLY /
       Map ONLY map
       Nat ONLY nat <
       MapConv ONLY asSeq

DEF asSeq(NM) == (++, <>) / asSeq * rep(NM)

DEF asNatMap(<>) == {}
DEF asNatMap((d&r)::s) == def(d, r, asNatMap(s))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: nat -> denotation, fcodom)(NM) ==
    LET fpair == `("", arrow, "")(fdom, fcodom)
    IN
    `(lbrace,comma,rbrace)(fpair)(asSeq(NM))

DEF `(arrow)(lbrace,comma,rbrace)
     (fdom: nat -> string, fcodom)(NM) == 
	LET fpair == asString o `("", arrow, "")(` o fdom, ` o fcodom)
	IN
    `(lbrace,comma,rbrace)(fpair)(asSeq(NM))

DEF `(fdom: nat -> denotation, fcodom)(M) == 
    `(" -> ")("{", ",", "}")(fdom, fcodom)(M)

DEF `(fdom: nat -> string, fcodom)(M) == 
    `(" -> ")("{", ",", "}")(fdom, fcodom)(M)

