IMPLEMENTATION Array
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT 	Nat ONLY nat < 0 =
	ABORT ONLY ABORT
	CAST COMPLETELY
    NatConv COMPLETELY
    Denotation ONLY ++

DATA array == product(dummy1: data, dummy2: data)
		-- simulate product storage class

/$ handcoded [init:nat**data->array, init:nat**(nat->data)->array] $/
/$ handcoded [++'Array, delete, insert, #] $/
/$ handcoded [extend:array**nat**data->array] $/
/$ handcoded [extend:array**nat**(nat->data)->array] $/ 

DEF empty == init(0, cast(0))

DEF empty?(a) == #(a) = 0

FUN !   : array**nat->data
DEF A!i ==
    IF i < #(A) THEN uncheckedSel(A,i)
		ELSE ABORT("!'Array: index " ++ `(i) ++
                   " out of range (" ++ `(#(A)) ++ ")") FI

    FUN uncheckedSel: array ** nat -> data

DEF (A,i) := d == 
    IF i < #(A) THEN uncheckedUpd(i,d,A)
    ELSE ABORT(":='Array: index out of range") FI

DEF upd(i,d,A) ==
    IF i < #(A) THEN uncheckedUpd(i,d,A)
    ELSE ABORT("upd'Array: index out of range") FI

    FUN uncheckedUpd: nat ** data ** array -> array

DEF upd(i,f,A) ==
    IF i < #(A) THEN uncheckedUpdFun(i,f,A)
    ELSE ABORT("upd'Array:nat**(data->data)**array->array: index out of range") 
    FI

    FUN uncheckedUpdFun: nat ** (data->data) ** array -> array

DEF swap(A,i1,i2) ==
    IF i1 < #(A) and i2 < #(A) THEN
	uncheckedSwap(A,i1,i2)
    ELSE ABORT("swap'Array: index out of range") FI

    FUN uncheckedSwap: array ** nat ** nat -> array

/$ handcoded [uncheckedSel, uncheckedUpd, uncheckedUpdFun, uncheckedSwap] $/
