IMPLEMENTATION Array
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:05 $ ($Revision: 1.1.1.1 $)

IMPORT 	Nat ONLY nat < 0 =
	ABORT ONLY ABORT
	CAST COMPLETELY
    NatConv COMPLETELY
    Denotation ONLY ++

DATA array == product(dummy1: data, dummy2: data)
		-- simulate product storage class

FUN init: nat**data->array			
    init: nat**(nat->data)->array	

-- DEF init(n, d/f) == ...	

DEF empty == init(0, cast(0))

FUN #   : array->nat	
-- DEF #(a) = ...

DEF empty?(a) == #(a) = 0

FUN !   : array**nat->data
DEF A!i ==
    IF i < #(A) THEN uncheckedSel(A,i)
		ELSE ABORT("!'Array: index " ++ `(i) ++
                   " out of range (" ++ `(#(A))) FI

    FUN uncheckedSel: array ** nat -> data
    -- DEF uncheckedSel == ...

DEF (A,i) := d == 
    IF i < #(A) THEN uncheckedUpd(i,d,A)
    ELSE ABORT(":='Array: index out of range") FI

DEF upd(i,d,A) ==
    IF i < #(A) THEN uncheckedUpd(i,d,A)
    ELSE ABORT("upd'Array: index out of range") FI

    FUN uncheckedUpd: nat ** data ** array -> array
    -- DEF uncheckedUpd == ...

DEF upd(i,f,A) ==
    IF i < #(A) THEN uncheckedUpdFun(i,f,A)
    ELSE ABORT("upd'Array:nat**(data->data)**array->array: index out of range") 
    FI

    FUN uncheckedUpdFun: nat ** (data->data) ** array -> array
    -- DEF uncheckedUpdFun == ...

DEF swap(A,i1,i2) ==
    IF i1 < #(A) and i2 < #(A) THEN
	uncheckedSwap(A,i1,i2)
    ELSE ABORT("swap'Array: index out of range") FI

    FUN uncheckedSwap: array ** nat ** nat -> array
    -- DEF uncheckedSwap == ...

FUN ++ : array ** array -> array
-- DEF a ++ b == ...

FUN delete: array ** nat ** nat  -> array
-- DEF delete(a,n1,n2) == ...

FUN insert: array ** nat ** array -> array
-- DEF insert(a, n1, a2) == ...

FUN extend: array ** nat ** data -> array
    extend: array ** nat ** (nat -> data) -> array

-- DEF extend == ...
