/* % Arrays which grow in size as needed. These arrays have an actual
   size (number of elements) and a maximum size (number of elements
   which can be inserted into the array without exceeding ).
*/

SIGNATURE DArray [data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:04 $ ($Revision: 1.1.1.1 $)

-- %Parameter
SORT data

-- %Imports
IMPORT Nat ONLY nat
       Option[data] ONLY option

-- %$the type itself$
SORT dArray


-- %$constructing new dArrays$

/* %@code{init (n,d) === init (n,\\ _ .d)}: generate dArray of size
   @code{n} and initial data @code{f(i)} for  @code{i = 0 .. n-1}.
@code{init(0, f)} is the empty dArray. The maximum size is the double
initial size  */

FUN init: nat**data->dArray                     
    init: nat**(nat->data)->dArray              

/* %As above, butwih additional higher-order parameter to set the
   maximum size explicitly */

FUN init: nat -> nat ** data -> dArray                  
    init: nat -> nat ** (nat -> data) -> dArray         

-- %the empty dArray (maximum size is 16) or explicitly given
FUN empty: dArray
FUN empty: nat -> dArray

-- %$working on an dArray$

/* %@code{upd (i,d,a) === (a,i) := d}: 
 update @code{i}-th element of dArray @code{a} with value @code{d}
 where @code{i} ranges from @code{0} upto @code{#(a)}. dArray is
 extended, as needed. */
FUN upd : nat**data**dArray->dArray             
    :=  : dArray**nat**data->dArray

/* %@code{upd (i,f,a)}: update @code{i}-th element of dArray @code{a}
   with value @code{f(a!i)}  where @code{i} ranges from @code{0} upto
   @code{#(a)}.  */ 
FUN upd : nat**(data->data)**dArray->dArray     
 
/* %@code{swap(a,i,j)}:  swap elements @code{i} and @code{j} of dArray
   @code{a}; undefined, if either @code{i >= #(a)} or @code{j >= #(a)} */
FUN swap: dArray**nat**nat->dArray              


/* %@code{extend(a,n,d) === extend(a,n,\\ _ . d)}: extend dArray by
   @code{n} entrys at the end. Informally: @code{extend(a,n,f) == a ++
   init(n,f)}, but maximum size is only extended, if necessary (in
   contrast to @code{++}). */
FUN extend: dArray ** nat ** data -> dArray
    extend: dArray ** nat ** (nat -> data) -> dArray

-- %$accessing elements of an dArray$
/* %@code{a ! i}: select @code{i}-th element of dArray @code{a}, where
   @code{i} ranges from @code{0} upto @code{#(a)-1}. */
FUN !   : dArray**nat->data                     

FUN !?  : dArray ** nat -> option[data]

-- %$information about an dArray$

-- %@code{#(a)}: (actual size of dArray @code{a}.
FUN #   : dArray->nat   

-- %is dArray empty?
FUN empty? : dArray -> bool

-- %guaranteed free entry
FUN new: dArray -> nat

-- %is Array defined at position
FUN def? : nat ** dArray -> bool

-- %The inner nondynamic array
IMPORT Bitset ONLY set
       Array[data] ONLY array

TYPE dArray == abs(rep: array[data], occ: set, new: nat)
