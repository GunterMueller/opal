IMPLEMENTATION RelConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT Rel ONLY rel {} incl
       RelReduce ONLY /
       Seq ONLY seq <> ::
       SeqReduce ONLY /
       Denotation ONLY ++
       String ONLY string !
       StringConv ONLY `
       Compose ONLY o
       Triple ONLY triple untriple &
       SeqConv ONLY `


DEF asSeq(R) == (\\d, c, #, S. &(d, c, #) :: S, <>) / R
DEF asRel(S) == (\\t, R. untriple(t) incl R, {}) / S

DEF `(start, comma, end)(convD, convC, convX) ==
  `(start, comma, end)
   (\\d, c, # . "(" ++ convD(d) ++ ":->" ++ convC(c) ++ ")(" ++
                convX(#) ++ ")")                                                           
DEF `(start, comma, end)(conv:dom**codom**data->denotation)(R) ==
  `(start, comma, end)(\\tr. conv(untriple(tr)))(asSeq(R))

DEF `(start, comma, end)(convD, convC, convX)(R) ==
  !(`(start, comma, end)(` o convD, ` o convC, ` o convX)(R))
  
DEF `(start, comma, end)(conv)(R) ==
  !(`(start, comma, end)(\\d, c, # . `(conv(d, c, #)))(R))

DEF `(convD, convC, convX)(R) ==
  (`("{", ",", "}")(convD, convC, convX)(R)):denotation

DEF `(convD, convC, convX)(R) ==
  (`("{", ",", "}")(convD, convC, convX)(R)):string

