/* %Composing Maps */
SIGNATURE MapCompose[dom, < : dom ** dom -> bool, 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:03 $ ($Revision: 1.1.1.1 $)
	             interdom, < : interdom ** interdom -> bool, 
		     codom]

IMPORT Map[dom, <, interdom] ONLY map
       Map[interdom, <, codom] ONLY map
       Map[dom, <, codom] ONLY map

-- %$Parameter$
/* %The first map maps elements from @code{dom} to @code{interdom},
the second maps from @code{interdom} to @code{codom}. The resulting
map finally maps elements from @code{dom} to @code{codom}. 

The @code{<} are  total strict orders: the formula ALL x y. ~(x < y)
AND ~(y < x) => x === y must hold. */
SORT dom interdom codom
FUN < : dom ** dom -> bool
FUN < : interdom ** interdom -> bool


-- %$Composing Maps$
-- %@code{M1 o M2 = {(d -> r) | EX m. M1!d = m and M2!m = r}}
FUN o : map[dom, <, interdom] ** map[interdom, <, codom] -> 
		    map[dom, <, codom]

