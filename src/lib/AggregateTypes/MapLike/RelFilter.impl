IMPLEMENTATION RelFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:05 $ ($Revision: 1.1.1.1 $)

IMPORT RelNotForUserPurpose ONLY abs rep
       Rel ONLY rel
       Map ONLY map {} def {}?
       MapFilter ONLY | partition
       MapReduce ONLY /
       Pair ONLY pair & 1st 2nd

DEF P | R == 
  LET M == R rep
  IN
  abs(clean((\\d, cM, N. def(d, (\\c, # . P(d, c, #)) | cM, N), {}) / M))

DEF partition(P, R) ==
  LET M == R rep
      SS == (\\d, cM, NN. 
             LET (yes, no) == partition(\\c, # . P(d, c, #), cM)
             IN
             def(d, yes, 1st(NN)) & def(d, no, 2nd(NN)),
             {} & {}) / M
  IN
  (abs(clean(1st(SS))), abs(clean(2nd(SS))))


-- %$Auxiliary functions$
FUN clean: map[dom, <, map[codom, <, data]] -> map[dom, <, map[codom, <, data]]
DEF clean(M) == (\\ _, cM. ~(cM {}?)) | M 
