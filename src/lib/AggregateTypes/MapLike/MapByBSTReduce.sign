/* %Reducing the codomain of maps */
SIGNATURE MapByBSTReduce[dom, <, codom, to]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT MapByBST[dom,<,codom] ONLY map

-- %$Parameter$
/* % @code{dom} is the type of the domain, @code{codom} the type of
the codomain; @code{to} is the result type of the reduce. @code{<} is
a total strict order: the formula ALL x y. ~(x < y) AND ~(y < x) => x
=== y must hold. */


SORT dom codom to
FUN < 	: dom ** dom -> bool


-- %$Reducing Maps$


/* %@code{(o, e) / m}: reduce @code{m} by @code{o} on @code{codom}
with value @code{e} as initial 2nd argument. Function @code{f} should
be left-commutative: @code{x o (y o z) = y o (x o z)}, since reduction
order is implementation dependent and should not be relevant!
Informally, @code{(o, e)/({(d1->c1),(d2->c2),...,(dn->cn)}) = c1 o (c2
o (...(cn o e)...))} */
FUN / : (codom ** to -> to) ** to ** map[dom,<,codom] -> to		


/* %@code{(o, e) / m}: reduce @code{m} by @code{o} on @code{codom}
with value @code{e} as initial 2nd argument. Function @code{f} should
be left-commutative: @code{(d1,c1) o ((d2,c2) o z) = (d2,c2) o
((d1,c1) o z)}, since reduction order is implementation dependent and
should not be relevant!  Informally, @code{(o,
e)/({(d1->c1),(d2->c2),...,(dn->cn)}) == (d1,c1) o ((d2,c2) o
(...((dn,cn) o e)...))} */
FUN / : (dom ** codom ** to -> to) ** to ** map[dom,<,codom] -> to	


