/* %This structure defines the data type of mappings from a domain to
a codomain. 

This implementation is based on ordered sequences, which in general
has good performance on operations on whole maps. Use this family of
structures, if you absolutely want to rely on this implementation;
otherwise you are advised to use the standard implementation of maps.
 */

SIGNATURE MapByOS [dom:SORT,< : dom ** dom -> bool,codom :SORT]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
IMPORT Nat              ONLY nat
       Option[codom]    ONLY option
       Set[dom,<]       ONLY set
       Seq[dom]         ONLY seq
       Seq[codom]       ONLY seq
       Pair[dom, codom] ONLY pair
       Option[pair]     ONLY option

-- %$Parameter$
/* % @code{dom} is the type of the domain, @code{codom} the type of
the codomain. @code{<} is a total strict
order: the formula ALL x y. ~(x < y) AND ~(y < x) => x === y must
hold. */
SORT dom codom
FUN <   : dom ** dom -> bool

-- %$The Type Itself$
SORT map

-- %$Nonfree Constructors$
-- %The empty map.
FUN {}          : map   
-- %(Re)define map at point.
FUN def         : dom ** codom ** map -> map


-- %$Constructing a Map From Datas$
-- %(Re)define resp. undefine map at point.
FUN def         : dom ** codom ** map -> map
    undef       : dom ** map -> map

-- %In @code{upd (d, f, m)}, redefine @code{m} at @code{d} by @code{f(m!d)}
FUN upd         : dom ** (codom -> codom) ** map -> map 

/* %Best explained informally: @code{extend (M, <d1, ..., dn>, <c1,
..., cn>)} results @code{def(...def(M,d1,c1)...,dn,cn)}. */
FUN extend      : map ** seq[dom] ** seq[codom]->map 

-- %$Constructing a Map From a Function$
-- %@code{(n1 .. n2)(f,g) == {f(n1) -> g(f(n1)), ... , f(n2) -> g(f(n2))}}
FUN ..          : nat ** nat -> (nat -> dom) ** (dom -> codom) -> map

/* %Generate elements of the domain from @code{start} upto (excluding)
the first element, for which @code{P(it^x(start))} does not hold. The
function @code{f} assigns to each element of the domain the associated
codom element. */
FUN iter        : dom ** (dom -> dom) ** (dom -> bool) -> (dom -> codom) -> map

-- %Add for every element d of the set the maplet @code{d -> f(d)} to the map
FUN init        : set[dom, <] ** (dom -> codom) -> map

-- %$Combining Maps$
/* % Lifting of @code{def} to maps. Informally, @code{M <+
{d1->c1,...,dn -> cn} = def(...def(M,d1,c1)...,dn,cn)} */
FUN <+          : map ** map -> map                     

/* % Lifting of undef to sets. Informally, @code{M <- {d1,...,dn} =
undef(...undef(M,d1)...,dn)}. */
FUN <-          : map ** set[dom,<] -> map      

-- %$Accessing Codom - Elements$
-- %@code{m!d}: give associated value to @code{d} in @code{m} which must exist
FUN !           : map ** dom -> codom           

/* %@code{m ?! d}: give associated value to @code{d} in @code{m}, if
it exists, else @code{nil}  */
FUN !?          : map ** dom -> option[codom]   

-- %$Information About a Map$

-- %test for empty map
FUN {}?         : map -> bool
-- % test for definedness
FUN def?        : dom ** map -> bool
/* % domain of the map. Informally, @code{dom ( {d1->c1,...,dn -> cn}
) = {d1, ..., dn}} */
FUN dom         : map -> set[dom,<]   
-- % Codomain of the map. Note that this is a sequence and not a set!
FUN codom       : map -> seq[codom]

-- %cardinality of @code{dom(m)}
FUN #           : map -> nat                    

/* %@code{exist?(P, M)}: is there @code{d} in @code{dom(M)} with
@code{P(d, M!d)} ? */
FUN exist?      : (dom ** codom -> bool) ** map -> bool

/* %@code{find?(P, M)}: return @code{avail(c, d)} for some @code{c->d}
in @code{M} for which @code{P} holds */
FUN find?       : (dom ** codom -> bool) ** map -> option[pair]
/* %@code{forall?(P, M)}: does @code{P} hold for every @code{(d, r)}
in @code{M} ? */
FUN forall?     : (dom ** codom -> bool) ** map -> bool


-- %$not for user purpose$

-- representation 
IMPORT Pair[dom, codom] ONLY pair
       Set[pair[dom, codom], less] ONLY set

FUN less : pair ** pair -> bool
FUN abs: set[pair, less] -> map
FUN rep: map -> set[pair, less]
