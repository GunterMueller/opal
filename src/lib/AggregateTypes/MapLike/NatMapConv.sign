/* %Converting natMaps to/from sequences and to strings/denotations */
SIGNATURE NatMapConv[codom]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT NatMap[codom] ONLY natMap
       Seq[pair[nat, codom]] ONLY seq
       Pair[nat, codom] ONLY pair
       String ONLY string
       Nat ONLY nat

-- %$Parameter$
/* %@code{nat} and @code{codom} are the types of the map domain and
codomain resp. */
SORT codom

-- %$Converting to and from sequences$
/* %Transform natMap @code{m} into a sequence of pairs, each pair
consisting of domain element and its associated codomain
element. Informally, @code{asSeq({d1 -> c1, ..., dn -> cn}) = <&(d1,
c1), ..., &(dn, cn)>} */

FUN asSeq: natMap -> seq[pair]

/* %Transform a sequence of pairs into a natMap; each pair has to consist
of a @code{nat} and a codomain element.  Informally,
@code{asNatMap(<&(d1, c1), ...,&(dn, cn)>) = {d1 -> c1, ..., dn ->
cn}}.  If @code{di = dj} with @code{i |= j}, then
@code{asMap(..)!di} may be either @code{ci} or @code{cj}. */
FUN asNatMap: seq[pair] -> natMap

-- %$Converting to textual representation$

/* %@code{`(d,c)(@{d1 -> c1, d2 -> c2, ..., dn -> cn@})}@code{ ==}
	@code{"@{" d(d1) " -> " c(c1) "," d(d2) " -> " c(c2) "," ... "," 
					d(dn) " -> " c(cn) "@}"} */

FUN ` : (nat -> denotation) ** (codom -> denotation) -> natMap -> denotation
FUN ` : (nat -> string)     ** (codom -> string)     -> natMap -> string    

/* %Here, you can replace @code{"->"}, @code{"@{"}, @code{","}
@code{"@}"} by your favourite denotations: @*
@code{`(d,c)(m) == `("->")("@{",",","@}")(d,c)(m)} */

FUN ` : denotation -> denotation ** denotation ** denotation ->
        (nat -> denotation) ** (codom -> denotation) -> natMap -> denotation
FUN ` : denotation -> denotation ** denotation ** denotation ->
        (nat -> string)     ** (codom -> string)     -> natMap -> string    

