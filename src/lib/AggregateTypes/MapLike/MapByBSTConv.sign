/* %Converting maps to/from sequences and to strings/denotations */
SIGNATURE MapByBSTConv[dom, <, codom]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT MapByBST[dom, <, codom] ONLY map
       Seq[pair[dom, codom]] ONLY seq
       Pair[dom, codom] ONLY pair
       String ONLY string

-- %$Parameter$
/* %@code{dom} and @code{codom} are the types of the map domain and
codomain resp. @code{<} is a total strict
order: the formula ALL x y. ~(x < y) AND ~(y < x) => x === y must
hold. */
SORT dom codom
FUN < 	: dom ** dom -> bool

-- %$Converting to and from Sequences$
/* %Transform map @code{m} into a sequence of pairs, each pair
consisting of domain element and its associated codomain
element. Informally, @code{asSeq({d1 -> c1, ..., dn -> cn}) = <&(d1,
c1), ..., &(dn, cn)>} */

FUN asSeq: map -> seq[pair]

/* %Transform a sequence of pairs into a map; each pair has to consist
of a domain and a codomain element.  Informally,
@code{asMapByBST(<&(d1, c1), ...,&(dn, cn)>) = {d1 -> c1, ..., dn ->
cn}}.  If @code{di = dj} with @code{i |= j}, then
@code{asMapByBST(..)!di} may be either @code{ci} or @code{cj}. */
FUN asMap: seq[pair] -> map

-- %$Converting to Textual representation$

/* %@code{`(d,c)(@{d1 -> c1, d2 -> c2, ..., dn -> cn@})}@code{ ==}
	@code{"@{" d(d1) " -> " c(c1) "," d(d2) " -> " c(c2) "," ... "," 
					d(dn) " -> " c(cn) "@}"} */

FUN ` : (dom -> denotation) ** (codom -> denotation) -> map -> denotation
FUN ` : (dom -> string)     ** (codom -> string)     -> map -> string    

/* %Here, you can replace @code{"->"}, @code{"@{"}, @code{","}
@code{"@}"} by your favourite denotations: @*
@code{`(d,c)(m) == `("->")("@{",",","@}")(d,c)(m)} */

FUN ` : denotation -> denotation ** denotation ** denotation ->
        (dom -> denotation) ** (codom -> denotation) -> map -> denotation
FUN ` : denotation -> denotation ** denotation ** denotation ->
        (dom -> string)     ** (codom -> string)     -> map -> string    

