/* %Reducing the codomain of natmaps */
SIGNATURE NatMapReduce[codom, to]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:04 $ ($Revision: 1.1.1.1 $)

IMPORT NatMap[codom] ONLY natMap
       Nat ONLY nat

-- %$Parameter$
/* % @code{codom} the type of
the codomain; @code{to} is the result type of the reduce. */

SORT codom to

-- %$Reducing NatMaps$

/* %@code{(o, e) / nm}: reduce @code{nm} by @code{o} on @code{codom}
with value @code{e} as initial 2nd argument. Function @code{f} should
be left-commutative: @code{x o (y o z) = y o (x o z)}, since reduction
order is implementation dependent and should not be relevant!
Informally, @code{(o, e)/({(d1->c1),(d2->c2),...,(dn->cn)}) = c1 o (c2
o (...(cn o e)...))} */
FUN / : (codom ** to -> to) ** to ** natMap[codom] -> to		


/* %@code{(o, e) / nm}: reduce @code{nm} by @code{o} on @code{codom}
with value @code{e} as initial 2nd argument. Function @code{f} should
be left-commutative: @code{(d1,c1) o ((d2,c2) o z) = (d2,c2) o
((d1,c1) o z)}, since reduction order is implementation dependent and
should not be relevant!  Informally, @code{(o,
e)/({(d1->c1),(d2->c2),...,(dn->cn)}) == (d1,c1) o ((d2,c2) o
(...((dn,cn) o e)...))} */
FUN / : (nat ** codom ** to -> to) ** to ** natMap[codom] -> to	

