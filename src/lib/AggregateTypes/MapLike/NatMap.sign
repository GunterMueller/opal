/* %This structure defines the specialization of the general sata type of mappings from a domain to a codomain for the fixed domain of natural numbers.

 */
SIGNATURE NatMap[codom: SORT]
-- $__Version$

IMPORT Nat              ONLY nat <
       Option[codom]    ONLY option
       Set[nat,<]       ONLY set
       Seq[nat]         ONLY seq
       Seq[codom]       ONLY seq
       Pair[nat, codom] ONLY pair
       Option[pair]     ONLY option

-- %$Parameter$
/* % @code{nat} is the type of the domain, @code{codom} the type of
the codomain. */
SORT codom

-- %$The Type Itself$
SORT natMap

-- %$Nonfree Constructors$
-- %The empty natMap.
FUN {}          : natMap   
-- %(Re)define natMap at point.
FUN def         : nat ** codom ** natMap -> natMap


-- %$Constructing a Map From Datas$
-- %(Re)define resp. undefine natMap at point.
FUN def         : nat ** codom ** natMap -> natMap
    undef       : nat ** natMap -> natMap

-- %In @code{upd (d, f, m)}, redefine @code{m} at @code{d} by @code{f(m!d)}
FUN upd         : nat ** (codom -> codom) ** natMap -> natMap 

/* %Best explained informally: @code{extend (M, <d1, ..., dn>, <c1,
..., cn>)} results @code{def(...def(M,d1,c1)...,dn,cn)}. */
FUN extend      : natMap ** seq[nat] ** seq[codom]->natMap 

-- %$Constructing a Map From a Function$
-- %@code{(n1 .. n2)(g) == {n1 -> g(n1), ... , n2 -> gn(2)}}
FUN ..          : nat ** nat -> (nat -> codom) -> natMap

/* %Generate elements of the domain from @code{start} upto (excluding)
the first element, for which @code{P(it^x(start))} does not hold. The
function @code{f} assigns to each element of the domain the associated
codom element. */
FUN iter        : nat ** (nat -> nat) ** (nat -> bool) -> (nat -> codom) -> natMap

-- %Add for every element d of the set the maplet @code{d -> f(d)} to the natMap
FUN init        : set[nat, <] ** (nat -> codom) -> natMap

-- %$Combining Maps$
/* % Lifting of @code{def} to natMaps. Informally, @code{M <+
{d1->c1,...,dn -> cn} = def(...def(M,d1,c1)...,dn,cn)} */
FUN <+          : natMap ** natMap -> natMap                     

/* % Lifting of undef to sets. Informally, @code{M <- {d1,...,dn} =
undef(...undef(M,d1)...,dn)}. */
FUN <-          : natMap ** set[nat,<] -> natMap      

-- %$Accessing Codom - Elements$
-- %@code{m!d}: give associated value to @code{d} in @code{m} which must exist
FUN !           : natMap ** nat -> codom           

/* %@code{m ?! d}: give associated value to @code{d} in @code{m}, if
it exists, else @code{nil}  */
FUN !?          : natMap ** nat -> option[codom]   

-- %$Information About a Map$

-- %test for empty natMap
FUN {}?         : natMap -> bool
-- % test for definedness
FUN def?        : nat ** natMap -> bool
/* % domain of the natMap. Informally, @code{dom ( {d1->c1,...,dn -> cn}
) = {d1, ..., dn}} */
FUN dom         : natMap -> set[nat,<]   
-- % Codomain of the natMap. Note that this is a sequence and not a set!
FUN codom       : natMap -> seq[codom]
-- % return some nat not element of the domain
FUN new         : natMap -> nat

-- %cardinality of @code{dom(m)}
FUN #           : natMap -> nat                    

/* %@code{exist?(P, M)}: is there @code{d} in @code{dom(M)} with
@code{P(d, M!d)} ? */
FUN exist?      : (nat ** codom -> bool) ** natMap -> bool

/* %@code{find?(P, M)}: return @code{avail(c, d)} for some @code{c->d}
in @code{M} for which @code{P} holds */
FUN find?       : (nat ** codom -> bool) ** natMap -> option[pair]
/* %@code{forall?(P, M)}: does @code{P} hold for every @code{(d, r)}
in @code{M} ? */
FUN forall?     : (nat ** codom -> bool) ** natMap -> bool


-- %$not for user purpose$
-- %see structure NatMapNotForUSerPurpose
