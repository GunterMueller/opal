IMPLEMENTATION SetByBSTFilter
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date$ ($Revision$)

IMPORT SetByBST ONLY set abs rep union {}? {} 
       BSTree ONLY bstree nil ++
       BSTreeReduce ONLY /
       Pair ONLY pair 1st 2nd &


/* % Reducing with the help of union (+) and concat (++) is hopefully
cheaper than simply asSetByBST(f | (asSeq(S))). */
DEF P | S == 
    IF S {}? THEN {}
    ELSE
      LET ## == (\\el,left, right. 
                 IF P(el) THEN ++(el, left, right) ELSE left union right FI)
          erg == (##, nil) / (S rep)
      IN
        abs(erg)
    FI


/* % Reducing with the help of union  and concat (++) is hopefully
cheaper than simply asSetByBST(partition(asSeq(S))). */
DEF partition(P, S) == 
    IF S {}? THEN ({}, {})
    ELSE
      LET ## == (\\el, leftpair, rightpair. 
                 IF P(el) THEN 
                    ++(el, 1st(leftpair), 1st(rightpair)) & 
                    (2nd(leftpair) union 2nd(rightpair)) 
                 ELSE
                    (1st(leftpair) union 1st(rightpair)) & 
                    ++(el, 2nd(leftpair), 2nd(rightpair)) 
                 FI)
          erg == (##, nil & nil) / (S rep)
      IN
        (abs(1st(erg)), abs(2nd(erg)))
    FI
