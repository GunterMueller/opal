/* % This structure provides functions for converting sets to textual
representation or to and from sequences. */

SIGNATURE SetByBSTConv[data,< :data ** data -> bool]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)

IMPORT 	SetByBST[data, <]  ONLY set
    	Seq[data]     ONLY seq
	    String	      ONLY string

-- %$Parameter$
/* % @code{data} is the element type, @code{<} is a total strict
order: the formula ALL x y. ~(x < y) AND ~(y < x) => x === y must
hold. */
SORT data
FUN < 	: data**data->bool

-- %$Converting to Textual Representation$
/* % The elements of the set are converted by the given function,
separated by commas and surrounded by curly brackets. If you don't
like commas and curly brackets, you can supply your own denotations
instead: @code{`(f)(s) === `("@{", ",", "@}")(f)(s)}. */
FUN ` : (data -> denotation) -> set -> denotation
FUN ` : (data -> string)     -> set -> string

FUN ` : (denotation ** denotation ** denotation) ->
		(data -> denotation) -> set -> denotation
FUN ` : (denotation ** denotation ** denotation) ->
		(data -> string)     -> set -> string

-- %$Converting to or from a Sequence$
/* %The conversion into a set removes double elements. When converting
a set to a sequence, the order of elements may vary. */
FUN asSet: seq -> set
FUN asSeq: set -> seq
