-- %Functions for converting sets to seqneces or textual represenatation.
SIGNATURE SetConv[data,< :data ** data -> bool]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:01 $ ($Revision: 1.1.1.1 $)

IMPORT  Set[data, <]  ONLY set
        Seq[data]     ONLY seq
        String        ONLY string

-- %$Parameter$
SORT data
FUN <   : data**data->bool
 /* %total strict-order; in 
 @code{D ~(x < y) AND ~(y < x) => x = y}
 should @code{=} represent semantic equality. */

-- %$Converting from and to Seqences$

/* %@code{asSet(<e0, e1, ..., en>) == @{e0, e1, ..., en@}}
 handles duplicate members in seq */
FUN asSet: seq -> set    

/* %@code{asSeq(@{e0, e1, ..., en@}) == <e0, e1, ..., en>}
  order may vary since order in sets does not matter. */
FUN asSeq: set -> seq    

-- %$Textual Representation$

/* %@code{`(f)(@{e0, e1, ..., en@}) == 
"@{" f(e0) "," f(e1) "," ... "," f(en) "@}"} */

FUN ` : (data -> denotation) -> set -> denotation
FUN ` : (data -> string)     -> set -> string

/* %The additional parameters correspond to open brace, comma and
    close brace repectively. */

FUN ` : (denotation ** denotation ** denotation) ->
         (data -> denotation) -> set -> denotation
FUN ` : (denotation ** denotation ** denotation) ->
         (data -> string)     -> set -> string

-- %@ignore
-- old fashioned
FUN explode: set -> seq    -- explode == asSeq
FUN implode: seq -> set    -- implode == asSet
-- %@end ignore
