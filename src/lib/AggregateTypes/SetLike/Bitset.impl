IMPLEMENTATION Bitset 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/doc/LICENSE or
      http://projects.uebb.tu-berlin.de/opal/trac/wiki/License for details
*/
-- % $Date$ ($Revision$)
-- sets of natural numbers 
-- implemented as dynamically growing monolithic bitmaps

IMPORT 	Nat 	   ONLY nat > succ
	Option[nat] ONLY option


DATA set == product(a: bool, b: bool)
		-- simulate storage class of flat standalone product

/$ handcoded [{}, incl, excl, +, -, *, arb, {}?, in, #] $/
/$ handcoded [exist?, find?, <=, <, ='Bitset, {<}] $/

FUN {}       	: set		
FUN incl excl   : nat ** set->set
FUN + - *    	: set ** set -> set
FUN arb      	: set -> nat		
FUN {}?      	: set -> bool	
FUN in       	: nat ** set -> bool
FUN #        	: set -> nat
FUN exist?   	: (nat -> bool) ** set->bool  	
FUN find?	: (nat -> bool) ** set->option[nat]
FUN <= < = 	: set ** set -> bool
FUN {<}	     	: set ** set -> bool	



DEF %(e) == incl(e,{})
DEF %(e1, e2) == incl(e2, %(e1))
DEF %(e1, e2, e3) == incl(e3, incl(e2, %(e1)))
DEF %(e1, e2, e3, e4) == incl(e4, incl(e3, incl(e2, %(e1))))
DEF %(e1, e2, e3, e4, e5) == incl(e5, incl(e4, incl(e3, incl(e2, %(e1)))))
DEF %(e1, e2, e3, e4, e5, e6) ==
                      incl(e6, incl(e5, incl(e4, incl(e3, incl(e2, %(e1))))))
DEF %(e1, e2, e3, e4, e5, e6, e7) ==
            incl(e7, incl(e6, incl(e5, incl(e4, incl(e3, incl(e2, %(e1)))))))
DEF %(e1, e2, e3, e4, e5, e6, e7, e8) ==
  incl(e8, incl(e7, incl(e6, incl(e5, incl(e4, incl(e3, incl(e2, %(e1))))))))


DEF forall?(P,s) == ~(exist?(\\x . ~(P(x)),s))

DEF (i..j)(f) == IF i > j THEN {} ELSE incl(f(i),(succ(i)..j)(f)) FI

DEF iter(start, it, P) == IF ~(P(start)) THEN {}
			  ELSE incl(start, iter(it(start), it, P))
			  FI 

