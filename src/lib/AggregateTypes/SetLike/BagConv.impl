IMPLEMENTATION BagConv
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:02 $ ($Revision: 1.1.1.1 $)
--

IMPORT Bag ONLY bag abs rep {} incl inclCt
       Seq ONLY seq :: <> ..
       SeqMap[pair[data, nat], seq[data]] ONLY *
       SeqOfSeq ONLY flat
       SeqConv[pair[data, nat]] ONLY `
       Nat ONLY nat 1 succ 0
       NatConv ONLY ` 
       Pair[data, nat] ONLY pair & 1st 2nd
       PairConv[data, nat] ONLY `
       Denotation ONLY ++ init
       PrintableChar ONLY char colon
       String ONLY ++ asString ::
       StringConv ONLY `
       Compose ONLY o


DEF asSeq(B) == fromPairSeq(B rep)
/*
		LET pairAsSeq == \\p. (1..2nd(p))(\\ _ .1st(p))
		    SeqSeq == pairAsSeq * (B rep)
		IN flat(SeqSeq)
*/

FUN fromPairSeq: seq[pair] -> seq[data]
DEF fromPairSeq(<>) == <>
DEF fromPairSeq((_ & 0) :: r) == fromPairSeq(r)
DEF fromPairSeq((d&succ(n)) :: r) == d :: fromPairSeq((d&n)::r)


DEF asBag(<>'Seq[data]) == {}
DEF asBag(d:data :: r) == incl(d, asBag(r))

DEF asSeqPair(B) == B rep

DEF asBag(<>'Seq[pair]) == {}
DEF asBag((d&n) :: r) == inclCt(d, n, asBag(r))

DEF `(f:data->denotation)(B) == 
	LET pConv == `("", ":", "")(f, `)
	IN
	   `("{{", ",", "}}")(pConv)(asSeqPair(B))

DEF `(f:data->string)(B) == 
	LET pConv == asString o `("", ":", "")(` o f, `)
	IN
	   `("{{", ",", "}}")(pConv)(asSeqPair(B))



DEF explode == asSeq
DEF explodeCt == asSeqPair
DEF implode: seq[data] -> bag == asBag
DEF implodeCt: seq[pair] -> bag == asBag
