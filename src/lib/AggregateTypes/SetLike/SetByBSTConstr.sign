/* %Constructing sets from two other differently typed sets. */
SIGNATURE SetByBSTConstr[data1 , < :data1 ** data1 -> bool, data2, 
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:02 $ ($Revision: 1.1.1.1 $)
			   < :data2 ** data2 -> bool]

IMPORT SetByBST[data1, <] ONLY set
       SetByBST[data2, <] ONLY set
       Pair[data1, data2] ONLY pair
       Union2[data1, data2] ONLY union
       SetByBST[pair[data1, data2], <] ONLY set
       SetByBST[union[data1, data2], <] ONLY set

-- %$Parameter$
/* % @code{data1} and @code{data2} are the respective element types,
@code{<} are total strict orders: the formula ALL x y. ~(x < y) AND
~(y < x) => x === y must hold. */
SORT data1 data2
FUN < :data1 ** data1 -> bool
FUN < :data2 ** data2 -> bool

       
-- $Cartesian Product$
/* @code{x in A and y in B <=> x & y in A x B} */
FUN x : set[data1, <] ** set[data2, <] -> set[pair, <]

/* The necessary order on the elements of the cartesian product. */
FUN < : pair ** pair -> bool

-- $Disjoint Union$
/* @code{x in A and y in B <=> data1(x) in A U B and data2(y) in A U
B} */ 
FUN U : set[data1, <] ** set[data2, <] -> set[union, <]

/* %The necessary order an the elements of the disjoint union. */
FUN < : union ** union -> bool
