/* % The structure @code{DynConv} provides the conversions from and to dynamic
types.

Note that strong typing is violated by the functions provided by this
structure. The user is responsible to perform type checks manually using type
tags.  */

SIGNATURE DynConv[data]
/* %- Copyright 1989 - 1998 by the Opal Group, TU Berlin. All rights reserved
      See OCSHOME/etc/LICENSE or 
      http://uebb.cs.tu-berlin.de/~opal/LICENSE.html for details
*/
-- % $Date: 1998-06-16 16:00:06 $ ($Revision: 1.1.1.1 $)

SORT data

IMPORT	Dyn 		ONLY dyn
	Option[data]	ONLY option


/* % The functions @code{pack} converts any value to a a dynamic typed object.
The 2nd argument is the type tag.  */

FUN pack : data ** denotation -> dyn

/* % The function @code{unpack} converts back from a dynamic type to the
original type, 2nd argument beeing the type tag.  The function is undefined if
the passed tag doesn't match the packed tag. @code{tryUnpack} just delivers
@code{nil} on type tag mismatch. */

FUN unpack	: dyn ** denotation -> data
FUN tryUnpack	: dyn ** denotation -> option[data]
