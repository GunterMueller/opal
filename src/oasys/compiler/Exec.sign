/* % This structure provides the execution of repository objects. */

SIGNATURE Exec

IMPORT	Pair[option[process],repo]	ONLY pair:SORT
	Pair[set[unitName,<],
	     set[unitName,<]]		ONLY pair:SORT
	Seq[denotation]			ONLY seq:SORT
	Set[unitName,<]			ONLY set:SORT
	Option[process]			ONLY option:SORT

IMPORT	Com[pair[option[process],repo]]	ONLY com:SORT
	Com[repo]			ONLY com:SORT
	ProcessCtrl			ONLY process:SORT
	File				ONLY file:SORT

IMPORT	Repo				ONLY repo:SORT
	RepoName			ONLY objectName:SORT
					     unitName:SORT
						< : unitName**unitName->bool


/* % @code{execObject(ObjectName, Params, StdIn, StdOut, StdErr)}
executes the top-level command refered to by @code{ObjectName} as a
programm. It thereby first establishes the checked and compiled state
for the unit @code{ObjectName} originates from and all the transient
implementation imports of this unit.

ObjectName must be of type @code{com'Com[void]}, otherwise an error
will be prodced. 

@code{execObject} will fork a process with @code{Params} has its
arguments and @code{StdIn}, @code{StdOut}
and @code{StdErr} as standard files. This process will dynamically
link those shared objects required to run @code{ObjectName}, and then
starts its execution. On success, @code{runObject} will yield a
process identifier which may be used to further control the running
process. 

@code{callObject} is a version of @code{execObject} which waits
until the termination of the executed object. */


FUN execObject : objectName ** seq[denotation] 
			    ** file ** file ** file 
			    -> repo -> com[pair[option[process],repo]]

FUN callObject : objectName ** seq[denotation] 
			    ** file ** file ** file 
			    -> repo -> com[repo]

/* % @code{guessExecObject} returns a pair of unit sets required
to check (1st) and compile (2nd) in order to execute an object. */

FUN guessExecObject	: objectName	-> repo	-> pair[set[unitName,<],
							set[unitName,<]]
