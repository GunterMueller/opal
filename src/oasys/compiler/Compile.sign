/* % This structure provides commands for compiling. */

SIGNATURE Compile

IMPORT 	Set[unitName,<]			ONLY set:SORT
	Pair[set,set]			ONLY pair:SORT
	Com[repo]			ONLY com:SORT

IMPORT	Repo				ONLY repo:SORT
	RepoName			ONLY unitName:SORT
					      < : unitName ** unitName -> bool
	RepoDiag			ONLY diag:SORT


-- %$Compiling Units$ =====================================================

/* % The command @code{compileUnits(Units)(R)} establishes the
compiled-state for the given units. It thereby first establishes the
checked state for @code{Units} and all their (transitive) imports, and
the compiled state for implementations of imported units which have
the released flag, such that inter-unit optimizations can take place
for imports from these units. It generates diagnostic events
and @code{newAbsy/newObject} events, depending on which units have
been actually checked/compiled. */

FUN compileUnits	: set[unitName,<]	-> repo -> com[repo]

/* % @code{guessCompileUnits(Units)(R)} returns a the pair of unit sets
which will be checked (1st) and compiled (2nd) on
a call to @code{compileUnits}. */

FUN guessCompileUnits	: set[unitName,<]  -> repo 
					   -> pair[set[unitName,<],
					   	   set[unitName,<]]
 
