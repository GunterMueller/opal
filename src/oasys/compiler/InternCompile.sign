/* % This structure provides the internal interface for checking and
compiling units with the OPAL Compiler OC. */

SIGNATURE InternCompile

IMPORT  Pair[diag,repo]         ONLY pair:SORT
        Pair[extendResult,repo] ONLY pair:SORT
        Com[pair[diag,repo]]    ONLY com:SORT
        Com[pair[extendResult,repo]] ONLY com:SORT
        Com[seq[denotation]]    ONLY com
        Seq[denotation]         ONLY seq
        Com[void]               ONLY com
        Com[repo]               ONLY com:SORT
        Set[unitName,<]         ONLY set:SORT
        Void ONLY void
        Seq[denotation] ONLY seq

IMPORT  InterOpal               ONLY interOpal:SORT

IMPORT  RepoInternData          ONLY repo:SORT
        RepoName                ONLY unitName:SORT
                                        < : unitName ** unitName -> bool
        RepoDiag                ONLY diag:SORT


-- %$Checking Entire Units$ =================================================

/* % @code{checkUnit(Name)(R)} context-checks the unit addressed by
@code{Name}. All imported units are expected to be checked, with their
source and abstract syntax flushed.  On success, the abstract syntax
of the unit is expected to be found in the file
@code{absyFile(Name)(R)}. The diagnostics produced base on
@code{unitRef}'s. */

FUN checkUnit      : unitName   -> repo  -> com[pair[diag,repo]]


-- %$Checking Unit Extensions$ =============================================

/* % @code{extendUnit(Name, Deps, Text)(R)} incrementally
context-checks the given @code{Text} as an extension of the unit
adressed by @code{Name}. All units syntactically referred to by
@code{Text} are expected to be contained in @code{Deps}. The
InterOpal of @code{Deps}, as well as the InterOpal of @code{Name} is
expected to be found at @code{absyFile(N)(R)}, @code{N} the name of
the according unit. On success, @code{extendUnit} returns the
InterOpal representing the extension. This is usual given as an
external or internal property part; however, important is only that
any objects newly introduced by @code{Text} have a new object
identifier, and that any overwritten objects have the old
identifier. The diagnostics produced base on @code{unitRefs}'s
relatively to @code{Text}. */

FUN extendUnit : unitName ** denotation ** set[unitName,<]
                                        -> repo 
                                        -> com[pair[extendResult,repo]]

TYPE extendResult ==
        failure (diag           : diag)
        success (diag           : diag,
                 absy           : interOpal)



-- %$Compiling Entire Units$ =================================================

/* % @code{compileUnit(Name)(R)} compiles the unit addressed by
@code{Name} to object code. All imported units which are released or 
originate from a library are expected to be compiled, with their optimization 
files found in the folder where the object file is stored. @code{Name} should
be an implementation, otherwise the command does nothing at all. */

FUN compileUnit    : unitName -> repo    -> com[pair[diag,repo]]

-- %$User-definable compiler options$
/* %The options set with @code{setOptions} are passed to all following
    calls to @code{checkUnit}, @code{extendUnit} and @code{compileUnit}.
*/

FUN setOptions: seq[denotation] -> com[void]
FUN getOptions: com[seq[denotation]]