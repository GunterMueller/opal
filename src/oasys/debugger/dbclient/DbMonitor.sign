/* %
@b{FIXME: Documentation out of date}

 Die Struktur @code{DbMonitor} implementiert zwei verschiedene Test-Funktionen,
die auf eventuell vorhandene Tasks vom Debugger prüfen. 

@itemize @bullet
@item
 Das Command @code{wait} verzögert solange bis ein Task vorliegt,
wertet diesen aus und wartet erneut auf weitere Tasks. Erst durch den Task
@code{continue} wird dieser Ablauf unterbrochen.
@item
 Die Funktion @code{monitor} prüft, ob eine Nachricht vom Debugger
vorliegt und wertet diese ggf. aus, indem sie den aktuellen Evaluationspunkt
(Position der Expression) auf dem BindingStack ablegt und den Task mit
@code{wait} auswertet. In diesem Fall terminiert @code{monitor} also erst durch
den Task @code{continue}.  Ist keine Nachricht vorhanden, terminiert sie sofort
mit dem übergebenen Environment. @code{monitor} ist aus Effizienzgründen als
Funktion mit Seiteneffekt realisiert.
@end itemize
 */

SIGNATURE DbMonitor

IMPORT  Expression      ONLY    expr:SORT
        DbEnvironment     ONLY    environment
        Com[environment]
                        ONLY    com
        RUNTIME         ONLY    obj:SORT
        Seq[obj]        ONLY    seq:SORT
        Nat             ONLY    nat:SORT
        

FUN monitor     : environment ** expr                   -> environment
FUN break       : environment ** expr                   -> environment
FUN abort       : environment ** expr ** denotation     -> environment
FUN wait        : environment                           -> com[environment]

FUN apply       : environment ** obj ** nat ** seq[obj] 
                        -> environment ** seq[obj]
