IMPLEMENTATION QuickStack

IMPORT	Nat		COMPLETELY
	Array		COMPLETELY
	Seq		COMPLETELY
	SeqIndex	COMPLETELY
	ABORT		COMPLETELY
	Fmt		COMPLETELY
	FmtSeq		COMPLETELY
	DEBUG		COMPLETELY


DATA stack == stack(stack: seq[data])

DEF stack(S) ! N	== S ! N
DEF push(stack(S),D)	== stack(D::S)
DEF pop(stack(S))	== stack(rt(S))
DEF top(stack(S))	== ft(S)

DEF <>			== stack(<>)
DEF D::R		== stack(D::stack(R))
DEF <>?(stack(S))	== <>?(S)
DEF ::?(stack(S))	== ::?(S)
DEF ft(stack(S))	== ft(S)
DEF rt(stack(S))	== stack(rt(S))
DEF last(stack(S))	== last(S)

DEF asSeq(stack(S))	== S
DEF asStack(S)		== stack(S)
DEF fmtStack(Fmt)(stack(S)) == fmtSeq(Fmt)(S)

/*
-- % parameter:
FUN sizeOfChunk : nat
DEF sizeOfChunk == 2 * 1024

-- % data-implementation:
DATA stack == stack(stack: seq[chunk], topSize: nat)
DATA chunk == chunk(chunk: array[data])

-- % contructors:
DEF <> == stack(<>,sizeOfChunk)
DEF ::(D,stack(Chks,Size)) == 
    IF Size = sizeOfChunk
      THEN -- chunk is full, create a new one and put this item into it
	   stack(upd(0,D,newChunk(default))::Chks,1)
    IF Size > sizeOfChunk
      THEN ABORT("::'QuickStack: wrong data")
      ELSE stack(upd(Size,D,ft(Chks))::rt(Chks),succ(Size))
    FI

-- % tests:
DEF <>?(stack(S,_)) == <>?(S)
DEF ::?(stack(S,_)) == ::?(S)

-- % selectors:
DEF ft(stack(<>	    ,_	    ))	    == ABORT("ft'Stack: undefined selection")
DEF ft(stack(Ft :: _,succ(N)))	    == Ft ! N
DEF rt(stack(<>	    ,_	    ))	    == ABORT("rt'Stack: undefined selection")
DEF rt(stack(S AS Ft::Rt,N)) ==
    IF N = 1
      THEN stack(Rt,sizeOfChunk)
    IF N = 0
      THEN ABORT("rt'QuickStack: wrong data")
      ELSE stack(S,pred(N))
    FI

-- % push, pop, top and @code{!}:
DEF S push D == D :: S
DEF pop	  == rt
DEF top	  == ft
DEF stack(Chks,succ(No)) ! M ==
    IF M < No
      THEN ft(Chks) ! (No-M)
      ELSE LET Relevant == rt(Chks) ! ((M-No) / sizeOfChunk)
	   IN Relevant ! (sizeOfChunk - ((M-No) % sizeOfChunk) - 1)
    FI

-- % last:
DEF last(stack(Chks,S)) == last(Chks) ! 0

-- % internal functions on chunks:
	FUN newChunk	: data ->				   chunk 
	DEF newChunk(D) == chunk(init(sizeOfChunk,
				     PRINT(true,"++++++++NEWCHUNK+++++++++",D)))

	FUN upd		: nat	** data ** chunk	-> chunk
	DEF upd(N,I,chunk(Arr)) == chunk(upd(N,I,Arr))

	FUN !		: chunk ** nat			-> data
	DEF chunk(Arr) ! N == Arr ! N



-- % conversion:
DEF asSeq(stack(<>,_)) == <>
DEF asSeq(stack(Ft::Rt,Size)) ==
    LET Seq == asSeq(stack(Rt,sizeOfChunk))
    IN addSeq(Ft,Size,Seq)

DEF asStack(<>) == <>
DEF asStack(Ft::Rt) == Ft :: asStack(Rt)

DEF fmtStack(FmtData)(Stack) ==
    IF <>?(Stack)
      THEN lit("BOTTOM")
      ELSE FmtData(ft(Stack));fmtStack(FmtData)(rt(Stack))
    FI
-- %$$Defintione un Operationen auf Chunks$ ===============================

FUN addSeq : chunk ** nat ** seq[data]	-> seq[data]
DEF addSeq(chunk(Arr),0,Seq) == Seq
DEF addSeq(chunk(Arr),succ(N),Seq) == 
    addSeq(chunk(Arr),N,(Arr!N) :: Seq)
*/