/* % 
 Die Übersetzung der Implementierung bezieht sich ausschließlich auf
Funktionen. Hier gibt es genau zwei Implementierungen, die im Zusammenhang mit
dem Interpreter interessant sind: @code{induced} (Konstruktor, Selektor oder
Test) oder @code{def} eine Definition auf der Grundlage einer Menge von
Pattern-basierten Gleichungen. Alle Funktionsimplementierungen werden in einen
Ausdruck @code{expr'Expression} übersetzt.
 */
SIGNATURE DbConversion

IMPORT
	Nat		ONLY	nat
	Option[nameStack]
			ONLY	option
IMPORT
	Repo		ONLY	repo:SORT
	RepoAbsy	ONLY	expr:SORT impl:SORT
	RepoName	ONLY	objectName:SORT
IMPORT
	DbIdentTable	ONLY	identTable:SORT
	DbNameStack	ONLY	nameStack:SORT
	Expression	ONLY	expr:SORT fct:SORT name:SORT
				kind:SORT tpos:SORT
	ChannelData	ONLY	declare:SORT define:SORT

-- %$Einfache TRansformationen$ ========================================
/* %
 @code{(Expr,Rank,Dim) == asExpr(Repo,IT,Name):} Die Konvertierung der
Funktionsimplementierung einer Funktion @code{Name} benötigt neben dem
Repository @code{Repo} die IdentTable @code{IT} zur Ermittlung der abstrakten
Identifier aus der IdentTable.

@code{Expr} ist der resultierende Ausdruck, @code{Rank} ist der Rang der
Funktion und @code{Dim} liefert die Dimension der Applikation der Funktion
@code{Name} mit @code{Rank} Elementen (siehe dazu auch
@code{define'ChannelData}).
 */
FUN asExpr :
	repo ** identTable ** objectName 		-> expr'Expression **
							   nat ** nat
/* % 
 Die folgende Variante von @code{asExpr} übersetzt einen beliebigen Ausdruck
als Toplevel-Ausdruck und liefert zusätzlich dessen Funktionalität zurück.
 */
FUN asExpr :
	repo ** identTable ** expr'RepoAbsy 		-> expr'Expression **
							   fct'Expression
/* %
 @code{asName} übersetzt den angegebenen Namen in einen internen Namen
@code{name'Expression}.
 */
FUN asName :
	repo ** identTable ** objectName		-> name'Expression

/* %
 @code{asDeclare} errechnet das @code{declare}-Datum zu einer Funktion.
 */
FUN asDeclare :
	repo ** identTable ** objectName		-> declare

/* %
 @code{asDefine} errechnet das @code{define}-Datum zu einer
Funktion. @code{kind} gibt an, ob die Funktion @code{coded} oder
@code{interpreted} definiert werden soll.
 */
FUN asDefine : 
	repo ** identTable ** objectName ** kind	-> define

-- %$Suche nach Termpositionen$ ========================================
/* %
 @code{lookFor} sucht nach einer Termposition @code{tpos} innerhalb der
Definition einer Funktion.
 */
FUN lookFor? :
	repo ** identTable ** objectName ** tpos 	-> option[nameStack] **
							   impl'RepoAbsy

FUN lookFor? :
	repo ** identTable ** expr'RepoAbsy ** tpos 	-> option[nameStack] **
							   expr'RepoAbsy
			