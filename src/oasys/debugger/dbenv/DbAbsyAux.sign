/* %
 In der Struktur @code{AbsyAux} werden eine Reihe nützlicher Funktionen auf dem
Absy-Format des Repositorys definiert.
 */
SIGNATURE DbAbsyAux

IMPORT
	Nat		ONLY	nat:SORT
	Array[nat]	ONLY	array:SORT
	Fmt		ONLY	fmt
IMPORT	
	Repo		ONLY	repo:SORT
	RepoName	ONLY	objectName:SORT unitName:SORT
				localSignName:SORT
	RepoAbsy	ONLY	fct:SORT expr:SORT impl:SORT

/* %
 @code{dim} ermittelt die Dimension zu einer beliebigen Funktionalität. Die
Dimension ist definiert als:

@smallexample
    dim(cart(E))    === sum_{e in E} dim(e) , if E is nonempty
    dim(Fct)	    === 1		    , otherwise
@end smallexample
 */
FUN dim		: fct				-> nat

/* %
 @code{Fct applyWith N} ermittelt die Funktionalität der Applikation
@code{f(x)} einer Funktion @code{f:Fct} und @code{dim(x) === N}. (Dieser Wert
ist unabhängig von der Wahl von @code{f} und @code{x}.) Die Funktion erzeugt
einen Laufzeitfehler, wenn @code{Fct} nicht mit @code{N} Argumenten appliziert
werden kann. @code{applyWith?} liefert in diesem Fall @code{nil}.
 */
FUN applyWith	: fct ** nat			-> fct

/* %
 Zu jeder Funktionalität läßt sich eine endliche Abbildung @code{rank -> dim}
errechnen, die jeder (zulässigen) Anzahl von Argumenten @code{Rank} die
Dimension der Applikation @code{applyWith(_,Rank)} zuordnet. Die natürliche
Zahl gibt die Anzahl der Parameterfunktionen der Funktion, die zu der
Funktionalität gehört, an.

Zur Kodierung dieser Abbildung wird eine Sequenz verwendet, das jedem möglichen
Rang (als Index) die Dimension zuordnet. Unmögliche Rangzahlen werden durch
@code{max'Nat} zudefiniert.
 */
FUN rankDimTable: fct ** nat			-> array[nat]

/* %
 @code{fct} ermittelt zu einem beliebigen Ausdruck die Funktionalität.
 */
FUN fct		: repo ** expr			-> fct


/* %
 @code{etaEnrichedRank} liefert den maximal möglichen Rang zu einer gegebenen
Funktionalität.
 */
FUN etaEnrichedRank: fct			-> nat



FUN inst : objectName	 ** nat -> objectName
FUN inst : localSignName ** nat -> localSignName
FUN inst : unitName	 ** nat -> unitName

/* %
 @code{fmtImpl} liefert zu einer annotierten Implementierung eine
Formatierung.
 */
FUN fmtImpl	: objectName ** impl'RepoAbsy		-> repo -> fmt
