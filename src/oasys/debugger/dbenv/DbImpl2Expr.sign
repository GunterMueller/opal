/* % 
 Die Übersetzung der Implementierung bezieht sich ausschließlich auf
Funktionen. Hier gibt es genau zwei Implementierungen, die im Zusammenhang mit
dem Interpreter interessant sind: @code{induced} (Konstruktor, Selektor oder
Test) oder @code{def} eine Definition auf der Grundlage einer Menge von
Pattern-basierten Gleichungen. Alle Funktionsimplementierungen werden in einen
Ausdruck @code{expr'Expression} übersetzt.
 */
SIGNATURE DbImpl2Expr

IMPORT	
	Expression	ONLY	expr:SORT fct:SORT
	Nat		ONLY	nat
	RepoAbsy	ONLY	objectName:SORT fct:SORT expr:SORT
				impl:SORT
	RepoInternData	ONLY	repo:SORT
	DbIdentTable	ONLY	identTable:SORT
	DbConvEnv	ONLY	env:SORT

/* %
 @code{(Env',Expr,Rank,Impl) == fun2expr(Env,Name):} Konvertierung der
Funktionsimplementierung einer Funktion @code{Name}.  @code{Expr} ist der
resultierende Ausdruck und @code{Rank} ist der Rang der Funktion. @code{Impl}
ist die Implementierung der Funktion (möglicherweise mit Kontext-Informationen
annotiert, falls nach einer Termposition gesucht wurde (siehe
@code{initForQuery'ConvEnv})).
 */
FUN fun2expr :
	env ** objectName	-> env ** expr'Expression ** nat ** impl

FUN expr2expr : 
	env ** expr'RepoAbsy	-> env ** expr'Expression ** expr'RepoAbsy




