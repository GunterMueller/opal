/* %
 In der Struktur @code{Name2Expr} werden die Absy-Namen in Ausdrücke aus
@code{Expression} übersetzt. Dabei wird die Parametrisierung mit
Parameterfunktionen in Higher-Order-Applikationen konvertiert.

Ein Name wird dabei auf zweierlei ,,Arten'' umgeformt. Zum einen wird der Name
(der i.allg. parametrisiert ist) in einen Namen aus Expression
transformiert. Er enthält alle Informationen, die auch im Absy-Namen enthalten
sind (also auch Parametrisierung). Diese Transformation wird insbesondere für
die Debugging-Zwecke benötigt. Zum anderen wird die Parametrisierung in eine
Applikation der Parameterfunktionen auf den Namen selbst dargestellt. Diese
Transformation dient zur effizienten Auswertung von Namen im Interpreter.
 */
SIGNATURE DbName2Expr

IMPORT	DbConvEnv	ONLY	env:SORT
	Expression	ONLY	expr:SORT name:SORT fct:SORT
	RepoAbsy	ONLY	objectName:SORT fct:SORT

/* %
 @code{(Env1,Expr) == name2expr(Env,Name)} konvertiert einen Absy-Namen
@code{Name} in einen Ausdruck @code{Expr} im Sinne einer
@emph{Applikation}. Trat innerhalb der Konvertierung die gesuchte Termposition
des Names auf, so enthält das resultierende Environment spätestens jetzt einen
definierten NameStack als Kontext (@code{context(E) avail?}). (Der Kontext kann
aber auch schon vorher vorhanden gewesen sein.)

Bei parametrisierten Namen werden dabei die formalen Parameterfunktionen als
Applikationen übersetzt, wobei der Wert der jeweiligen Parameterfunktion im
BindingStack erwartet wird (der hier durch den NameStack symbolisiert wird).
 */
FUN name2expr : env ** objectName		-> env ** expr

/* %
 @code{name2name} transformiert einen (möglicherweise parametrisierten) Namen
in einen Namen aus @code{Expression}. Die Parametrisierung wird dabei ebenfalls
transformiert. Da Namen selbst keine Termpositionen belegen, ändert sich der
Zustand des Environment nicht. (Es wird deshalb auch nicht zurückgeliefert.)
 */
FUN name2name : env ** objectName		-> name'Expression

/* %
 @code{fct2fct} transformiert die Funktionalität in das Format des
Interpreters.
 */
FUN fct2fct   : env ** fct'RepoAbsy		-> fct'Expression



