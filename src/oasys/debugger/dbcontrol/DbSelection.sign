SIGNATURE DbSelection

IMPORT  Nat                     ONLY    nat
        Com[selectionInfo]      ONLY    com
        Com[selection]          ONLY    com
        Com[void]               ONLY    com
        Com[denotation] ONLY com
        Void                    ONLY    void
        Option[objectName]      ONLY    option
        Option[impl]            ONLY    option
        Set[objectName,<]       ONLY    set

IMPORT
        Repo                    ONLY    repo:SORT
        RepoAbsy                ONLY    impl:SORT fct:SORT
        RepoName                ONLY    unitName:SORT
                                        objectName:SORT
                                        < : objectName**objectName->bool
IMPORT
        Expression              ONLY    expr:SORT fct:SORT
        ChannelData             ONLY    selection:SORT
IMPORT
        DbIdentTable            ONLY    identTable:SORT
/* %
 @code{getSelection} tries to set the selection to position @code{nat} within
the current evaluation. If there is no such selection or if there is no
evaluation currently active or no client running the command fails.
 */
FUN getSelection        : nat                   -> com[selection]
FUN getSelection        :                          com[selection]
/* %
 remove the selection. @code{getSelection?} will result with @code{nil}.
 */
FUN unsetSelection      :                          com[void]

/* %Replace RES identifiers with RES#, where # is the highest possible
    number. */
FUN analyseRes: denotation -> com[denotation]

/* %
 Analyse the actual (or given) selection in context of unit and return all 
relevant information for evalutation with local variables. The selection 
will be read from the client, if a client is running, otherwise a
default selection info is returned. The denotation parameter specifies
an OPAL expression which shall be evaluated in the context of the
selection, it is used to track down the number of RESi parameters
used in the selection.
 */
FUN analyseSelection    : unitName ** denotation -> com[selectionInfo]
FUN analyseSelection    : unitName ** nat ** denotation -> com[selectionInfo]

TYPE selectionInfo ==
        selectionInfo(
                notInCtxImports :       set[objectName,<],
                sourceExtender  :       denotation      -> denotation,
                exprReductor    :       expr            -> expr,
                fctAReductor    :       fct'RepoAbsy    -> fct'RepoAbsy,
                fctEReductor    :       fct'Expression  -> fct'Expression,
                name?           :       option[objectName],
                annotedImpl?    :       option[impl]
        )

