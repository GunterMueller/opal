SIGNATURE DbCommFastRpc[data]

SORT data

IMPORT	Com[data]		ONLY	com ans
	Com[void]		ONLY	com
	Com[option]		ONLY	ans
	Com[answer]		ONLY	ans
	Com[pair[ans[data],ans[option]]]	ONLY	com
	Com[pair[ans[data],ans[answer]]]	ONLY	com
	Option[answer]		ONLY	option
	Pair[ans[data],ans[option]]	ONLY	pair
	Pair[ans[data],ans[answer]]	ONLY	pair
	ChannelData		ONLY	answer task
	Void			ONLY	void

/* %
 @code{rpc(Task,Command,P)}: The @code{Task} is sent to the client process
(failure if there is no connection). Then the @code{Command} is evaluated
immediately. @emph{Note, that this command may not influence the channel
itself. Otherwise, the behaviour is undefined. Besides the command may never
fail!}

Therafter, @code{rpc} is waiting for the answer @code{A} of this request (next
incoming answer) and yields the value if @code{P(A)} holds. If the user
interrupts this procedure, then @code{nil} is returned.

@code{rpc?} will never fail.
 */
FUN rpc? : task ** com[data] ** (answer -> bool) 
				-> com[pair[ans[data],ans[option]]]

/* %
 @code{rpc} will never fail. If the user interrupts by @code{Ctrl-C}, the item
@code{ans[answer]} contains a failure message.
 */
FUN rpc : task ** com[data] ** (answer -> bool) 
				-> com[pair[ans[data],ans[answer]]]

/* %
 @code{sync} tries to syncronize the channel. The command fails if the user
interrupts this trial (@code{<Ctr-C>}).
 */
FUN sync : com[void]

