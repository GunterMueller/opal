/* %
 This structure contains functions for access to the client process.
 */
SIGNATURE DbComm


IMPORT	Com[answer]		ONLY	com
	Com[option]		ONLY	com
	Com[bool]		ONLY	com
	Com[void]		ONLY	com
	Void			ONLY	void
	Option[answer]		ONLY	option
	ChannelData		ONLY	answer task


/* % @code{clientCheck} checks whether the evaluator client ist running,
and RPCs may take place.  The command yields true if this is the case.
It also tests whether a registered client has been terminated abnormally, 
in which case internal global data of the debugger (the channel, the unit 
and the identifier table) will be reset. @code{clientSync}, in addition
to @code{clientCheck}, tries to synchronize with an existing client
using @code{sync'DbCommFastRpc}.

@code{ensureClient} performs a @code{clientCheck}.  If it doesn't
detect a running client, one will be spawned. 

@code{terminateClient} terminates a client, if one is running, and
clears internal global data in the debugger.

@code{externClient} tries to connect to an extern client which has been started
from outside of the debugger, after terminating the running client.
*/

FUN clientCheck?	: com[bool]
FUN clientCheck		: com[void]
FUN clientSync		: com[bool]
FUN ensureClient	: com[void]
FUN terminateClient	: com[void]	
FUN externClient	: com[void]


/* %
 @code{rpc(Task)}: The @code{Task} is sent to the client process (failure if
there is no connection.	 @code{rpc} is waiting for answer of this operation. If
the user interrupts this procedure then @code{nil} is returned.
 */
FUN rpc?  : task				-> com[option]
FUN rpc?  : task ** (answer -> bool)		-> com[option]

/* %
 The following versions of @code{rpc} fail if the user interrupts by
@code{<Ctrl-C>}
 */
FUN rpc	  : task				-> com[answer]
FUN rpc	  : task ** (answer -> bool)		-> com[answer]

