SIGNATURE Argspec[data]

SORT data

IMPORT	Seq[denotation]		ONLY	seq
	Com[data]		ONLY	com
	Denotation		ONLY <
	Com[set[denotation,<]]	ONLY com


	       
/*
 The completer function gets just one word and delivers the complete sequence
of all matching completions. The command fails if the word does not match any
completion (syntax error). The word itself is delivered iff the given word is
the unique matching item. If the word is syntactical correct an empty sequence
is delivered.
 */

SORT argspec

FUN argspec :
	(denotation ->	com[data]) **			-- parser
	(denotation ->	com[set[denotation,<]]) **	-- completer
	denotation ->					-- usage text
		argspec

FUN argspec :
	(denotation ->	com[data]) **			-- parser
	(denotation ->	com[set[denotation,<]]) **	-- completer
	denotation **					-- usage text
	denotation ->					-- prefix
		argspec

FUN parse :	argspec ** seq[denotation] -> com[data]
FUN complete :	argspec ** seq[denotation] -> com[set[denotation,<]]
FUN usage :	argspec			   -> denotation
FUN prefix :	argspec			   -> denotation





-- not for user purpose =============================================
IMPORT	Triple[data,seq[denotation],denotation]	ONLY triple
	Com[triple[data,seq[denotation],denotation]] ONLY com ans
	Set[denotation,<]		ONLY set
	Pair[cxt,seq[denotation]]	ONLY pair
	Com[pair[cxt,seq[denotation]]]	ONLY com
	ArgspecIntern			ONLY cxt
	Option[denotation]		ONLY option

TYPE argspec ==
     argspec(
	   parser:	seq[denotation] -> 
			com[triple[data,seq[denotation],denotation]],
	   completions: denotation	-> com[set[denotation,<]],
	   cxtFinder:	seq[denotation] -> com[pair[cxt,seq[denotation]]],
	   epsilon?:	bool,
	   usage:	denotation,
	   prefix:	option[denotation],
	   brace?:	bool
	)

FUN err : ans[triple[data,seq[denotation],denotation]] -> denotation
