IMPLEMENTATION DenoScanBasic

IMPORT  StringScan      COMPLETELY
        String          COMPLETELY
        StringConv      COMPLETELY
        Denotation      COMPLETELY
        Char            COMPLETELY
        CharConv        COMPLETELY
        Option          COMPLETELY
        Pair            COMPLETELY
        Com             COMPLETELY
        Nat             COMPLETELY
        NatConv         COMPLETELY
        Void            COMPLETELY

FUN nat :                      denotation -> ans[pair[nat,denotation]]
DEF nat(D) == 
    LET (OptNat,Rt) == scan(!(D))
    IN IF OptNat avail?
         THEN okay(cont(OptNat) & `(Rt))
         ELSE fail("nat expected instead of "++D)
       FI

FUN lit : denotation        -> denotation -> ans[pair[denotation,denotation]]
DEF lit(L)(D) ==
    IF L <| D
      THEN okay(L & `(drop(#(L),!(D))))
      ELSE fail("'"++L++"' expected instead of "++D)
    FI

FUN lit : nat               -> denotation -> ans[pair[denotation,denotation]]
DEF lit(N)(D) ==
    IF #(D) >= N
      THEN LET (S1,S2) == split(N,!(D))
           IN okay(`(S1) & `(S2))
      ELSE fail("denotation (at least) of length "++ `(N) ++" expected "++
                "instead of "++ D)
    FI

FUN char: (char -> bool)    -> denotation -> ans[pair[char,denotation]]
DEF char(F)(D) ==
    IF D = "" 
      THEN fail("char expected instead of empty denotation")
    OTHERWISE
    IF F(D!0)
      THEN okay((D!0) & `(rt(!(D))))
      ELSE fail("unexcted char: '"++ `(D!0) ++ "'")
    FI

FUN empty :                    denotation -> ans[pair[void,denotation]]
DEF empty(D) ==
    IF D = ""
      THEN okay(nil & "")
      ELSE fail("empty denotation expected instead of "++ D)
    FI
