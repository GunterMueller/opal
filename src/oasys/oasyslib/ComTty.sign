SIGNATURE ComTty[data]

IMPORT  Com[data]               ONLY    com
        Com[option[data]]       ONLY    com
        Option[data]            ONLY    option
        Com[void]               ONLY com
        Void                    ONLY void

SORT data

-- %$Generelle Funktionen$
-- %----------------------

/* %
 Liest ein Zeichen von StdIn und testet, ob es @code{'y'} bzw.  @code{'Y'}
ist. Wenn ja, wird das erste Kommando propagiert, andernfalls das zweite.
 */
FUN versus : com[data] ** com[data] -> com[data]

-- %$Interaktion$
-- %-------------

/* %
 Legt fest, ob interaktiv oder batch-Betrieb erfolgt.
 */
FUN interactive : bool -> com[void]

/* %
 Die Funktion @code{onInteractive} prüft, ob das Interactive-Flag gesetzt ist
und führt in diesem Fall das Kommando aus. Ist @code{interactive = false} wird
@code{nil} zurückgeliefert.
 */

FUN onInteractive : com[option[data]] -> com[option[data]]

/* %
 @code{&?} kann dazu verwendet werden, ein Kommando @code{onInteractive} in einen
gewöhnlichen Kommando-Kontext zu integrieren:
@smallexample
--------------------------------
  onInteractive(
        write("do you really want to save (y/n)?") &
        read                                       & (\\C.
        succeed(
          IF C = !("y")
            THEN nil    -- do the default (see below)
            ELSE avail(!("not saved"))
          FI
        )                                          )
  )                                                &?
  -- default (executed if non-interactive or answer "y")
  save & succeed("saved.")
--------------------------------
@end smallexample
 */
FUN &? : com[option[data]] ** com[data] -> com[data]
