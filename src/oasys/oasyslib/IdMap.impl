IMPLEMENTATION IdMap[codom] 

IMPORT	Id	COMPLETELY


IMPORT	Nat	COMPLETELY
        NatMap  COMPLETELY
        NatMapConv  COMPLETELY
        NatMapFilter  COMPLETELY
	Seq	COMPLETELY
	SeqFilter	COMPLETELY
	SeqReduce COMPLETELY
	SeqMap	COMPLETELY
        SetMap  COMPLETELY
        SetConv COMPLETELY
	IdSet	COMPLETELY
	Option	COMPLETELY
	OptionMap	COMPLETELY
	Pair	COMPLETELY
	ABORT	COMPLETELY
	Fmt	COMPLETELY
	FmtSeq	COMPLETELY



DATA idmap == abs(tab: natMap[codom])

DEF {}	   == abs({})
DEF {}?(abs(M)) == {}?(M)

DEF def(I,D,abs(M)) == abs(def(#(I), D, M))

DEF undef(abs(M), I) == abs(undef(#(I), M))


DEF def?(I,abs(M)) == def?(#(I), M)
DEF abs(M)!I	   == M! #(I)

DEF abs(M)!?I == M !? #(I)

DEF upd(I,F,abs(M)) == abs(upd(#(I), F, M))

DEF <+(abs(M1),abs(M2)) == abs(M1 <+ M2) 

DEF <-(abs(M), S) == abs(M <- asSet((# * asSeq(S))))

DEF extend(abs(M),Ids,Ds) == abs(extend(M, # * Ids, Ds))

DEF asSeq(abs(M))	== asIdPair * asSeq(M)

DEF asMap(Ps) == abs(asNatMap((\\P. #(1st(P)) & 2nd(P)) * Ps))


DEF dom(abs(M))	== asSet(asId * asSeq(dom(M)))


DEF free(abs(A)) == asId(new(undef(max'Nat, A)))

DEF exists?(P, abs(A)) == exist?(\\ _, C. P(C), A)

DEF forall?(P, abs(A)) == forall?(\\ _, C. P(C), A)

DEF find?(P, abs(M)) == asIdPair * find?(\\ N, C . P(asId(N), C), M)

DEF find?(P, M) == 2nd * find?(\\ _, C.P(C), M)

DEF codom(abs(A)) == codom(A)

DEF codomST(abs(A), P) == codom((\\ _, C . P(C)) | A)

DEF fmtIdmap(Fmt)(M) ==
    list(\\ Pair. fmtId(1st(Pair)); lit(" = "); Fmt(2nd(Pair)),
         lit("{"), lit(","), lit("}"), 
	 asSeq(M))

-- auxiliary functions 

FUN asIdPair : pair[nat,codom] -> pair[id,codom]
DEF asIdPair(N & C) == asId(N) & C

FUN asId : nat -> id
DEF asId(N) == IF N = max THEN none ELSE id(N) FI
