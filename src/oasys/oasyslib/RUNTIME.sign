/* %
 This structure and its counterpart @ref{@Overview{RUNTIMEENV}}
 contains functions for 
 dynamic evaluation of functional code of the @OPAL-runtime-system.
 */

SIGNATURE RUNTIME

IMPORT	Void		ONLY void
	Nat		ONLY nat
	Seq[obj]	ONLY seq
	Array[nat]	ONLY array
	Com[void]	ONLY com
	Com[obj]	ONLY com

	
-- %$Introduction of objects$
-- %-------------------------

/* %
 There is an abstract sort @t{obj} representing arbitrary data objects handled
by the runtime system.
 */
SORT obj

/* %
 There is a constant @emph{bottom} object @code{_|_} representing an undefined
object.
 */
FUN _|_ : obj

-- %$Dynamic Linking and Retrieval of runtime-objects$
-- %--------------------------------------------------

/* %
 @code{link(Struct)} dynamically links a structure with the running program
if it is not already present.
 @code{lookup} returns a named functions value. The name of the function is
represented by an @OPAL-structure name and a function number inside of this
structure (unique ID definied within the interopal specification).  
The structure will be linked if neccessary.
 */

FUN link  : denotation 	      -> com[void]
FUN lookup: denotation ** nat -> com[obj]

/* %
 @code{redefine} changes a named functions value in the runtime system. 
The function will be dynamically linked to the program if not yet present 
@i{before} redefinition.
 */

FUN redefine: denotation ** nat ** obj -> com[void]
 

-- %$Dynamic construction of free data types$
-- %-----------------------------------------

/* % 
 Construct a data object tagged with a natural number embedding a sequence
of objects (which may be empty).
 */

FUN cons: nat ** seq[obj] -> obj

/* %
 Test if data object created with cons is tagged with number. If the object
wasn't constructed with cons a runtime failure may happen. 
 */

FUN test?: obj ** nat -> bool

/* %
 Yield tag of constructed object:
*/

FUN tag : obj -> nat

/* %
 @code{sel:} selection of an element of data object constructed
with cons.  
 */

FUN sel: obj ** nat -> obj


-- %$Casting of builtin types$
-- %--------------------------

/* %
 The functions below convert objects to and from the 
predefined types of booleans and denotations. */


FUN asBool	  : obj		-> bool
FUN asDenotation  : obj		-> denotation

FUN asObj	  : bool	-> obj
FUN asObj	  : denotation  -> obj

