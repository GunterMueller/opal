/* % This structure provides a simple option data base with a 
textual interface, togther with a set of names representing standard
options. */

SIGNATURE RepoOptions

IMPORT	Option[denotation]	ONLY option:SORT
	Denotation		ONLY < : denotation ** denotation -> bool
	Map[denotation,<,
	    denotation]		ONLY map:SORT

IMPORT	Repo			ONLY repo:SORT
	RepoName		ONLY unitName:SORT
	RepoAn			ONLY anLayer:SORT

-- %$Annotation Layer$ ======================================================

/* % This structure reserves the annotation layer no. 10. */

FUN optionsAnLayer	: anLayer	


-- %$Option Access$ ========================================================

/* % @code{setOption(Name, Val)} sets the default value for the option
@code{Opt}. @code{setOption(U, Opt, Val)} sets an option for a
specific unit. */

FUN setOption	: denotation ** denotation		-> repo -> repo
FUN setOption	: unitName ** denotation ** denotation	-> repo -> repo

/* % @code{getOption(Opt)} retrieves the value of option @code{Opt} in
the entire repository. @code{getOption(U, Opt)} retrieves the
option for a specific unit; if the option isn't set for this unit,
then its value in the repository will be returned. */

FUN getOption	: denotation 		  -> repo -> option[denotation]
FUN getOption	: unitName ** denotation  -> repo -> option[denotation]


/* % @code{getOptions} returns a mapping describing the option
setting for the entire repository. @code{getOptions(U)} returns the 
mapping for the specific unit (no defaults from the repository
options are included in this mapping). */

FUN getOptions	: 		   repo -> map[denotation,<,denotation]
FUN getOptions	: unitName	-> repo -> map[denotation,<,denotation]

