IMPLEMENTATION RepoAdmin

IMPORT  Nat             COMPLETELY
        Denotation      COMPLETELY
        FileSystem      COMPLETELY
        FileSystemConv  COMPLETELY
        Time            COMPLETELY
        TimeConv        COMPLETELY
        Com             COMPLETELY
        ComCompose      COMPLETELY
        Fmt             COMPLETELY
        FmtBasicTypes   COMPLETELY
	ProcessArgs     ONLY env noSuchEnvVar?
                
IMPORT  RepoAn          COMPLETELY
        RepoName        COMPLETELY

-- %$Implementation of File Functions$

FUN fmtFilemode : filemode      -> fmt
FUN fmtTime     : time          -> fmt

DEF fmtFilemode(M)  == lit(`(M))
DEF fmtTime(T)  == lit(`(T))

DEF checkRepoFile(F) ==
    stat(path(F))                      ; (\\ Stat? .
    IF okay?(Stat?) THEN
        succeed(existent(path(F), mode(data(Stat?)), mtime(data(Stat?))))
    ELSE
        succeed(notExistent(path(F)))
    FI
    )

DEF outdatedRepoFile?(F) ==
    checkRepoFile(F)                    & (\\ F1 .
    IF notExistent?(F1) THEN
        succeed(~(notExistent?(F)))
    OTHERWISE
    IF notExistent?(F) THEN
        succeed(true)
    ELSE
        succeed(mtime(F) < mtime(F1))
    FI
    )

DEF existent(_, _, T1) <= existent(_,_,T2) == T1 <= T2
DEF existent(_,_,_) <= notExistent(_) == true
DEF _  <= _ == false
    

-- %$File Names$ ============================================================

/* The following two functions are copied from GenMake.impl.
   This is a quick fix.
*/
/* %check, if environment variable @code{OCS_FILENAMES_CASEFOLD} exists
    and set to "yes" */
FUN casefold? : bool
DEF casefold? == 
  EXEC(env("OCS_FILENAMES_CASEFOLD") ; (\\ ans.
       IF noSuchEnvVar?(ans) THEN succeed(false)
       IF fail?(ans) THEN succeed(false)  -- should we abort here?
       ELSE
         succeed(data(ans) = "yes")
       FI
       )
      )

FUN translate: denotation -> denotation
DEF translate(bn) ==
  IF casefold? THEN
    IF bn="Denotation" THEN "Denotation_ocs"
    IF bn="Time" THEN "Time_ocs"
    IF bn="Bool" THEN "Bool_ocs"
    IF bn="Signal" THEN "Signal_ocs"
    IF bn="Wait" THEN "Wait_ocs"
    IF bn="ReadLine" THEN "ReadLine_ocs"
    IF bn="Tcl" THEN "Tcl_ocs"
    IF bn = "Tk" THEN "Tk_ocs"
    IF bn = "Reflection" THEN "N_Reflection_ocs"
    IF bn = "REFLECTION" THEN "U_REFLECTION_ocs"
    ELSE
      bn
    FI
  ELSE
    bn
  FI
/* End of copied code. */

DEF sourceFileName(Path, Symbol, sign) == Path ++ translate(Symbol) ++ ".sign"
DEF sourceFileName(Path, Symbol, impl) == Path ++ translate(Symbol) ++ ".impl"

DEF absyFileName(Path, Symbol, sign) == Path ++ translate(Symbol) ++ ".sign.inter"
DEF absyFileName(Path, Symbol, impl) == Path ++ translate(Symbol) ++ ".impl.inter"

DEF objectFileName(Path, Symbol)     == Path ++ translate(Symbol) ++ ".o"


DEF folder(_,K1,S1,O1) = folder(_,K2,S2,O2) ==
    K1 = K2 and S1 = S2 and O1 = O2

DEF F1 : folderKind < F2 == tag(F1) < tag(F2)
DEF F1 : folderKind = F2 == tag(F1) = tag(F2)

        FUN tag : folderKind -> nat
        DEF tag(repoFolder) == 0
        DEF tag(ocsFolder)  == 1
        DEF tag(libFolder)  == 2



-- %$Inserted from Signature$

/* % 
@ignore
*/

-- %$Folders$ ===============================================================

/* % A folder describes a place where to store sources and derived
objects of an OPAL project: */

DATA folder ==
        folder          (an             : an,
                         kind           : folderKind,
                         sourcePath     : denotation,
                         objectPath     : denotation)

     FUN fmtFolder      : folder        -> fmt

DATA folderKind ==
        repoFolder ocsFolder libFolder
    
     FUN fmtFolderKind  : folderKind    -> fmt


-- %$Files$ =================================================================

/* % A file describes on object of the file system. It at least consits
of a name. If a file of this name is actually present, then furthermore
the file mode and modification time is represented: */


DATA repoFile ==
        notExistent     (path           : denotation)
        existent        (path           : denotation,
                         mode           : filemode,
                         mtime          : time)
        
        FUN fmtRepoFile : repoFile      -> fmt



/* %
@end ignore
*/


-- %$Generated by Ordinatrice$

/* % 
@ignore
*/

-- this is output of ordinatrice verte for free type folderKind



FUN fmtFolderKind : folderKind -> fmt
DEF fmtFolderKind(repoFolder) == ;(;(beg(2),lit("repoFolder")),end)
DEF fmtFolderKind(ocsFolder) == ;(;(beg(2),lit("ocsFolder")),end)
DEF fmtFolderKind(libFolder) == ;(;(beg(2),lit("libFolder")),end)



-- this is output of ordinatrice verte for free type repoFile





FUN fmtRepoFile : repoFile -> fmt
DEF fmtRepoFile(notExistent(v0)) == ;(;(beg(2),lit("notExistent")),;(;(lit("("),;(fmtDenotation(v0),lit(")"))),end))
DEF fmtRepoFile(existent(v0,v1,v2)) == ;(;(beg(2),lit("existent")),;(;(lit("("),;(;(;(fmtDenotation(v0),;(lit(", "),fmtFilemode(v1))),;(lit(", "),fmtTime(v2))),lit(")"))),end))



-- this is output of ordinatrice verte for free type folder






FUN fmtFolder : folder -> fmt
DEF fmtFolder(folder(v0,v1,v2,v3)) == ;(;(beg(2),lit("folder")),;(;(lit("("),;(;(;(;(fmtAn(v0),;(lit(", "),fmtFolderKind(v1))),;(lit(", "),fmtDenotation(v2))),;(lit(", "),fmtDenotation(v3))),lit(")"))),end))





/* %
@end ignore
*/

