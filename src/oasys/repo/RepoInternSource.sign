SIGNATURE RepoInternSource

IMPORT	Nat			ONLY nat:SORT
	Denotation		ONLY < : denotation ** denotation -> bool
	String			ONLY string:SORT
	Seq[item]		ONLY seq:SORT
	Set[denotation,<]	ONLY set:SORT
	Com[repo]		ONLY com:SORT

IMPORT	RepoAn			ONLY an:SORT anLayer:SORT
	RepoSource		ONLY item:SORT 
	RepoName		ONLY unitName:SORT
	RepoInternData		ONLY repo:SORT


-- %$Parsing Source$ ========================================================

/* % @code{parseItems(Source)} parses the string @code{Source},
splitting it into a sequence of items and a sequence of names of
imported units. Each item carries a region annotation describing its 
position in @code{Source}:
*/

FUN parseItems : string -> seq[item] ** set[denotation,<]

/* % @code{parseImports(Source)} parses the string @code{Source}
just for imported units: */


FUN parseImports : string -> set[denotation,<]

-- %$Loading and Flushing Unit Source$ =======================================

/* % @code{loadUnitSource(Name)(R)} parses the source of unit @code{Name}
and replaces the items and dependencies in the repository by the
parsed ones. The state of the unit is reset to unchecked and flushed:
*/

FUN loadUnitSource    : unitName      -> repo -> com[repo]


/* % @code{flushUnitSource(Name)(R)} flushes the source of unit @code{Name}
if the state of unit is unflushed; for this purpose, it generates
a new source file from the items found in the repository, writes it
out, and then sets the state of the unit to flushed: */

FUN flushUnitSource   : unitName      -> repo -> com[repo]

