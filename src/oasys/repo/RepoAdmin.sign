/* % This structure defines data types related to the administration
of the repository. */

SIGNATURE RepoAdmin

IMPORT  Time                 ONLY time:SORT
        FileSystem              ONLY filemode:SORT
        Fmt                     ONLY fmt:SORT
        Com[repoFile]           ONLY com:SORT
        Com[bool]               ONLY com:SORT

IMPORT  RepoAn                  ONLY an:SORT 
        RepoName                ONLY part:SORT



-- %$Folders$ ===============================================================

/* % A folder describes a place where to store sources and derived
objects of an OPAL project: */

TYPE folder ==
        folder          (an             : an,
                         kind           : folderKind,
                         sourcePath     : denotation,
                         objectPath     : denotation)

     FUN = : folder ** folder           -> bool
     FUN fmtFolder      : folder        -> fmt

TYPE folderKind ==
        repoFolder ocsFolder libFolder

     FUN < = : folderKind ** folderKind -> bool
     FUN fmtFolderKind  : folderKind    -> fmt


-- %$Files$ =================================================================

/* % A file describes on object of the file system. It at least consits
of a name. If a file of this name is actually present, then furthermore
the file mode and modification time is represented: */


TYPE repoFile ==
        notExistent     (path           : denotation)
        existent        (path           : denotation,
                         mode           : filemode,
                         mtime          : time)
        
        FUN fmtRepoFile : repoFile      -> fmt


/* % Some general commands are provided on @code{repoFile}. The
function @code{checkRepoFile(RF)} checks for the newest state 
of the file (if it exists, and how are its actual attributes).
The command @code{outdatedRepoFile?(RF)} checks whether the file
has been modificated, i.e. if it has become existent or if
its modification time has increased. The @code{command(RF1 <= RF2}
checks whether the @code{RF2} is newer then @code{RF1}; this is the
case if @code{RF2} is not existent, or if its modification time is older
or equal. */

FUN checkRepoFile       : repoFile              -> com[repoFile]
FUN outdatedRepoFile?   : repoFile              -> com[bool]

FUN <=                  : repoFile ** repoFile  -> bool

-- %$File Names$ ============================================================

FUN sourceFileName      : denotation ** denotation ** part -> denotation
FUN absyFileName        : denotation ** denotation ** part -> denotation
FUN objectFileName      : denotation ** denotation         -> denotation
