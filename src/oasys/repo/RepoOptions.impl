IMPLEMENTATION RepoOptions

IMPORT	Nat		COMPLETELY
	Option		COMPLETELY
	Denotation	COMPLETELY
	Map		COMPLETELY
	FmtMap		COMPLETELY
	DynConv[map[denotation,<,denotation]] COMPLETELY
	Com		COMPLETELY
	FmtBasicTypes	COMPLETELY

IMPORT	RepoUnitAccess		COMPLETELY
	RepoGlobalAccess	COMPLETELY
	RepoAn			COMPLETELY

DEF setOption(Name, Val)(R) ==
    updateAn(\\ An. An :=_options def(Name, Val, options(An)))(R)

DEF setOption(U, Name, Val)(R) ==
    updateAn(U, \\ An. An :=_options def(Name, Val, options(An)))(R)

DEF getOption(Name)(R) ==
    options(an(R)) !? Name

DEF getOption(U, Name)(R) ==
    IF avail?(options(an(U)(R)) !? Name) THEN
    	options(an(U)(R)) !? Name
    ELSE getOption(Name)(R) FI

DEF getOptions(R) ==
    options(an(R))

DEF getOptions(U)(R) ==
    options(an(U)(R))


DEF optionsAnLayer	== EXEC(register(10, fmtDynOptions))

FUN optionsAnTag	: denotation
DEF optionsAnTag	== "10"

FUN fmtDynOptions	: dyn -> fmt
DEF fmtDynOptions(Val)	== 
    fmtMap(fmtDenotation, fmtDenotation)(unpack(Val, optionsAnTag))


FUN :=_options	: an ** map[denotation,<,denotation] -> an
FUN options	: an -> map[denotation,<,denotation] 

DEF An :=_options Opts	== 
    def(optionsAnLayer, pack(Opts, optionsAnTag), An)

DEF options(An)	==
    IF avail?(An !? optionsAnLayer) THEN
    	unpack(cont(An !? optionsAnLayer), optionsAnTag) 
    ELSE {} FI

