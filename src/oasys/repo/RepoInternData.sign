/* % This structure supplies the internal data types of the
repository which are used to implement the user level functions.

This structure is `not for user purposes'. 
*/

SIGNATURE RepoInternData

IMPORT	Nat			ONLY nat
	Denotation		ONLY < : denotation ** denotation -> bool
	Seq[folder]		ONLY seq
	Seq[nat]		ONLY seq
	Seq[id]			ONLY seq
	Seq[objectName]		ONLY seq
	Set[denotation,<]	ONLY set
	Set[unitFlag,<]		ONLY set
	Map[denotation,<,nat]	ONLY map
	Id			ONLY id:SORT
	IdTab[unitInfo]		ONLY idtab:SORT
	IdTab[unitInstance]	ONLY idtab:SORT
	IdMap[unitImport]	ONLY idmap:SORT
	IdTab[property]		ONLY idtab:SORT
	IdTab[object]		ONLY idtab:SORT
	IdTab[item]		ONLY idtab:SORT
	IdTab[pragma]		ONLY idtab:SORT
	IdTab[unitLocalSign]	ONLY idtab:SORT
	IdSet			ONLY idset:SORT
	Fmt			ONLY fmt:SORT

IMPORT	RepoAn			ONLY an:SORT
	RepoName		ONLY objectName:SORT unitName:SORT 
	RepoAbsy		ONLY object:SORT property:SORT pragma:SORT
	RepoSource		ONLY item:SORT
	RepoAdmin		ONLY folder:SORT repoFile:SORT


-- %$Repository$ ==========================================================

TYPE repo ==
	repo		(an		: an,
			 folders	: seq[folder],
			 unitCodes	: map[denotation,<,nat],
			 unitInfos	: idtab[unitInfo])

     FUN fmtRepo	: repo				-> fmt
     FUN :=_an		: repo ** an			-> repo
     FUN :=_folders	: repo ** seq[folder]		-> repo
     FUN :=_unitCodes	: repo ** map[denotation,<,nat] -> repo
     FUN :=_unitInfos	: repo ** idtab[unitInfo]	-> repo


FUN emptyRepo : repo



-- %$Units$ =================================================================

TYPE unitInfo ==
	removed
	unitInfo	(symbol			: denotation,
			 an			: an,
			 state			: unitState,
			 flags			: set[unitFlag,<],
			 imports		: idmap[unitImport],
			 instances		: idtab[unitInstance],
			 items			: idtab[item],
			 itemOrder		: seq[nat],
			 itemImports		: set[denotation,<],
			 pragmas		: idtab[pragma],
			 properties		: idtab[property],
			 objects		: idtab[object],
			 localSigns		: idtab[unitLocalSign],
			 absyVersion		: nat,
			 objectVersion		: nat,
			 sourceFile		: repoFile,
			 absyFile		: repoFile,
			 objectFile		: repoFile)

     FUN :=_symbol	: unitInfo ** denotation	-> unitInfo
     FUN :=_an		: unitInfo ** an		-> unitInfo
     FUN :=_state	: unitInfo ** unitState		-> unitInfo
     FUN :=_flags	: unitInfo ** set[unitFlag,<]	-> unitInfo
     FUN :=_imports	: unitInfo ** idmap[unitImport] -> unitInfo
     FUN :=_instances	: unitInfo ** idtab[unitInstance]
							-> unitInfo
     FUN :=_items	: unitInfo ** idtab[item]	-> unitInfo
     FUN :=_itemOrder	: unitInfo ** seq[nat]		-> unitInfo
     FUN :=_itemImports : unitInfo ** set[denotation,<] -> unitInfo
     FUN :=_pragmas	: unitInfo ** idtab[pragma]	-> unitInfo
     FUN :=_properties	: unitInfo ** idtab[property]	-> unitInfo
     FUN :=_objects	: unitInfo ** idtab[object]	-> unitInfo
     FUN :=_localSigns	: unitInfo ** idtab[unitLocalSign] -> unitInfo
     FUN :=_absyVersion	: unitInfo ** nat		-> unitInfo
     FUN :=_objectVersion : unitInfo ** nat		-> unitInfo
     FUN :=_sourceFile	: unitInfo ** repoFile		-> unitInfo
     FUN :=_absyFile	: unitInfo ** repoFile		-> unitInfo
     FUN :=_objectFile	: unitInfo ** repoFile		-> unitInfo
   
     FUN fmtUnitInfo	: unitInfo			-> fmt

FUN emptyUnit		: denotation ** an   
				** repoFile ** repoFile
				** repoFile		-> unitInfo

TYPE unitState ==
	outdated checked compiled

     FUN < =		: unitState ** unitState	-> bool
     FUN fmtUnitState	: unitState			-> fmt

TYPE unitFlag ==
	flushed library sourced released interpreted fullAbsy

     FUN < =		: unitFlag ** unitFlag		-> bool
     FUN fmtUnitFlag	: unitFlag			-> fmt

TYPE unitInstance ==
	unitInstance	(an			: an,
			 objects		: seq[objectName])
	removed

     FUN :=_an		: unitInstance ** an		-> unitInstance
     FUN :=_objects	: unitInstance ** seq[objectName] -> unitInstance
     FUN fmtUnitInstance : unitInstance			-> fmt

TYPE unitImport ==
	unitImport	(an			: an,
			 objectIds		: idset)

     FUN :=_an		: unitImport ** an		-> unitImport
     FUN :=_objectIds	: unitImport ** idset		-> unitImport
     FUN fmtUnitImport	: unitImport			-> fmt

TYPE unitLocalSign ==
	unitLocalSign	(an			: an,
			 objects		: idtab[object])
        removed

     FUN :=_an		: unitLocalSign ** an		   -> unitLocalSign
     FUN :=_objects	: unitLocalSign ** idtab[object]   -> unitLocalSign
     FUN fmtUnitLocalSign : unitLocalSign		   -> fmt

-- %$Auxiliary Functions$ ===================================================

FUN setUnitInfo	   : unitName ** unitInfo		-> repo -> repo
FUN unitInfo	   : unitName				-> repo -> unitInfo
FUN setUnitInfo	   : unitName ** unitInfo		-> repo -> repo
FUN updateUnitInfo : unitName ** (unitInfo -> unitInfo) -> repo -> repo
FUN updateUnitInfo : unitName ** (unitInfo -> id ** unitInfo) 
							-> repo -> id ** repo
FUN updateUnitInfo : unitName ** (unitInfo -> seq[id] ** unitInfo) 
						   -> repo -> seq[id] ** repo
