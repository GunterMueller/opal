/* % The repository provides a concept of @emph{annotations} to attach
arbitrary information at its data types.

Annotations are organized by means of so-called @emph{annotation
layers}. Each annotation layer has a ``slot'' in an annotation
value, where it can store its information. The number and kind of
annotation layers is not fixed: arbitrary tools may add their own
annotation layers.

Annotations are technically finite, partial mappings from identifiers
of annotation layers to dynamically typed values. This technical level
is @emph{not} visible to the user of annotations: rather, a set of
customized functions is provided with each annotation layer which
hides this implementation detail.
*/

SIGNATURE RepoAn

IMPORT  Nat             ONLY nat:SORT
        Dyn             ONLY dyn:SORT
        Option[dyn]     ONLY option:SORT
        Fmt             ONLY fmt:SORT
        Com[anLayer]    ONLY com:SORT

        
-- %$Annotations$ 

/* %
The sort of annotations and the ``empty'' annotation are declared below:
*/

SORT an
FUN none : an

/* % 
A formatter for annotations is given below:
*/

FUN fmtAn  : an -> fmt


-- %$Low-level Interface$

/* % The following declarations are only of interest for implementors
of new annotation layers: */
 
SORT anLayer    
FUN register    : nat ** (dyn -> fmt)           -> com[anLayer]
FUN  = <        : anLayer ** anLayer -> bool
FUN !		: an ** anLayer		        -> dyn
FUN !?		: an ** anLayer		        -> option[dyn]
FUN def		: anLayer ** dyn ** an	        -> an
FUN upd		: anLayer ** (dyn -> dyn) ** an -> an
FUN undef	: an ** anLayer		        -> an


/* % An annotation layer needs to be assigned a @emph{unique code},
given by a natural number in the command @code{register}.  It is
important that two annotation layers @emph{never} have assigned the
same code, since otherwise strong typing is broken.  This caveat is
price of the flexibility achieved by annotations. 

@itemize @bullet{}
@item
The repository
itself reserves the code numbers @code{0} to @code{31}.  
@item 
The property checker reserves code numbers @code{900} to @code{911}.
@end itemize

The information which codes above @code{31} are free is considered as
a ``meta'', and is behind of this specification.

The command @code{register} is intended to be used to initialize a
constant of sort @code{anLayer}, using the primitive @code{EXEC'Com}.
*/

-- %Query the currently defined annotation layers.
IMPORT IdSet           ONLY idset:SORT
       Com[idset]      ONLY com:SORT
FUN queryAn: com[idset]