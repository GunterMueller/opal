IMPLEMENTATION RepoPragmaAccess

IMPORT	Set			COMPLETELY
	Seq			COMPLETELY
	SeqMap			COMPLETELY
	Id			COMPLETELY
	IdTab			COMPLETELY
	IdTabReduce		COMPLETELY

IMPORT	RepoInternData		COMPLETELY
	RepoAbsy		COMPLETELY
	RepoAn			COMPLETELY
	RepoName		COMPLETELY

DEF pragmas(U0)(R) ==
    LET U == baseName(U0)
    IN
    (\\Id, Prag, Set. 
    	IF removed?(Prag) THEN Set
			  ELSE incl(pragmaName(no(Id), U0), Set) FI,
     {}) / pragmas(unitInfo(U)(R))


DEF pragma(I)(R) ==
    pragmas(unitInfo(unit(I))(R)) ! id(no(I))

DEF newPragmas(U, Pragmas)(R) ==
    LET (Ids1, R1) == 
	    updateUnitInfo(U, \\ Info .
		LET (Ids, PragmaTab) == multiNew(#(Pragmas),
					      \\ _ . Pragmas, 
					      pragmas(Info))
		IN
		(Ids, Info :=_pragmas PragmaTab)
	    )(R)
    IN
    ((\\ Id. pragmaName(no(Id), U)) * Ids1, R1)

DEF updatePragma(pragmaName(No, U), Fun)(R) ==
    updateUnitInfo(U, \\ Info .
	Info :=_pragmas upd(id(No), Fun, pragmas(Info))
    )(R)

DEF removePragma(pragmaName(No, U))(R) ==
    updateUnitInfo(U, \\ Info .
	Info :=_pragmas def(id(No), removed, pragmas(Info))
    )(R)



