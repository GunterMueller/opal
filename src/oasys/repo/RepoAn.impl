IMPLEMENTATION RepoAn

IMPORT	Denotation	COMPLETELY
	Id		COMPLETELY
	IdMap		COMPLETELY
	Fmt		COMPLETELY
	FmtSeq		COMPLETELY
	Com		COMPLETELY
	ComCompose	COMPLETELY
	ComState	COMPLETELY
	Pair		COMPLETELY
	Option		COMPLETELY
	NatConv		COMPLETELY

DATA anLayer	== abs(rep: id)
DATA an		== abs(rep: idmap[dyn])
DATA fmtFun	== abs(rep: dyn -> fmt)

FUN fmtMap	: stateId[idmap[fmtFun]]

DEF fmtMap == 
    EXEC(stateId({}))

DEF register(Code, FmtFun) ==
    fmtMap => (\\ Map . def(id(Code), abs(FmtFun), Map)) &
    succeed(abs(id(Code)))

FUN fmtLayer : pair[id,dyn] -> fmt
DEF fmtLayer(Id & Val) ==
    -- yes, this is implemented as a real side effect :-)
    LET Fun? == EXEC(?(fmtMap)) !? Id
    IN
    IF avail?(Fun?) THEN
	rep(cont(Fun?))(Val)
    ELSE
	lit("<value of annotation layer #" ++ `(no(Id)) ++ ">")
    FI

DEF fmtAn(An) ==
    list(fmtLayer, lit("{"), lit(","), lit("}"), asSeq(rep(An)))

DEF none			== abs({})
DEF abs(M) ! abs(Id)		== M ! Id
DEF abs(M) !? abs(Id)		== M !? Id
DEF def(abs(Id), Val, abs(M))	== abs(def(Id, Val, M))
DEF upd(abs(Id), Fun, abs(M))	== abs(upd(Id, Fun, M))
DEF undef(abs(M), abs(Id))	== abs(undef(M, Id))

DEF abs(Id1) = abs(Id2)		== Id1 = Id2
DEF abs(Id1) < abs(Id2)		== Id1 < Id2
