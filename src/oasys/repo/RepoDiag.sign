/* % The structure @code{RepoDiag} defines the data type of
diagnostics which represents a set of messages attributed by a mode
and a source reference.	 */

SIGNATURE RepoDiag

IMPORT	String		ONLY string
	Seq[diag]	ONLY seq
	Void		ONLY void
	Com[void]	ONLY com
	Int		ONLY int:SORT
	Fmt		ONLY fmt:SORT
	Option[diag]	ONLY option:SORT

IMPORT	RepoName	ONLY unitName:SORT itemName:SORT
	RepoSource	ONLY locator:SORT

/* % The mode of a diagnostic may be either an error, a warning or a
hint.  An ordering on modes is defined. As smaller the mode, as more
harmfull the diagnostic.  */

TYPE mode == error limit warn hint 

     FUN fmtMode  : mode -> fmt
     FUN < =	  : mode ** mode -> bool
	 -- error < limit < warn < hint



/* % The source reference of a diagnostics may be represented in
several ways. The @code{freeRef} field specifies free-style
information.  */

TYPE ref ==
	freeRef		(descr	 : denotation)
	unitRef		(locator : locator,
			 unit	 : unitName)
	itemRef		(locator : locator,
			 item	 : itemName)
	textRef		(locator : locator)

     FUN fmtRef : ref -> fmt

/* % The empty diagnostic may be constructed by the function
@code{ok}.  The function @code{ok?} tests whether a diagnostic
consists only of harmless messages greater then @code{limit}. The
minimal mode of all messages may be also extracted by the function
@code{mode}.  It holds: @code{ok?(Diag) === limit < mode(Diag)}.  */

SORT diag
FUN ok		 : diag
FUN noDiag?	 : diag -> bool
FUN ok?		 : diag -> bool
FUN mode	 : diag -> mode
FUN ref		 : diag -> ref
FUN msg		 : diag -> denotation
FUN fmtDiag	 : diag -> fmt


/* % Creating a diagnostic which contains exactly one message is done
by the functions below. The forms with more then one denotation
interpret the first one as a pattern, in which occurences of @code{%s}
are substituted by the remaining arguments.  */

FUN !! : mode ** ref ** string -> diag
FUN !! : mode ** ref ** denotation -> diag
FUN !! : mode ** ref ** denotation ** denotation -> diag
FUN !! : mode ** ref ** denotation ** denotation ** denotation -> diag


/* % Two diagnostics are merged by the function @code{<+}. The mode of
the merged diagnostics is the minimum of both. The function
@code{flatten} decomposes a diagnostic into a sequence of diagnostics
each of which representing a single message.  */

FUN <+		: diag ** diag -> diag
FUN explode	: diag	       -> seq[diag]


/* % @code{failOnError(Diag)} prints out the given @code{Diag} to 
stdErr. The command then fails if @code{~(ok?(Diag))}: */

FUN failOnError : diag		-> com[void]
	-- OBSOLETE. See RepoComAbort


/* % @code{Fun transDiag Diag} performs a transformation of
the diagnostics @code{Diag} according to @code{Fun}. @code{Fun}
will be called with a singleton diagnostics. If
@code{Fun(Diag)} isn't avail, the according diagnostic
will be removed, otherwise it is replaced by the result (which
my be an arbitrary diagnostic, not only a singelton one). */

FUN transDiag	: (diag -> option[diag]) ** diag -> diag

/* % The function @code{shift(LineOffs, ColOffs, Diag)} shifts all locators
in the given diagnostics by the specified line and column offsets. 
It is based on shifting of references and locators. */

FUN shift	: int ** int -> diag -> diag
FUN shift	: int ** int -> ref -> ref
FUN shift	: int ** int -> locator -> locator
