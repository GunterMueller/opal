/* % This structure provides access functions on the level of objects
and local signatures. */

SIGNATURE RepoObjectAccess


IMPORT  Set[objectName,<]        ONLY set
        Set[localSignName,<]     ONLY set
        Seq[objectName]          ONLY seq
        Seq[object]              ONLY seq
        Option[objectName]       ONLY option
   
IMPORT  Repo                    ONLY repo:SORT
        RepoAn                  ONLY an:SORT
        RepoName                ONLY unitName:SORT 
                                     objectName:SORT
                                        < : objectName ** objectName -> bool
                                     localSignName:SORT
                                    < : localSignName ** localSignName -> bool
        RepoAbsy                ONLY object:SORT kind:SORT 
                                     expr:SORT fct:SORT impl:SORT


-- %$Local Signatures$ ===================================================

/* % @code{localSigns} returns the set of local signatures associated
with a unit: */

FUN localSigns  : unitName                  -> repo -> set[localSignName,<]


/* % @code{newLocalSign} adds a local signature to the given unit.
@code{copyLocalSign} copies a local signature to the same or another
unit , yielding a new signature name.  @code{newLocalObject} creates a
new local object in the given signature. The function
@code{removeObject} and @code{updateObject} defined above may be
transparently used to manipulate local objects. */

FUN newLocalSign   : unitName                  -> repo -> localSignName ** repo
FUN copyLocalSign  : unitName ** localSignName -> repo -> localSignName ** repo


/* % @code{an)} returns the annotation of a local signature,
@code{updateAn} updates it: */

FUN an             : localSignName              -> repo -> an
FUN updateAn       : localSignName ** (an -> an) -> repo -> repo


-- %$Objects$ ==============================================================

/* % The set of objects of a unit or local signature is retrieved by the 
function below: */

FUN objects     : unitName              -> repo -> set[objectName,<]
FUN objects     : localSignName         -> repo -> set[objectName,<]


/* % @code{newObjects} creates a number of global and @code{newLocalObjects} a
number of new local objects. @code{updateObject} updates any object and
@code{removeObject} removes any object: */

FUN newObjects   : unitName ** seq[object]      -> repo -> seq[objectName]
                                                                 ** repo
FUN newLocalObjects 
                 : localSignName ** seq[object] -> repo -> seq[objectName]
                                                                 ** repo

FUN updateObject : objectName ** (object -> object) -> repo -> repo
FUN removeObject : objectName                   -> repo -> repo


/* % @code{object(ObjName)} delivers the object associated with
the local or global @code{ObjName}: */

FUN object     : objectName                     -> repo  -> object


/* % The diverse components of an object can be directly accessed by
the functions below; some of them can be also updated: */

FUN impl        : objectName                    -> repo -> impl
FUN updateImpl  : objectName ** (impl -> impl)  -> repo -> repo

FUN an          : objectName                    -> repo -> an
FUN updateAn    : objectName ** (an -> an)      -> repo -> repo

FUN symbol      : objectName                    -> repo -> denotation
FUN kind        : objectName                    -> repo -> kind
FUN fct         : objectName                    -> repo -> fct 


/* % @code{substFct} returns the substitution of the functionality
of a given object name according to the instantiation of the
unit of the name (resp. the instantiation of the unit of a
local signature for a local object name). During substitution,
it might be necessary to derive new instances of units in the
repository which are transitively instantiated by the given names
unit. */

/*
FUN substFct    : objectName                    -> repo -> pair[fct,repo]
*/


/* %
 @code{actuals(ObjName)} is a shortcut for @code{actuals(unit(ObjectName))} for
common objectNames. In case of formal names the function delivers an empty
sequence.
 */
FUN actuals     : objectName                    -> repo -> seq[objectName]


/* % The predicates below give information about the kind of an object: */

FUN formal?     : objectName                    -> repo -> bool 
FUN oper?       : objectName                    -> repo -> bool 
FUN sort?       : objectName                    -> repo -> bool 
FUN constructor? : objectName                   -> repo -> bool
FUN selector?   : objectName                    -> repo -> bool
FUN test?       : objectName                    -> repo -> bool


-- %$Lookups$ =============================================================

/* % Look for all objects within given unit or local signature
with given symbol: */

FUN lookup      : unitName ** denotation        -> repo -> set[objectName,<]
FUN lookup      : localSignName ** denotation   -> repo -> set[objectName,<]

/* % Look for objects within unit or local signature with given symbol 
and kind: */

FUN lookup?     : unitName ** denotation ** kind -> repo -> option[objectName]
FUN lookup?     : localSignName ** denotation ** kind 
                                                -> repo -> option[objectName]

/* % Look for the name of @code{bool'BOOL:SORT} resp.
@code{denotation'DENOTATION:SORT} [missing: operations on bool and
denotation: */

FUN bool        :                                  repo  -> objectName
FUN denotation  :                                  repo  -> objectName


