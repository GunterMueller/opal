IMPLEMENTATION RepoNameConv

IMPORT  Denotation      COMPLETELY
        Seq             COMPLETELY
        SeqIndex        COMPLETELY
        SeqFilter       COMPLETELY
        SeqMap          COMPLETELY
        SeqSort         COMPLETELY
        String          COMPLETELY
        StringConv      COMPLETELY
        Option          COMPLETELY
        ABORT           COMPLETELY
        Id              COMPLETELY
        NatConv         COMPLETELY
        Nat             COMPLETELY
        Char            COMPLETELY
        Com             COMPLETELY
        ComCompose      COMPLETELY
        ComSeqMap       COMPLETELY
        StringIndex     COMPLETELY
        Set             COMPLETELY
        SetConv         COMPLETELY
        SetMap          COMPLETELY
        SetReduce       COMPLETELY

IMPORT
        DenoScanBasic   COMPLETELY
        DenoScanOp      COMPLETELY
        DenoScanCompose COMPLETELY
        DenotationSplit COMPLETELY

IMPORT
        RepoAbsy        COMPLETELY
        RepoUnitAccess  COMPLETELY
        RepoObjectAccess COMPLETELY
        RepoName        COMPLETELY
        RepoCom         COMPLETELY
        RepoCom1        COMPLETELY
        RepoFocus       COMPLETELY

IMPORT
        Argspec         COMPLETELY
        ArgspecBasic    COMPLETELY
        ArgspecOp       COMPLETELY
        ArgspecCompose  COMPLETELY

DATA style ==
        numeric symbolic

-- % unitName

DEF asDeno(Style)(N:unitName) == query(asDeno(Style)(N))

DEF asDeno(numeric)(UName)(R) ==
        "#"++ `(no(internId(UName)))

DEF asDeno(symbolic)(UName)(R) ==
    symbol(UName)(R) ++ "." ++ asDeno(symbolic)(part(UName))(R)
                   
FUN asUnitName          : denotation    -> com[unitName]
DEF asUnitName(D) ==
    query(\\R.yield(forgetEmpty(decodeUnitName(R))(D)))

  FUN decodeUnitName : repo -> denotation -> ans[pair[unitName,denotation]]
  DEF decodeUnitName(R)(D) == 
   ((lit("#")                                   o (\\ _ .
     nat                                        o (\\No.
     okay(internUnitName(id(No)))               ))) |
    (*(char(_ |= !(".")))                       o (\\StructChars.
     lit(".")                                   o (\\ _ .
     decodePart                                 o (\\Part.
     LET OptUName == lookup?(`(asString(StructChars)),Part)(R)
     IN IF OptUName avail?
          THEN okay(cont(OptUName))
          ELSE fail("unknown unit '"++D++"'")
        FI                                      ))))
   )(D)

FUN unitNameSpec   : argspec[unitName]
DEF unitNameSpec == 
    var("<UNITNAME>",unitNameCompleter)         & (\\Den.
    asUnitName(Den)                             ; (\\Ans.
    IF Ans okay?
      THEN yield(Ans)
      ELSE break("- unit name expected instead of `"++Den++"'\n")
    FI                                          ))

FUN unitNameCompleter : denotation -> com[set[denotation,<]]
DEF unitNameCompleter(Arg) ==
    query(units)                                & (\\UNames.(
    IF "#" <| Arg
      THEN asDeno(numeric) *& asSeq(UNames)
      ELSE asDeno(symbolic) *& asSeq(UNames)
    FI)                                         & (\\Dens.
    succeed(asSet((Arg <| _) | Dens))           ))

-- % itemName

DEF asDeno(St)(N:itemName) == 
    query(asDeno(St)(N))

DEF asDeno(St)(itemName(No,UName))(R) == 
    asDeno(St)(UName)(R) ++ "/item" ++ `(No)


DEF asItemName(Str) ==
    query(\\R.yield(forgetEmpty(    
      decodeUnitName(R)                         o (\\UName.
      lit("/item")                              o (\\ _ .
      nat                                       o (\\No.
      okay(itemName(No,UName))                  )))
    )(Str)))

DEF itemNameSpec == 
    var("<ITEMNAME>")                           & (\\Den.
    asItemName(Den)                             ; (\\Ans.
    IF Ans okay?
      THEN yield(Ans)
      ELSE break("- item name expected instead of `"++Den++"'\n")
    FI                                          ))

-- % pragmaName

DEF asDeno(St)(N:pragmaName) == query(asDeno(St)(N))

DEF asDeno(St)(pragmaName(No,UName))(R) == 
    asDeno(St)(UName)(R) ++ "/pragma" ++ `(No)

DEF asPragmaName(Str) ==
    query(\\R.yield(forgetEmpty(    
      decodeUnitName(R)                         o (\\UName.
      lit("/pragma")                            o (\\ _ .
      nat                                       o (\\No.
      okay(pragmaName(No,UName))                  )))
    )(Str)))

DEF pragmaNameSpec == 
    var("<PRAGMANAME>")                         & (\\Den.
    asPragmaName(Den)                           ; (\\Ans.
    IF Ans okay?
      THEN yield(Ans)
      ELSE break("- pragma name expected instead of `"++Den++"'\n")
    FI                                          ))


-- % propertyName

DEF asDeno(St)(N:propertyName) == query(asDeno(St)(N))

DEF asDeno(St)(propertyName(No,UName))(R) == 
    asDeno(St)(UName)(R) ++ "/property" ++ `(No)

DEF asPropertyName(Str) ==
    query(\\R.yield(forgetEmpty(    
      decodeUnitName(R)                         o (\\UName.
      lit("/property")                          o (\\ _ .
      nat                                       o (\\No.
      okay(propertyName(No,UName))                  )))
    )(Str)))

DEF propertyNameSpec == 
    var("<PROPERTYNAME>")                       & (\\Den.
    asPropertyName(Den)                         ; (\\Ans.
    IF Ans okay?
      THEN yield(Ans)
      ELSE break("- property name expected instead of `"++Den++"'\n")
    FI                                          ))


-- % localSignName

DEF asDeno(St)(N:localSignName) == query(asDeno(St)(N))

DEF asDeno(St)(localSignName(No,UName))(R) == 
    asDeno(St)(UName)(R) ++ "/locsig" ++ `(No)

DEF asLocalSignName(D) ==
    query(\\R.yield(forgetEmpty(decodeLocalSignName(R))(D)))

  FUN decodeLocalSignName : repo -> denotation -> 
                ans[pair[localSignName,denotation]]
  DEF decodeLocalSignName(R) ==
      decodeUnitName(R)                         o (\\UName.
      lit("/locsig")                            o (\\ _ .
      nat                                       o (\\No.
      okay(localSignName(No,UName))             )))
        

DEF localSignNameSpec == 
    var("<LOCALSIGNNAME>")                      & (\\Den.
    asLocalSignName(Den)                        ; (\\Ans.
    IF Ans okay?
      THEN yield(Ans)
      ELSE break("- local signature name expected instead of `"++Den++"'\n")
    FI                                          ))


-- % objectName

DEF asDeno(St)(N:objectName) == query(asDeno(St)(N))

DEF asDeno(symbolic)(N AS globalObjectName(No,UName))(R) == 
    LET Cands == lookup(baseName(UName), symbol(N)(R))(R)
    IN
    IF #(Cands) = 1 THEN
        symbol(N)(R) ++ "'" ++ symbol(UName)(R)
    ELSE
        LET Pos? == pos(N = _, msort(\\O1, O2. no(O1) < no(O2))(asSeq(Cands)))
        IN
        symbol(N)(R) ++ "'" ++ symbol(UName)(R) ++ "," ++ `(cont(Pos?))
    FI

DEF asDeno(numeric)(N AS globalObjectName(No,UName))(R) == 
    asDeno(numeric)(UName)(R) ++ "/glob" ++ `(No)       


DEF asDeno(St)(localObjectName(No,LocSig))(R) == 
    asDeno(St)(LocSig)(R) ++ "/local" ++ `(No)


FUN asObjectName          : denotation    -> com[objectName]
DEF asObjectName(Str) ==
    query(\\R.yield(forgetEmpty(    
      (decodeUnitName(R)                        o (\\UName.
       lit("/glob")                             o (\\ _ .
       nat                                      o (\\No.
       okay(globalObjectName(No,UName))         )))) |
      (decodeLocalSignName(R)                   o (\\LocSig.
       lit("/local")                            o (\\ _ .
       nat                                      o (\\No.
       okay(localObjectName(No,LocSig))         ))))
    )(Str)))

FUN objectNameSpec   : argspec[objectName]
DEF objectNameSpec == 
    var("<OBJECTNAME>",objectNameCompleter)     & (\\Deno.
    objectCands(Deno)                           & (\\ONames.
    IF #(ONames) = 1 THEN
        succeed(arb(ONames)) -- take the unique object
    ELSE
        asObjectName(Deno)                      ; (\\Ans.
        IF Ans okay?
          THEN yield(Ans)
          ELSE break("- (unique) object name expected "++
                     "instead of `"++Deno++"'\n")
        FI                                      )
    FI                                          ))

DEF objectNamesSpec == 
    var("<OBJECTNAME>",objectNameCompleter)     & (\\Deno.
    objectCands(Deno)                           & (\\ONames.
    asObjectName(Deno)                          ; (\\Ans.
    IF okay?(Ans)
      THEN succeed(data(Ans) incl ONames)
      ELSE succeed(ONames)
    FI                                          )))

FUN objectCands : denotation                    -> com[set[objectName,<]]
DEF objectCands(Deno) ==
    succeed(split(Deno, \\Ch. Ch = !("'")))     & (\\Parts.(
    IF #(Parts) = 2
      THEN query(lookup?(ft(rt(Parts)), impl))  & (\\OptUName.
           IF OptUName avail?
             THEN succeed(cont(OptUName))
             ELSE break("")
           FI                                   )
    IF #(Parts) = 1
      THEN focus
      ELSE break("")
    FI)                                         ; (\\AnsUName.
    IF AnsUName okay?
      THEN query(library?(data(AnsUName)))      & (\\Library? .
           IF Library?
             THEN -- use signature (impl is empty)
                  query(lookup(data(AnsUName) :=_part sign,ft(Parts)))
             ELSE query(lookup(data(AnsUName),ft(Parts)))
           FI                                   )
      ELSE succeed({})  -- empty set on error
    FI                                          ))
    
FUN objectNameCompleter : denotation -> com[set[denotation,<]]
DEF objectNameCompleter(Deno) == 
    succeed({})
-- FIXME: implement function above
--    query(\\R. (\\O. symbol(O)(R) ++ "'" ++ symbol(unit(O))(R))
--                      * objectCands(Deno)(R))

-- ============================================
-- objectName -----
/* FUN asDeno : itemName -> denotation

FUN decode : repo -> denotation -> ans[objectName]
DEF decode(R) ==
    forgetEmpty(
      (decodeUnitName(R)                        o (\\UName.
       lit("/glob")                             o (\\ _ .
       nat                                      o (\\No.
       okay(globalObjectName(No,UName))         )))) |
      (decodeLocalSignName(R)                   o (\\LocSig.
       lit("/locl")                             o (\\ _ .
       nat                                      o (\\No.
       okay(localObjectName(No,LocSig))         ))))
    )

FUN pretty : repo -> objectName -> denotation
DEF pretty(R)(globalObjectName(No,UName)) == 
        pretty(R)(UName) ++ (!("/glob") ++ !(No`))
DEF pretty(R)(localObjectName(No,LocSig)) ==       -- #xxx/locSigyyy/loclzzz
        pretty(R)(LocSig) ++ (!("/locl") ++ !(No`))
*/



-- % part

DEF asDeno(St)(P:part) == query(asDeno(St)(P))

DEF asDeno(_)(sign)(R) == "sign"
DEF asDeno(_)(impl)(R) == "impl"

FUN asPart    : denotation    -> com[part]
DEF asPart(D) == yield(forgetEmpty(decodePart)(D))

  FUN decodePart : denotation -> ans[pair[part,denotation]]
  DEF decodePart == 
    (lit("sign") o (\\ _ . okay(sign))) |
    (lit("impl") o (\\ _ . okay(impl)))


-- % opal names

DEF opalName(N AS localObjectName(_,_))(R) ==
    symbol(N)(R)++" : "++opalKind(kind(N)(R))(R)
DEF opalName(N AS globalObjectName(_,_))(R) ==
    symbol(baseName(N))(R)++"'"++
    (IF formal?(N)(R) THEN
        symbol(baseName(unit(N)))(R)
     ELSE opalOrigin(unit(N))(R) FI) ++
    " : " ++
    opalKind(kind(N)(R))(R)

DEF opalOrigin(N)(R) ==
    IF derivedUnitName?(N) THEN
        LET Actuals == actuals(N)(R)
        IN 
        symbol(baseName(N))(R) ++
        "[" ++ join((\\A. opalName(A)(R)) * Actuals,",") ++ "]"
    ELSE
        symbol(baseName(N))(R)
    FI

DEF opalKind(sort)(_) == "SORT"
DEF opalKind(oper(Fct))(R) == opalFct(Fct)(R)
DEF opalKind(other(id,_))(_) == "other[" ++ id ++ "]"

DEF opalFct(name(Sort))(R) ==  opalName(Sort)(R)
DEF opalFct(cart(Elems))(R) == 
        "("++join((\\F. opalFct(F)(R)) * Elems," ** ")++")"
DEF opalFct(funct(D,C))(R) == 
        "("++opalFct(D)(R)++" -> "++opalFct(C)(R)++")"

