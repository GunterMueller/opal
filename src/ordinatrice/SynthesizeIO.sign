-- % High-Level-Funktionen, angelehnt an Opal-Syntax
SIGNATURE SynthesizeIO

  IMPORT InterOpal ONLY interOpal:SORT origin:SORT inst:SORT
			kind:SORT ident:SORT struct:SORT object:SORT
			name: SORT eqn:SORT fct:SORT var:SORT
			< 
	Map[ident,<,object] ONLY map 
	Map[inst,<,seq[name]] ONLY map
	Seq[name] ONLY seq
	Seq[eqn] ONLY seq
	Seq[fct] ONLY seq
	Seq[var] ONLY seq
	Nat ONLY nat


/* %falls keine Struktur @code{denotation} importiert wird, wird ein leerer
Import dieser uninstantiierten Struktur hinzugef"ugt. In jedem Fall wird der
Origin dieser Struktur zurückgegeben. */

FUN addNewImport: interOpal ** denotation -> interOpal ** origin

/* % @code{(IO,or,in) addIMPORT ("den", kind)} fuegt den ONLYS von Import mit origin @code{or} und Instanz @code{in} ggf. den Namen @code{den} mit kind @code{kind} hinzu. 

Liefert das ggf. geaenderte InterOpal und den Ident des gefragten Namens */

FUN addIMPORT: interOpal ** origin ** inst ** 
		denotation ** kind -> interOpal ** ident

/* % @code{IO addFUN ("den", k)} fuegt der Hauptstruktur ein neues Objekt
mit Namen @code{den} und Kind @code{k} hinzu, liefert neues @code{interOpal} und passenden @code{ident} zurueck */

FUN addFUN: interOpal ** denotation ** kind -> interOpal ** ident

/* %@code{IO addDEF (id, eqns)} fuegt den Objekt die Gleichungen hinzu,
Implementation muss @code{missing} oder @code{def(eqns)} sein. */

FUN addDEF: interOpal ** ident ** seq[eqn] -> interOpal



/* %$Low-Level-Funktionen auf InterOpal-Ebene$ */
/* % definiert @code{struct} neu */
FUN upd_struct: interOpal ** origin ** struct -> interOpal
/* % aendert objs-Eintrag */
FUN upd_objs: struct ** map[ident,<,object] -> struct
/* % aendert onlys-Eintrag */
FUN upd_onlys: struct ** map[inst,<,seq[name]] -> struct

/* %@code{newIdent(s)} liefert @code{ident}, der in @code{s} nicht vorkommt */
FUN newIdent: struct -> ident

/* %@code{newOrigin} liefert Origin, der neu ist. */
FUN newOrigin: interOpal -> origin

/* % fuegt name hinzu, falls noch nicht enthalten */
FUN addToOnlys: seq[name] ** name -> seq[name]

/* % erzeugt zu einer Sequenz von Funktionaliaeten eine Sequenz von lokalen 
Variablen. Numerierung startet wie angegeben, f sagt, wie man aus der Nummer 
ein Symbol macht. Zurueckgegeben wird die naechste freie Nummer */
FUN asVarSeq: seq[fct] ** nat ** (nat -> denotation) -> nat ** seq[var]
