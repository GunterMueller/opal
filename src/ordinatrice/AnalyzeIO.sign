/* %Funktionen auf InterOpal, die Informationen über InterOpal oder Teile davon
liefern */
SIGNATURE AnalyzeIO

IMPORT InterOpal ONLY inst:SORT kind:SORT name:SORT fct:SORT ident:SORT 
		      origin:SORT pos:SORT variant:SORT struct:SORT
		      interOpal:SORT object:SORT comp:SORT
       Seq[name] ONLY seq
	Seq[pos] ONLY seq
       Option[struct] ONLY option
	Option[ident] ONLY option

/* %$Funktionen auf einer ganzen Struktur$ */
/* % die Parameter der Struktur, leer, falls nicht parametrisiert */
FUN parameter: interOpal ** origin -> seq[name]

FUN parameter: interOpal ** origin ** inst -> seq[name]

/* %$Suchfunktionen$ */
/* % suche Struktur mit angegebenen Strukturnamen */
FUN find?: interOpal ** denotation -> option[struct] 

/* % suche Objekt mit angegebenem Namen und Kind in Struktur origin */
FUN find?: interOpal ** origin ** denotation ** kind -> option[ident]

/* %$ Funktionen auf fct $ */
/* % vgl. zwei Funktionalitaeten, wobei @code{formal ~ inst(x)} gilt */
FUN ~ : fct ** fct -> bool

/* % vgl. richtig */
FUN = : fct ** fct -> bool

/* %$ Funktionen auf ident $ */
FUN = : ident ** ident -> bool

FUN objOf: interOpal -> origin -> ident -> object

/* % Ordnung */
-- this is output of ordinatrice orange for free type fct
FUN < : fct ** fct -> bool

/* %$ Funktionen auf inst $ */
/* % vgl. zwei Instanzen, wobei @code{formal ~ inst(x)} gilt */
FUN ~ : inst ** inst -> bool
/* % vgl. richtig */
FUN = : inst ** inst -> bool

/* %$ Funktionen auf kind $ */
/* % vgl. zwei kinds, wobei @code{formal ~ inst(x)} fuer Instanzen gilt */

FUN ~ : kind ** kind -> bool

/* % vgl. richtig */
FUN = : kind ** kind -> bool


/* %$ Funktionen auf name $ */
/* %vgl. zwei Namen, wobei @code{formal ~ inst(x)} fuer Instanzen gilt */
FUN ~ : name ** name -> bool
/* % vgl. richtig */
FUN = : name ** name -> bool

/* % bezeichnet Name eine Sorte? */
FUN sort?: interOpal -> name -> bool

/* % zu einem Namen zugeordnete Funktionalitaet */
FUN fctOf: interOpal -> name -> fct

/* % zu einem Namen gehoerendes Objekt */
FUN objOf: interOpal -> name -> object

/* %$ Funktionen auf origin $ */
FUN = : origin ** origin -> bool

/* %$ Funktionen auf pos $ */
/* % alternativer Name fuer @code{unknown} bzw. @code{%(unknown)} */
FUN ? : pos
FUN ? : seq[pos]
FUN = : pos ** pos -> bool

/* %$Funktionen auf variant$ */
/* % alle Sorten des Konstruktors */
FUN sortsIn: interOpal -> variant -> seq[name]

/* %$Funktionen auf comp$ */
FUN = : comp ** comp -> bool


