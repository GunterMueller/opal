IMPLEMENTATION InterOpalMap

IMPORT
    Map	    COMPLETELY
    MapMap  COMPLETELY
    Nat	    COMPLETELY
    Option  COMPLETELY
    Seq	    COMPLETELY
    SeqMap  COMPLETELY
    InterOpal	COMPLETELY
		       

FUN * : (name -> name) ** interOpal -> interOpal
DEF f * interOpal(part,structs) == interOpal(f * part, (\\s. f * s) * structs)

-- ============================================================================

DEF _ * signature == signature
DEF _ * extProperties == extProperties
DEF _ * implementation == implementation
DEF _ * intProperties == intProperties

-- ============================================================================
DEF f * struct(pos, origin, symbol, insts, onlys, objs, props, prags ) ==
    struct((\\s. f * s ) * pos, origin, symbol, (\\s. f * s ) * insts, 
       (\\s. f * s )  * onlys, (\\s. f * s ) * objs, 
       (\\s. f * s ) * props,  (\\s. f * s ) * prags) 

-- ============================================================================
DEF f * freeType(pos, ident, sort, variants, prags) ==
    freeType(f * pos, ident, f * sort, (\\s. f * s ) * variants,
             (\\s. f * s ) * prags)
DEF f * law(pos, ident, symbol, formula, prags) ==
    law(f * pos, ident, symbol, f * formula, (\\s. f * s) * prags)
DEF f * other(pos, id, data, prags) ==
  other(f * pos, id, data, (\\s. f * s) * prags)
      
-- ============================================================================
DEF f * dfd(pos, expr) == dfd(f * pos, f * expr)
DEF f * approx(pos, left, right) == approx(f * pos, f * left, f * right)
DEF f * cong(pos, left, right) == cong(f * pos, f * left, f * right)
DEF f * neg(pos, formula) == neg(f * pos, f * formula)
DEF f * conj(pos, left, right) == conj(f * pos, f * left, f * right)
DEF f * disj(pos, left, right) == disj(f * pos, f * left, f * right)
DEF f * impl(pos, premise, conclusion) ==
    impl(f * pos, f * premise, f * conclusion)
DEF f * equiv(pos, left, right) == equiv(f * pos, f * left, f * right)
DEF f * forall(pos, vars, range) == 
    forall(f * pos, (\\s. f * s )  * vars, f * range)
DEF f * exist(pos, vars, range) == 
    exist(f * pos, (\\s. f * s )  * vars, f * range)
DEF f * informal(pos, txt) == informal(f * pos, txt)
DEF f * other(pos, id, data) == (other(f * pos, id, data)):formula
      
      
-- ============================================================================
DEF f * object(pos, ident, symbol, kind, def, props, prags) ==
    object((\\s. f * s ) * pos, ident, symbol, f * kind, f * def, props, (\\s. f* s) * prags)

-- ============================================================================
DEF _ * missing == missing
DEF _ * imported == imported
DEF f * parameter(pos, no) == parameter(f * pos, no)	
DEF f * induced(pos, sort) == induced(f * pos, f * sort)
DEF f * data(variants) == data((\\s. f * s )  * variants)
DEF f * def(eqns) == def((\\s. f * s )	* eqns)
DEF f * other(pos, id, data) == (other(f * pos, id, data)):impl

-- ============================================================================
DEF f * variant(pos, cons, test, comps) ==
    variant(f * pos, f * cons, f * test, (\\s. f * s ) * comps)

-- ============================================================================
DEF f * comp(pos, sel) == comp(f * pos, f * sel)
	
-- ============================================================================
DEF f * eqn(pos, lhs, patterns, rhs) ==
    eqn(f * pos, f * lhs, (\\s. f * s ) * patterns, f * rhs)

-- ============================================================================
DEF f * any( pos) == any(f * pos)
DEF f * (name(pos, nm)):pattern == name(f * pos, f * nm)
DEF f * var(pos, v) == var(f * pos, f * v)
DEF f * as(pos, var, pattern) == as(f * pos, f * var, f * pattern)
DEF f * apply(pos, funct:pattern, arg) == apply(f * pos, f * funct, f * arg)
DEF f * tuple(pos, elems:seq[pattern]) == tuple(f * pos, (\\s. f * s ) * elems)

-- ============================================================================
DEF f * var(pos, ident, symbol, fct) ==
    var(f * pos, ident, symbol, f * fct)

-- ============================================================================
DEF f * (name(pos, nm)):expr == name(f * pos, f * nm)
DEF f * den(pos, rep) == den(f * pos, rep)  
DEF f * tuple(pos, elems:seq[expr]) == tuple(f * pos, (\\s. f * s ) * elems)
DEF f * apply(pos, funct:expr, arg) == apply(f * pos, f * funct, f * arg)
DEF f * cases(pos, guards, else) == 
    cases(f * pos, (\\s. f * s ) * guards, 
      IF else avail? THEN avail(f * cont(else)) ELSE nil FI)
DEF f * lambda(pos, vars, body) == 
    lambda(f * pos, (\\s. f * s )  * vars, f * body)
DEF f * block(pos, eqns, body) == 
    block(f * pos, (\\s. f * s ) * eqns, f * body)

-- ============================================================================
DEF f * guard(pos, if, then) == guard(f * pos, f * if, f * then)

-- ============================================================================
DEF _ * sort == sort
DEF f * fct(fc) == fct( f * fc)

-- ============================================================================
DEF f * sort(s) == sort(f * s)
DEF f * cart( elems) == cart((\\s. f * s ) * elems)
DEF f * funct(dom, codom) == funct(f * dom, f * codom)

-- ============================================================================
DEF _ * unknown == unknown
DEF f * part(p) == part(f * p)
DEF f * pos(part, row, col) == pos(f * part, row, col)
DEF f * region(part, row, col, endRow, endCol) ==
  region(f * part, row, col, endRow, endCol)

-- ============================================================================
DEF f * name:name == f(name)
--  name(f * ident, f * origin, f * inst)
-- ============================================================================
DEF f * pragma(items) == pragma((\\s. f * s) * items)

FUN * : (name -> name) ** pragmaItem -> pragmaItem
DEF f * objects(names) == objects(f * names)
DEF _ * token(p,txt) == token(p, txt)
