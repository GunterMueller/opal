IMPLEMENTATION kdIOproperty
-- $Id$

IMPORT InterOpal COMPLETELY
	Map COMPLETELY
	MapReduce ONLY / 
	Seq ONLY seq <> :: forall?
	SeqFilter ONLY |
	SeqMap ONLY * 
	SeqReduce ONLY /
	Set ONLY set incl + {}
	SetConv ONLY asSet
	SetReduce ONLY /

	kdIOname ONLY objOf propOf ` 
	kdIOvariant ONLY sortsOf

	DEBUG ONLY PRINT string
	Denotation ONLY ++
	
	

DEF typesOf(IO)(orig) == 
	LET addfreetype == \\p,sp. IF p freeType? THEN p :: sp ELSE sp FI
	IN (addfreetype, <>) / props(structs(IO)!orig)

DEF flat?(IO)(freeType(_,_,_,vs,_)) ==
	LET fctlist == fct * kind * objOf(IO) * cons * vs
	    domofnonconsts == dom * (funct? | fctlist)
	IN forall?(flat?(IO), domofnonconsts)

FUN flat?: interOpal -> fct -> bool
DEF flat?(_)(sort(_)) == true
DEF flat?(IO)(cart(elems)) == forall?(flat?(IO), elems)
DEF flat?(_)(funct(_,_)) == false


FUN flat?: interOpal -> object -> bool
DEF flat?(IO)(ob) == 
	LET vs == variants(def(ob))
	    fctlist == fct * kind * objOf(IO) * cons * vs
	    domofnonconsts == dom * (funct? | fctlist)
	IN forall?(flat?(IO), domofnonconsts)

DEF sortsIn(IO)(freeType(_,_,s,vs,_)) == incl(s, (+, {}) / (sortsOf(IO) * vs))

