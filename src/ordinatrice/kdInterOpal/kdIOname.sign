SIGNATURE kdIOname
-- $Id$

IMPORT InterOpal ONLY name:SORT interOpal:SORT object:SORT property:SORT
			kind:SORT fct:SORT
	Option[name] ONLY option

/* % textuelle Darstellung eines Namens */
FUN ` : interOpal -> name -> denotation

/* % desgl. mit origin */
FUN `` : interOpal -> name -> denotation

/* % desgl. mit Parameterliste */
FUN `_p : interOpal -> name -> denotation

FUN txt: name -> denotation

/* % liefert Namen der zugeh. Struktur */
FUN `_o : interOpal -> name -> denotation

/* % zugeordnetes Objekt finden */

FUN objOf : interOpal -> name -> object

FUN propOf: interOpal -> name -> property

/* % nameOf(IO)(base, orig, kind) sucht Namen base'orig:kind in IO */
FUN nameOf: interOpal -> denotation ** denotation ** kind -> option[name]

/* % wie oben, gibt einen Namen zurueck, auf den Praedikat zutrifft */
FUN nameOf: interOpal -> denotation ** denotation ** (kind -> bool)
	-> option[name]

FUN nameOfbool: interOpal -> name
FUN nameOftrue: interOpal -> name
FUN nameOffalse: interOpal -> name

/* % beide names aus derselben interOpal-Struktur */
FUN = : name ** name -> bool


-- ehemals kdIOkind

  /* % kinds muessen aus derselben interopal-struktur stammen */
  FUN ~ : kind ** kind -> bool


-- ehemals kdIOfct

IMPORT  Seq[name] ONLY seq

/* % klopft die Funktionalitaet "flach", Reihenfolge wird beibehalten */
FUN sortsIn: fct -> seq[name]

FUN ` : interOpal -> fct -> denotation

/* % fct sind aequivalent, wenn struktur uebereinstimmt
	und Sorten uebereinstimmen - beide fct muessen aus derselben
	interopal-Struktur stammen
*/
FUN ~ : fct ** fct -> bool
