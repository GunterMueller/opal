IMPLEMENTATION ShortCutsIO
-- $Id$

IMPORT  InterOpal COMPLETELY
	AnalyzeIO ONLY ?
	Seq ONLY seq %
	SeqMap ONLY *

/* % $Pattern$ */


/* % liefert pattern von Konstruktor, alle Positionen mit @code{any} belegt */
-- FUN asAnyPattern: variant -> pattern
DEF asAnyPattern(variant(_,cons,_,comps)) == 
	apply(?,name(?,cons),tuple(?,(\\ _ .any(?)) * comps))

/* % aehnlich: tuple, das zu jedem Namen ein @code{any} enthaelt */
-- FUN asAnyPattern: seq[name] -> pattern
DEF asAnyPattern(ns) == tuple(?, (\\ _ . any(?)) * ns)

/* % erzeugt Pattern fuer binaere Funktion */
-- FUN @ : pattern ** pattern ** pattern -> pattern
DEF fun @ (left, right) == apply(?, fun, tuple(?, %(left, right)))

/* % ebenso, aber bekommt Namen, aus dem Pattern erzeugt wird */
-- FUN @ : name ** pattern ** pattern -> pattern
DEF funname @ (left:pattern, right) == 
	name(?, funname) @ (left, right)

/* % ebenso, bekommt aber pattern schon geliefert */
-- FUN @ : name ** pattern -> pattern
DEF funname @ arg:pattern == apply(?, name(?, funname), arg)

/* % macht aus Konstruktor und Variablenlisten Konstruktorpattern */
-- FUN cons: variant ** seq[var] -> pattern
DEF cons(v, vs) == cons(v) @ (tuple(?, var(?, _) * vs))



/* % $Equations$ */

/* % erzeugt aus @code{pattern} und @code{expr} eine Gleichung, wobei 
@code{pattern} auch einziges Best-Fit-Pattern ist. */
FUN ==== : pattern ** expr -> eqn
DEF p ==== ex == eqn(?, p, %(p), ex)

/* % ebenso, rechte Seite ist aber Name */
FUN ==== : pattern ** name -> eqn
DEF p ==== na 	==  p ==== name(?, na)

/* % erzeugt Gleichung; bekommt Funktionsnamen und zwei Varianten fuer die 
	linke Seite und einen Namen fuer die rechte Seite */
FUN ==== : name ** variant ** variant ** name -> eqn
DEF (fun, left, right) ==== na    == 
	fun:name @ (asAnyPattern(left), asAnyPattern(right)) ==== na

/* % ebenso, linke Seite ist schon Pattern */
FUN ==== : pattern ** variant ** variant ** name -> eqn
DEF (fun, left, right) ==== na    ==
	fun:pattern @ (asAnyPattern(left), asAnyPattern(right)) ==== na


/* % $Expressions und Guards$ */

/* % wendet Ausdruck auf die beiden uebergebenen Variablen an */
FUN @ : expr ** var ** var -> expr
DEF fun @ (lv, rv) == apply(?, fun, tuple(?, %(asExpr(lv), asExpr(rv))))

/* % ebenso, erster Ausdruck ist Name */
FUN @ : name ** var ** var -> expr
DEF funname @ (lv, rv) == 
	apply(?, name(?, funname), tuple(?, %(asExpr(lv), asExpr(rv))))

/* % ebenso, zweiter Ausdruck ist schon expr */
FUN @ : name ** expr -> expr
DEF funname @ ex:expr == apply(?, name(?, funname), ex)


/* % macht aus zwei Ausdruecken einen Guard */
FUN then : expr ** expr -> guard
DEF ifexpr then thenexpr == guard(?, ifexpr, thenexpr)

/* % ebenso, zweiter Ausdruck ist Name */
FUN then: expr ** name -> guard
DEF ifexpr then thenname == guard(?, ifexpr, name(?, thenname))

/* % macht Ausdruck aus Variable */
FUN asExpr: var -> expr
DEF asExpr(var(_,id,_,_)) == name(?, name(id, local, none))
