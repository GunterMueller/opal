/* %Abkürzungen für InterOpal-Ausdrücke */

SIGNATURE ShortCutsIO
-- $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/src/ordinatrice/ShortCutsIO.sign,v 1.1.1.1 1998-06-16 16:00:45 wg Exp $

IMPORT InterOpal ONLY variant:SORT pattern:SORT name:SORT var:SORT expr:SORT 
		      eqn:SORT guard:SORT

	Seq[var] ONLY seq
	Seq[name] ONLY seq


/* %$Pattern$ */


/* % liefert pattern von Konstruktor, alle Positionen mit @code{any} belegt */
FUN asAnyPattern: variant -> pattern

/* % aehnlich: tuple, das zu jedem Namen ein @code{any} enthaelt */
FUN asAnyPattern: seq[name] -> pattern

/* % erzeugt Pattern fuer binaere Funktion */
FUN @ : pattern ** pattern ** pattern -> pattern

/* % ebenso, aber bekommt Namen, aus dem Pattern erzeugt wird */
FUN @ : name ** pattern ** pattern -> pattern

/* % ebenso, bekommt aber pattern schon geliefert */
FUN @ : name ** pattern -> pattern

/* % macht aus Konstruktor und Variablenlisten Konstruktorpattern */
FUN cons: variant ** seq[var] -> pattern


/* %$Equations$ */

/* % erzeugt aus @code{pattern} und @code{expr} eine Gleichung, wobei 
@code{pattern} auch einziges Best-Fit-Pattern ist. */
FUN ==== : pattern ** expr -> eqn

/* % ebenso, rechte Seite ist aber Name */
FUN ==== : pattern ** name -> eqn

/* % erzeugt Gleichung; bekommt Funktionsnamen und zwei Varianten fuer die 
	linke Seite und einen Namen fuer die rechte Seite */
FUN ==== : name ** variant ** variant ** name -> eqn

/* % ebenso, linke Seite ist schon Pattern */
FUN ==== : pattern ** variant ** variant ** name -> eqn


/* %$Expressions und Guards$ */

/* % wendet Ausdruck auf die beiden uebergebenen Variablen an */
FUN @ : expr ** var ** var -> expr

/* % ebenso, erster Ausdruck ist Name */
FUN @ : name ** var ** var -> expr

/* % ebenso, zweiter Ausdruck ist schon expr */
FUN @ : name ** expr -> expr

/* % macht aus zwei Ausdruecken einen Guard */
FUN then : expr ** expr -> guard

/* % ebenso, zweiter Ausdruck ist Name */
FUN then: expr ** name -> guard

/* % macht Ausdruck aus Variable */
FUN asExpr: var -> expr


