SIGNATURE Expr

IMPORT  Real    ONLY    real
        Nat     ONLY    nat

TYPE xyExpr ==  xyExpr(theExpr:expr, varNum: nat)
                error(msg: denotation)

TYPE expr ==    binop(op: operator, left: expr, right: expr)
                unop (op: operator, arg: expr)
                number(theNumber: real)
                pi
                varx vary
                error(msg: denotation)

TYPE operator == add sub mul div pow
                 sin cos exp log abs neg sqrt
    
FUN subst : expr ** (expr->bool) ** expr -> expr

FUN asDeno: xyExpr -> denotation
FUN asDeno: expr -> denotation
FUN asDeno: operator -> denotation