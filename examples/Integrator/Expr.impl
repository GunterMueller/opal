IMPLEMENTATION Expr

IMPORT  Real    ONLY    real + - * / pow sin cos exp ln = > 0 pi
        RealConv ONLY   ``
        Nat     ONLY    nat 6
        NatConv ONLY    `
        Denotation ONLY ++

DATA xyExpr ==  xyExpr(theExpr:expr, varNum: nat)
                error(msg: denotation)

DATA expr == binop(op: operator, left: expr, right: expr)
             unop (op: operator, arg: expr)
             number(theNumber: real)
             pi
             varx vary
             error(msg: denotation)

DATA operator == add sub mul div pow
                 sin cos exp log abs neg sqrt


DEF asDeno(xyExpr(e,vn)) ==
  (vn`) ++ " Variables\n" ++ asDeno(e)
DEF asDeno(x: xyExpr) == "ERROR: " ++ msg(x)

DEF asDeno(binop(op, l, r)) ==
  "(" ++ asDeno(op) ++ " " ++ asDeno(l) ++ " " ++ asDeno(r) ++ ")"
DEF asDeno(unop(op, arg)) == "(" ++ asDeno(op) ++ " " ++ asDeno(arg) ++ ")"
DEF asDeno(number(r)) == ``(r, 6)
DEF asDeno(pi) == "PI"
DEF asDeno(varx) == "X"
DEF asDeno(vary) == "Y"
DEF asDeno((error(msg)):expr) == "ERROR: " ++ msg

DEF asDeno(add) == "ADD"
DEF asDeno(sub) == "SUB"
DEF asDeno(mul) == "MUL"
DEF asDeno(div) == "DIV"
DEF asDeno(pow) == "POW"
DEF asDeno(sin) == "SIN"
DEF asDeno(cos) == "COS"
DEF asDeno(exp) == "EXP"
DEF asDeno(log) == "LOG"
DEF asDeno(abs) == "ABS"
DEF asDeno(neg) == "NEG"
DEF asDeno(sqrt) == "SQRT"

-- FUN subst : expr ** (expr->bool) ** expr -> expr
DEF subst(Expr, var?, Arg) ==
        IF binop?(Expr)    THEN binop ( op(Expr),
                                        subst(left(Expr),  var?, Arg),
                                        subst(right(Expr), var?, Arg) )
        IF unop?(Expr)     THEN unop (  op(Expr),
                                        subst(arg(Expr), var?, Arg))
        IF number?(Expr)   THEN Expr
        IF pi?(Expr)       THEN Expr
        IF var?(Expr)      THEN Arg
        IF error?(Expr)    THEN Expr
        FI
