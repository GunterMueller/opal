IMPLEMENTATION Main

IMPORT BasicIO COMPLETELY
       Com COMPLETELY
       ComCompose COMPLETELY
       Denotation ONLY ++
       Dynamic COMPLETELY
       MethodEnvCompose COMPLETELY
       MethodEnvImplement COMPLETELY
       Nat COMPLETELY
       NatConv ONLY `
       PrettyPrintStream COMPLETELY
       PrettyPrintStreamBuiltin COMPLETELY
       MethodImplement COMPLETELY
       MethodCompose COMPLETELY
       Reflection COMPLETELY
       ReflectionBuild COMPLETELY
       ReflectionConv COMPLETELY
       Seq COMPLETELY
       SeqFilter ONLY |
       StandardOrder COMPLETELY
       Stream COMPLETELY


FUN primes : nat -> seq[nat]

DEF primes(n) == sieve((2 .. n)(\\ x . x))

FUN sieve : seq[nat] -> seq[nat]

DEF sieve(<>) == <>
DEF sieve(p :: N) == p :: sieve((\\ x . x mod p > 0) | N)


DEF reflections ==
  LET n == 100
  IN
  printPrimes(false, false)(n) ;
  printPrimes(true, false)(n) ;
  printPrimes(false, true)(n) ;
  printPrimes(true, true)(n)


FUN printPrimes : bool ** bool -> nat -> com[void]

DEF printPrimes(prettySeq, prettyNat)(n) ==
  LET method == IF prettySeq THEN seq :: m1
		ELSE m1
		FI
      m1 == IF prettyNat THEN nat :: default
	    ELSE default
	    FI
  IN
  write("printing primes up to " ++ `(n) ++ ": ") ;
  print(method)(stdOut, primes(n)) ;
  writeLine(".")
