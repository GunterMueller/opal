/* %- Rcs-Info 

  $Header: /home/florenz/opal/home_uebb_CVS/CVS/ocs/examples/Reflections/Generic/Generic.impl,v 1.1 1999-03-23 12:28:16 kd Exp $
  $Author: kd $
  $Date: 1999-03-23 12:28:16 $
  $State: Exp $

  $Locker:  $
  $Revision: 1.1 $
  $Name: not supported by cvs2svn $

  $Log: not supported by cvs2svn $
  Revision 1.1  1999/03/20 22:42:43  opaladm
  *** empty log message ***

  Revision 1.2  1999/03/03 12:34:31  silver
  Uses compare now.

  Revision 1.1  1999/02/25 18:17:01  silver
  Initial revision


*/

IMPLEMENTATION Generic

IMPORT	ComCompose		COMPLETELY
	Com			COMPLETELY
	Nat			ONLY	nat 0 + 2 3 4 10 11

	OStream			COMPLETELY
	OStreamShift		COMPLETELY
	IStream			COMPLETELY
	IStreamShift		COMPLETELY

	FreeTypeOrder		COMPLETELY
	

-- % Some types

DATA cardKind  == diamond heart spade club
DATA cardValue == 7 8 9 knave queen king 10 ace 

DATA card == card(kind : cardKind, value : cardValue)
DATA hand == :: (top : card, rest : hand)
             <>

DATA handWithValue == handWithValue(h : hand, value : nat)


-- % Some functions

FUN credits : cardValue -> nat
DEF credits (ace)   == 11
DEF credits (10)    == 10
DEF credits (king)  == 4
DEF credits (queen) == 3
DEF credits (knave) == 2
DEF credits (9)     == 0
DEF credits (8)     == 0
DEF credits (7)     == 0

FUN handValue : hand -> nat
DEF handValue (<>) == 0
DEF handValue (card(_, v) :: rest) == credits(v) + handValue (rest)

FUN addValue : hand -> handWithValue
DEF addValue (hand) == handWithValue (hand, handValue (hand))

FUN minimum : hand -> card
DEF minimum (c :: <>) == c
DEF minimum (a :: more) ==
  IF a < minimum (more) THEN a
                        ELSE minimum (more)
  FI

-- % Some constants

FUN goodHand mediumHand badHand : hand
DEF goodHand ==
  card (spade,   ace) ::
  card (club,    10) ::
  card (heart,   ace) ::
  card (diamond, 10) :: <>

DEF mediumHand ==
  card (club,    ace) ::
  card (spade,   ace) ::
  card (heart,   10) ::
  card (heart,   7) :: <>

DEF badHand == 
  card (club,    7) ::
  card (club,    8) ::
  card (heart,   8) ::
  card (heart,   9) :: <>



DEF Generic ==

  -- Introduction
  cout << "Generic printer." << endl;
  cout << "Printing the hands: " << endl;
  cout << endl;
  cout << "A good hand: " << addValue(goodHand) << endl;
  cout << "A medium hand: " << addValue(mediumHand) << endl;
  cout << "A bad hand: " << addValue(badHand) << endl;
  cout << "Smallest: " << minimum (goodHand) << ", " 
		       << minimum (mediumHand) << ", "
		       << minimum (badHand) << "." << endl