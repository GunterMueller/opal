IMPLEMENTATION Rational

IMPORT Denotation ONLY ++ 
       IntConv ONLY `
       Int COMPLETELY
       ABORT COMPLETELY

-- type definition 
DATA rat == //(num: int, den: int) 
-- unchecked division

DEF x / y == IF y zero? THEN ABORT("zero denominator") ELSE x // y FI

DEF asDeno(n // d) == 
  IF d zero? THEN "undefined"
  ELSE
    LET (n1, d1) == norm(n, d)
    IN
    `(n1) ++ "/" ++ `(d1)
  FI

DEF (n1//d1)+(n2//d2) == n1 * d2 + n2 * d1 // d1 * d2
DEF (n1//d1)-(n2//d2) == n1 * d2 - n2 * d1 // d1 * d2
DEF (n1//d1)*(n2//d2) == n1 * n2 // d1 * d2
DEF (n1//d1)/(n2//d2) == n1 * d2 // n2 * d1

-- normalize rational number
FUN norm: int ** int -> int ** int
DEF norm(x,y) == 
  IF x zero? THEN (0,1)
  ELSE
    (u / d, v / d)
    WHERE u == sign(y) * x
          v == abs(y)
          d == gcd(abs(u), v)
  FI

-- greatest common divisor
-- precondition: both arguments are positive
FUN gcd: int ** int -> int
DEF gcd(u, v) == IF u = v THEN u ELSE gcd(max(u,v)-min(u,v), min(u,v)) FI
