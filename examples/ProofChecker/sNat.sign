/* %Copy of (part of) structure @code{Nat} with laws, proofs, etc.
*/

SIGNATURE sNat
/$ PROOFCHECK $/

TYPE nat == 0
            succ(pred: nat'sNat)
LAW dfd_0 == DFD 0
LAW dfd_succ == ALL a. DFD succ(a)

FUN + : nat'sNat ** nat'sNat -> nat'sNat
ASSERT BinAssoc[nat'sNat, +] COMPLETELY
ASSERT BinNeutral[nat, +, 0] COMPLETELY
LAW dfd_+ == ALL a b. DFD a + b

FUN - : nat'sNat ** nat'sNat -> nat'sNat
SPC a - b == c
PRE b < a OR b === a
POST c + b === a
LAW dfd_- == ALL a b. b < a OR b === a ==> DFD a - b

FUN < : nat'sNat ** nat'sNat -> bool
SPC a < b == p
PRE true
POST p <=> EX x. succ(a + x) === b
ASSERT TotalOrder[nat, <] COMPLETELY
LAW dfd_< == ALL a:nat b. DFD a < b
LAW <_succ == ALL a:nat. a < succ(a)