IMPLEMENTATION sNatAux
/$ PROOFCHECK $/

-- %$Proofs$
IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       REFLEXIONS COMPLETELY
       ProofTactics COMPLETELY
       CalcLogicalForward COMPLETELY
       CalcPP COMPLETELY
       ProofByTest COMPLETELY
       Certify COMPLETELY
       Seq COMPLETELY


LAW dfd_succ2 == DFD succ'sNat

PROOF def_f : <_succ dfd_succ dfd_succ2|- Copy[Spc[f]:LAW]
PROOF def_f == traceP(unskolem; opalR; tApartL; assume; checkSkolem; tApartS)

LAW -+ == ALL a b. (a - b) + b === a
PROOF -+ : |- -+
PROOF -+ == test[+, nat'sNat](
            (0 + 0) ::
            (succ(0) + 0) ::
            (0 + succ(succ(0))) ::
             <>)

PROP P : Copy[Spc[f]:LAW] <_succ Copy[Spc[f]:LAW] |- -+
JSTF P ==
  signed("-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.0.0 (GNU/Linux)\nComment: Signature for justification `P'  Son Feb  6 22:14:20 MET 2000\n\niD8DBQA4neQsJLvU+9PlFxQRAubrAJ9trvS+RTTNI7XtZZWspIzzhWPYkQCdFlKa\n5zFpFEf7dBoqW/DLsbTbzH0=\n=d+P/\n-----END PGP SIGNATURE-----")
