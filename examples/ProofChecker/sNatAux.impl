IMPLEMENTATION sNatAux
/$ PROOFCHECK $/

-- %$Proofs$
IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       ProofTactics COMPLETELY
       CalcLogicalForward COMPLETELY
       CalcPP COMPLETELY

       ProofByTest COMPLETELY
       REFLEXIONS COMPLETELY
       FORMALTEST COMPLETELY

       Pair ONLY pair &
       Seq COMPLETELY


LAW dfd_succ2 == DFD succ'sNat

PROOF def_f : <_succ dfd_succ dfd_succ2|- Copy[Spc[f]:LAW]
PROOF def_f == traceP(unskolem; opalR; tApartL; assume; checkSkolem; tApartS)

LAW -+ == ALL a b. (a - b) + b === a
PROOF -+ : |- -+
PROOF -+ == test[+, nat'sNat](
            (0 + 0) ::
            (succ(0) + 0) :: 
            (0 + succ(succ(0))) ::
             <>)

PROP P : Copy[Spc[f]:LAW] <_succ Copy[Spc[f]:LAW] |- -+
JSTF P ==
  signed("-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.0.0 (GNU/Linux)\nComment: Signature for justification `P'  Don Feb 10 17:48:57 MET 2000\n\niD8DBQA4ouv5JLvU+9PlFxQRAuaJAKCaWF3tH/GUeuAtq1IKGmKm0k0jjQCeLby0\nGTcEa9E+iBQNq74G1cR2rI4=\n=y1eI\n-----END PGP SIGNATURE-----")

LEMMA L1 : -+ ==> Copy[Spc[f]:LAW]
JSTF L1 ==
  signed("-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.0.0 (GNU/Linux)\nComment: Signature for justification `L1'  Don Mai 18 11:15:37 MEST 2000\n\niD8DBQA5I7S5JLvU+9PlFxQRAq9nAKDIOe1yLop0ZtyIcauPXZB5dhptzACg0xB4\nKO74McWGNvqX9GebpUyQJoU=\n=yo00\n-----END PGP SIGNATURE-----")


FUN g1: nat'sNat -> nat'sNat
DEF g1(0) == succ(0)
DEF g1(succ(_)) == 0

LAW g1 == ALL x. g1(x) === 0

LEMMA FT1 : ==> g1
JUSTF FT1 == formalTest(g1, allGuards, %(0, succ(0)))

FUN g2: nat'sNat ** nat'sNat -> nat'sNat
DEF g2(x, y) == IF x < succ(0) THEN 0
                IF succ(succ(0)) < x THEN 0
                ELSE succ(0)
                FI

LAW g2 == ALL x y. g2(x, y) === 0

LEMMA FT2 : ==> g2
JUSTF FT2 == formalTest(g2, allGuards, %(&(0,0), &(succ(0), 0)))

LEMMA FT2a : ==> g2
JUSTF FT2a == formalTest(g2, allConstructors, %(&(0,0), &(succ(0), 0)))