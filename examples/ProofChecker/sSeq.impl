IMPLEMENTATION sSeq

DATA seq == <>
            ::(ft: data, rt: seq'sSeq)

DEF <> ++ l2 == l2
DEF (d :: l1) ++ l2 == d :: (l1 ++ l2)

-- %$Proofs$
IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       REFLEXIONS COMPLETELY
       ProofAn COMPLETELY
       ProofTactics COMPLETELY
       CalcLogicalForward COMPLETELY

PROOF assoc_++ : Def[++'sSeq] Copy[dfd_++ :LAW]
                   CDfd[<>] CDfd[::] |- Copy[assoc[seq, ++]:LAW]
PROOF assoc_++ == statP(mInduct; rewriter30)

PROOF neutral_l_++ : Def[++'sSeq] |- Copy[neutral_l[seq, ++, <>]:LAW]
PROOF neutral_l_++ == trivial

PROOF neutral_r_++ : Def[++'sSeq] CDfd[<>] |- Copy[neutral_r[seq, ++, <>]:LAW]
PROOF neutral_r_++ == statP(mInduct; rewriter30)

PROOF dfd_++ : Def[++'sSeq] CDfd[<>] CDfd[::] |- Copy[dfd_++ :LAW]
PROOF dfd_++ == statP(mInduct; rewriter30)

