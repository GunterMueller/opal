IMPLEMENTATION Colour
/$ PROOFCHECK $/

IMPORT pReal COMPLETELY

DATA colour == rgb(redV: real, greenV: real, blueV: real)

DEF red == rgb(1, 0, 0)
DEF green == rgb(0, 1, 0)
DEF blue == rgb(0, 0, 1)

DEF red?(rgb(r, g, b)) == r = 1 and g = 0 and b = 0
DEF green?(rgb(r, g, b)) == r = 0 and g = 1 and b = 0
DEF blue?(rgb(r, g, b)) == r = 0 and g = 0 and b = 1

-- %$Proofs$
IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       ProofTactics COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcLogicalForward COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       REFLEXIONS COMPLETELY

IMPORT pBOOL COMPLETELY

-- %$$Discriminator$

FUN dProof: proofscript
DEF dProof == statP(rewriter30)

-- %$$$red$
PROOF discr_red_red: Def[red] Def[red?] numbers spc_and |- 
      Copy[Discr[red, red?]:LAW]
PROOF discr_red_red == dProof

PROOF discr_red_green: Def[red] Def[green?] numbers spc_and |- 
      Copy[Discr[red, green?]:LAW]
PROOF discr_red_green == dProof

PROOF discr_red_blue: Def[red] Def[blue?] numbers spc_and |- 
      Copy[Discr[red, blue?]:LAW]
PROOF discr_red_blue == dProof

-- %$$$green$
PROOF discr_green_red: Def[green] Def[red?] numbers spc_and |- 
      Copy[Discr[green, red?]:LAW]
PROOF discr_green_red == dProof

PROOF discr_green_green: Def[green] Def[green?] numbers spc_and |- 
      Copy[Discr[green, green?]:LAW]
PROOF discr_green_green == dProof

PROOF discr_green_blue: Def[green] Def[blue?] numbers spc_and |- 
      Copy[Discr[green, blue?]:LAW]
PROOF discr_green_blue == dProof

-- %$$$blue$
PROOF discr_blue_red: Def[blue] Def[red?] numbers spc_and |- 
      Copy[Discr[blue, red?]:LAW]
PROOF discr_blue_red == dProof

PROOF discr_blue_green: Def[blue] Def[green?] numbers spc_and |- 
      Copy[Discr[blue, green?]:LAW]
PROOF discr_blue_green == dProof

PROOF discr_blue_blue: Def[blue] Def[blue?] numbers spc_and |- 
      Copy[Discr[blue, blue?]:LAW]
PROOF discr_blue_blue == dProof


-- %$$Equivalences$

FUN eqProof: proofscript
DEF eqProof == statP(*(rewrite_r_deep); rewriter30; biimpl_l; tApartS)

-- %$$$red$
PROOF eq_red_red: |- Copy[Equiv[red, red]:LAW]
PROOF eq_red_red == statP(equiv_refl)

PROOF eq_red_green: Def[red] Def[green] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[red, green]: LAW]
PROOF eq_red_green == eqProof

PROOF eq_red_blue: Def[red] Def[blue] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[red, blue]: LAW]
PROOF eq_red_blue == eqProof


-- %$$$blue$
PROOF eq_blue_blue: |- Copy[Equiv[blue, blue]:LAW]
PROOF eq_blue_blue == statP(equiv_refl)

PROOF eq_blue_red: Def[blue] Def[red] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[blue, red]: LAW]
PROOF eq_blue_red == eqProof

PROOF eq_blue_green: Def[blue] Def[green] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[blue, green]: LAW]
PROOF eq_blue_green == eqProof


-- %$$$green$
PROOF eq_green_green: |- Copy[Equiv[green, green]:LAW]
PROOF eq_green_green == statP(equiv_refl)

PROOF eq_green_red: Def[green] Def[red] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[green, red]: LAW]
PROOF eq_green_red == eqProof

PROOF eq_green_blue: Def[green] Def[blue] Equiv[rgb, rgb] numbers |- 
                      Copy[Equiv[green, blue]: LAW]
PROOF eq_green_blue == eqProof

-- %$$Discriminator definedness$$
PROOF ddfd_red: Def[red?] numbers spc_and
                 dfd_= dfd_and dfd_true dfd_false |- Copy[DDfd[red?]:LAW]
PROOF ddfd_red == statP(mInduct; rewriter30)

PROOF ddfd_green: Def[green?] numbers spc_and
                 dfd_= dfd_and dfd_true dfd_false |- Copy[DDfd[green?]:LAW]
PROOF ddfd_green == statP(mInduct; rewriter30)

PROOF ddfd_blue: Def[blue?] numbers spc_and
                 dfd_= dfd_and dfd_true dfd_false |- Copy[DDfd[blue?]:LAW]
PROOF ddfd_blue == statP(mInduct; rewriter30)

-- %$$Generatedness$

PROOF gen : |- Copy[Gen[colour]:LAW]
PROOF gen == trust("Restr[Gen] NYI")

-- %$Lemmas$

LAW numbers == 0 = 0 AND 0 = 1 === false AND 1 = 0 === false AND 1 = 1
               AND NOT 1 === 0 AND NOT 0 === 1 AND DFD 0 AND DFD 1
PROOF numbers : |- numbers
PROOF numbers == evaluate


