/* %Some functions on sets of natural numbers, needed for the
    sieve algorithm.
*/

SIGNATURE NSet
/$ PROOFCHECK $/

IMPORT Set[nat, <] ONLY set in incl - <= = {}?
       Nat ONLY nat < > >= 2 <=
       Num ONLY prime
       SetFilter[nat, <] ONLY |

-- %$Special sets$

-- %The set of all prime numbers up to and possibly including @code{N}
FUN primes: nat -> set[nat, <]
SPC primes(N) == S
PRE N >= 2
POST ALL n. n in S <=> n >= 2 AND n <= N AND prime(n) 

-- %The set of all numbers between 2 and N
FUN range: nat -> set[nat, <]
SPC range(N) == R
PRE N >= 2
POST ALL n. n in R <=> n >= 2 AND n <= N

-- %return the smallest number greater than n in the set
FUN nextAfter: nat ** set[nat, <] -> nat
SPC nextAfter(n, s) == N
PRE EX m. m in s AND m > n
POST N > n AND ALL m. m in s AND m > n ==> m >= N AND N in s

-- %$Properties$

LAW filter1 == ALL x P S. x in P | S ==> P(x)
LAW filter2 == ALL x P S. P(x) AND x in S ==> x in P | S
LAW filter3 == ALL x P S. x in P | S ==> P(x) AND x in S 

LAW in1 == ALL x a S. x in a incl S ==> x === a OR x in S
LAW in2 == ALL x a S. x === a OR x in S ==> x in a incl S
LAW in3 == ALL x S1 S2. x in S1 AND S1 <= S2 ==> x in S2

LAW minus1 == ALL x S1 S2. x in S1 - S2 ==> x in S1 AND (NOT x in S2)
LAW minus2 == ALL S1 S2. {}?(S1 - S2) ==> S1 <= S2

LAW subseteq1 == ALL x S1 S2. (x in S1 ==> x in S2) ==> S1 <= S2

LAW empty == ALL S. (ALL s. NOT s in S) ==> {}?(S)

LAW eq == ALL S1 S2. S1 <= S2 AND S2 <= S1 ==> S1 = S2

LAW dfd_filter == ALL P S. (ALL x. x in S ==> DFD P(x)) ==> DFD P | S
LAW dfd_range == ALL n. n >= 2 ==> DFD range(n)
LAW dfd_incl == ALL a S. DFD a incl S
LAW dfd_primes == ALL n. n >= 2 ==> DFD primes(n)
LAW dfd_minus == ALL S1 S2. DFD S1 - S2
LAW dfd_nextAfter == ALL n S. (EX m. m in S AND m > n) ==> DFD nextAfter(n, S)
LAW dfd_nextAfterR == ALL n S. DFD nextAfter(n, S) ==> (EX m. m in S AND m > n)
-- %$Pretty printing$
/$ prettyfix [in, incl] 1 $/