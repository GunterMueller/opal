/* %Some functions and properties on natural numbers
    needed for the sieve algorithm. 
*/
SIGNATURE Num
/$ PROOFCHECK $/

IMPORT Nat ONLY nat odd? 2 3 succ >= <= < pred  0 1 succ? > + -

FUN prime: nat -> bool

-- %the smallest prime factor
FUN spf: nat -> nat

FUN divides: nat ** nat -> bool

FUN ² : nat -> nat

FUN root: nat -> nat

-- %$Properties$
LAW dfd_odd == ALL x. DFD odd?(x)
LAW dfd_odd2 == DFD odd?
LAW dfd0 == DFD 0
LAW dfd1 == DFD 1
LAW dfd2 == DFD 2
LAW dfd3 == DFD 3
LAW dfd_succ == ALL x. DFD succ(x)
LAW dfd_prime == ALL x. DFD prime(x)
LAW dfd_spf == ALL x. x >= 2 ==> DFD spf(x)
LAW dfd_sqr == ALL x. DFD x²
LAW dfd_>= == ALL x y. DFD x >= y
LAW dfd_<= == ALL x y. DFD x <= y
LAW dfd_minus == ALL x y. y <= x ==> DFD x - y
LAW dfd_plus == ALL x y. DFD x + y
LAW dfd_root == ALL x. DFD root(x)

LAW odd1 == ALL x. odd?(x) ==> NOT (2 divides x)

LAW prime2 == prime(2)
LAW prime_size == ALL x. prime(x) ==> x >= 2
LAW prime_char == ALL x. prime(x) ==> (x === 2) OR odd?(x)

LAW spf1 == ALL s. s >= 2 ==> NOT(prime(s)) ==> (spf(s)²) <= s
LAW spf1a == ALL s. s >= 2 ==> spf(s) <= s
LAW spf2 == ALL s. s >= 2 ==> prime(spf(s))
LAW spf3 == ALL s. s >= 2 ==> spf(s) >= 2
LAW spf4 == ALL s. s >= 2 ==> spf(s) divides s
LAW spf5 == ALL s. s >= 2 ==> NOT(prime(s)) ==> NOT(spf(s) === s)
LAW spf5a == ALL s. s >= 2 ==> spf(s) === s ==> prime(s)

LAW 1_def == 1 === succ(0)
LAW 2_def == 2 === succ(1)
LAW 3_def == 3 === succ(2)

LAW root1 == ALL x y. x <= root(y) <=> (x²) <= y
LAW root2 == ALL x y. x <= root(y) === (x²) <= y

LAW >=_succ_mono == ALL x. succ(x) >= x
LAW >=_succ? == ALL x y. x >= succ(y) ==> succ?(x)
LAW >=_succ1 == 
          ALL x y. x >= y AND succ?(x) AND succ?(y) ==> pred(x) >= pred(y)
LAW <_sqr_mono == ALL x y. (x²) < (y²) ==> x < y
LAW <_sqr_monoR == ALL x y. x < y ==> (x²) < (y²) 
LAW <_succ? == ALL x y. x < y ==> succ?(y)
LAW <_plus_l == ALL x y z. x < y ==> z + x < z + y 
LAW <_plus_r == ALL x y z. x < y ==> x + z < y + z
LAW <_minus == ALL x a y b. (DFD x - a AND DFD y - b) ==> 
                 x + b < y + a ==> x - a < y - b
LAW <_plus_split == ALL x y z. x < y OR x < z ==> x < y + z
LAW <_succ == ALL x. x < succ(x)

LAW >=_<= == ALL a b. a <= b AND b <= a ==> a === b
LAW <=_reduce == ALL a b. a >= b ==> b <= a
LAW <=_1 == ALL a b. a < b ==> a <= pred(b)
LAW <=_1R == ALL a b. a <= pred(b) ==> a < b
LAW <=_2 == ALL a b c. a <= b AND b < c ==> a < c
LAW <=_3 == ALL a b. NOT a > b ==> a <= b
LAW <=_4 == ALL a b. a <= pred(b) OR a === b ==> a <= b
LAW <=_4R == ALL a b. a <= b ==> a <= pred(b) OR a === b 
LAW <_<= == ALL a b. a < b ==> a <= b
LAW <=_>= == ALL a b. a <= b ==> b >= a

LAW >_< == ALL a b. a > b ==> b < a
LAW >_>=_>= == ALL a b c. a > b AND b >= c ==> a >= c
LAW <_<=_<= == ALL a b c. a < b AND b <= c ==> a <= c
LAW <_<=_< == ALL a b c. a < b AND b <= c ==> a < c
LAW >_>= == ALL a b. a > b ==> a >= b
LAW >=_<=_1 == ALL a b. a >= b ==> b <= a
LAW <_not == ALL a:nat b. a < b ==> NOT a === b

LAW partNat == ALL x y. x > y OR x <= y
LAW partNat2 == ALL x y. x >= y ==> x <= pred(y) === false

ASSERT RelRefl[nat, divides] COMPLETELY
ASSERT RelRefl[nat, >=] COMPLETELY
ASSERT RelRefl[nat, <=] COMPLETELY
ASSERT RelTrans[nat, <=] COMPLETELY
ASSERT RelTrans[nat, >=] COMPLETELY

/$ prettyfix [², divides] 1 $/