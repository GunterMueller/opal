/* %This is a proof of the sieve of Eratosthenes, following 
    an article of @sc{C.A.R. Hoare}: »Proof of a strucutred program: The
    sieve of Eratosthenes«, @i{The Computer Journal, Vol 15, No. 4,
    pp. 321 - 325}. The algorithm given in this article is imperative,
    so we had to reformulate some statements, and de-globalize some
    variables.
@macro ORIG
@quotation
»
@end macro
@macro ENDORIG
«
@end quotation
@end macro
@macro MATH{form}
@i{\form\}
@end macro
@macro DISPLAY{form}
@display
@i{\form\}
@end display
@end macro
@macro LEMMA{no}
@b{Lemma \no\:}@*
@end macro
@macro Mitem{form}
@item \form\

@end macro
@macro PROOF
@b{Proof:}@*
@end macro
*/

SIGNATURE Sieve
/$ PROOFCHECK $/

IMPORT NSet ONLY primes set
       Nat ONLY nat 2 >= <
       Set[nat, <] ONLY =

/* %
@ORIG{}
The Sieve of Eratosthenes is an efficient method of finding all primes equal
or less than a given integer N. The `sieve' contains initially 2 and all
odd numbers up to N; but numbers which are multiples of other numbers are
gradually `sifted out', until all numbers remaining in the sieve are prime.

The desired result of the algorithm is

@example
sieve = primes(N)
@end example

where sieve is a set of integers and primes(k) is the set of all
primes up to and possibly including k.
@ENDORIG{}
*/

FUN sieve: nat -> set[nat, <]
SPC sieve(N) == S
PRE N >= 2
POST primes(N) = S
