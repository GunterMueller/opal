IMPLEMENTATION SecureCom
/$ PROOFCHECK $/

IMPORT pFile COMPLETELY
       pComCompose COMPLETELY
       ComCompose COMPLETELY

DEF good == open("/tmp/foo", "w") & (\\ f:file.
            write(f, "bar") &[void, void] (\\ x:void.
            close(f)))

-- %$Proofs$
IMPORT BasicTac COMPLETELY
       Strategies COMPLETELY
       CalcInduct COMPLETELY
       CalcComputational COMPLETELY
       CalcLogical COMPLETELY
       CalcDomain COMPLETELY
       CalcStructural COMPLETELY
       REFLEXIONS COMPLETELY
       ProofAn COMPLETELY
       ProofTactics COMPLETELY
       CalcLogicalForward COMPLETELY
       CalcPP COMPLETELY
       ProofByTest COMPLETELY

PROOF good_secure: Def[good] open_secure write_secure close_secure
                    lemma1
                    secure_&_1 secure_&_2 |- Copy[secure[good, void]:LAW]
PROOF good_secure == traceP(rewriter30 ;tApartM; dfd_deno;
                            lambda_reduce; tApartM; dfd_deno;
                            lambda_reduce; tApartM; dfd_lambda)

LAW lemma1 == "/tmp/" <| "/tmp/foo"
PROOF lemma1 : |- lemma1
PROOF lemma1 == evaluate